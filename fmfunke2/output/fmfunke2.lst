FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
0014: 7D 0E 0F LJMP  _COMP_1_ISR        (0137)     ljmp	_COMP_1_ISR
0017: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 25 E5 LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 09 73 LJMP  _Timer8_1_ISR      (0149)     ljmp	_Timer8_1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 0E 10 LJMP  _ADCINC_1_ADConversion_ISR(0153)     ljmp	_ADCINC_1_ADConversion_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 07 60 LJMP  _UART_1_TX_ISR     (0157)     ljmp	_UART_1_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 07 61 LJMP  _UART_1_RX_ISR     (0161)     ljmp	_UART_1_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 08 96 LJMP  _Timer8_3_ISR      (0165)     ljmp	_Timer8_3_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 08 E9 LJMP  _Timer8_2_ISR      (0169)     ljmp	_Timer8_2_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 05 66 LJMP  _UART_2_TX_ISR     (0173)     ljmp	_UART_2_TX_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 05 67 LJMP  _UART_2_RX_ISR     (0177)     ljmp	_UART_2_RX_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 81 MOV   REG[0xE3],0x81     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 61    MOV   A,0x61             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
007B: 55 FA 01 MOV   [filter+186],0x1   
007E: 4F       MOV   X,SP               
007F: 5B       MOV   A,X                
0080: 01 03    ADD   A,0x3              
0082: 53 F9    MOV   [filter+185],A     
0084: 55 F8 3A MOV   [filter+184],0x3A  
0087: 50 06    MOV   A,0x6              
0089: 00       SWI                      
008A: 71 10    OR    F,0x10             
008C: 51 F9    MOV   A,[filter+185]     
008E: 60 E8    MOV   REG[0xE8],A        
0090: 51 F8    MOV   A,[filter+184]     
0092: 60 EA    MOV   REG[0xEA],A        
0094: 70 EF    AND   F,0xEF             
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
0096: 55 F8 00 MOV   [filter+184],0x0   (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0099: 55 F9 00 MOV   [filter+185],0x0   (0261)     mov  [bSSC_KEYSP], 0
009C: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
009E: 62 E0 1A MOV   REG[0xE0],0x1A     (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
00A1: 70 EF    AND   F,0xEF             
00A3: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
00A6: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
00A9: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
00AC: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
00AF: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
00B2: 7C 04 FC LCALL 0x04FC             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
00B5: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
00B7: 55 0A 19 MOV   [__r0],0x19        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
00BA: 3C 0A 50 CMP   [__r0],0x50        (0362)     cmp  [__r0],<__bss_end
00BD: A0 05    JZ    0x00C3             (0363)     jz   BssDone
00BF: 3F 0A    MVI   [__r0],A           (0364)     mvi  [__r0],A
00C1: 8F F8    JMP   0x00BA             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00C3: 50 04    MOV   A,0x4              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00C5: 57 17    MOV   X,0x17             (0368)     mov  X,<__idata_start
00C7: 55 0A 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00CA: 3C 0A 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00CD: A0 0B    JZ    0x00D9             (0372)     jz   C_RTE_Done
00CF: 08       PUSH  A                  (0373)     push A
00D0: 28       ROMX                     (0374)     romx
00D1: 3F 0A    MVI   [__r0],A           (0375)     mvi  [__r0],A
00D3: 18       POP   A                  (0376)     pop  A
00D4: 75       INC   X                  (0377)     inc  X
00D5: 09 00    ADC   A,0x0              (0378)     adc  A,0
00D7: 8F F2    JMP   0x00CA             (0379)     jmp  IDataLoop
00D9: 71 10    OR    F,0x10             
00DB: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00DD: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00E0: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00E2: 62 E0 1A MOV   REG[0xE0],0x1A     (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00E5: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00E7: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00EA: 7C 1E CF LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00ED: 8F FF    JMP   0x00ED             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
                                        (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
00EF: 50 08    MOV   A,0x8              (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00F1: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0437: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_fmfunke_Bank1
                                        (0019) export LoadConfigTBL_fmfunke_Bank0
                                        (0020) export LoadConfigTBL_fmfunke_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_fmfunke_Bank0:
                                        (0023) ;  Instance name ADCINC_1, User Module ADCINC
                                        (0024) ;       Instance name ADCINC_1, Block Name ADC(ASC12)
                                        (0025) 	db		88h, 90h		;ADCINC_1_AtoDcr0(ASC12CR0)
                                        (0026) 	db		89h, 00h		;ADCINC_1_AtoDcr1(ASC12CR1)
                                        (0027) 	db		8ah, 60h		;ADCINC_1_AtoDcr2(ASC12CR2)
                                        (0028) 	db		8bh, f0h		;ADCINC_1_AtoDcr3(ASC12CR3)
                                        (0029) ;       Instance name ADCINC_1, Block Name PWM(DBB01)
                                        (0030) 	db		27h, 00h		;ADCINC_1_PWMcr0(DBB01CR0)
                                        (0031) 	db		25h, 00h		;ADCINC_1_PWMdr1(DBB01DR1)
                                        (0032) 	db		26h, 01h		;ADCINC_1_PWMdr2(DBB01DR2)
                                        (0033) ;  Instance name COMP_1, User Module COMP
                                        (0034) ;       Instance name COMP_1, Block Name COMP(ACB03)
                                        (0035) 	db		7dh, 8ah		;COMP_1_CR0(ACB03CR0)
                                        (0036) 	db		7eh, 61h		;COMP_1_CR1(ACB03CR1)
                                        (0037) 	db		7fh, 40h		;COMP_1_CR2(ACB03CR2)
                                        (0038) 	db		7ch, 00h		;COMP_1_CR3(ACB03CR3)
                                        (0039) ;  Instance name DAC8_1, User Module DAC8
                                        (0040) ;       Instance name DAC8_1, Block Name LSB(ASD20)
                                        (0041) 	db		90h, 80h		;DAC8_1_LSB_CR0(ASD20CR0)
                                        (0042) 	db		91h, 80h		;DAC8_1_LSB_CR1(ASD20CR1)
                                        (0043) 	db		92h, 20h		;DAC8_1_LSB_CR2(ASD20CR2)
                                        (0044) 	db		93h, 30h		;DAC8_1_LSB_CR3(ASD20CR3)
                                        (0045) ;       Instance name DAC8_1, Block Name MSB(ASC21)
                                        (0046) 	db		94h, a0h		;DAC8_1_MSB_CR0(ASC21CR0)
                                        (0047) 	db		95h, 41h		;DAC8_1_MSB_CR1(ASC21CR1)
                                        (0048) 	db		96h, 20h		;DAC8_1_MSB_CR2(ASC21CR2)
                                        (0049) 	db		97h, 34h		;DAC8_1_MSB_CR3(ASC21CR3)
                                        (0050) ;  Instance name E2PROM_1, User Module E2PROM
                                        (0051) ;  Instance name Eingangsamp, User Module PGA
                                        (0052) ;       Instance name Eingangsamp, Block Name GAIN(ACB01)
                                        (0053) 	db		75h, fdh		;Eingangsamp_GAIN_CR0(ACB01CR0)
                                        (0054) 	db		76h, a1h		;Eingangsamp_GAIN_CR1(ACB01CR1)
                                        (0055) 	db		77h, 20h		;Eingangsamp_GAIN_CR2(ACB01CR2)
                                        (0056) 	db		74h, 00h		;Eingangsamp_GAIN_CR3(ACB01CR3)
                                        (0057) ;  Instance name HF_power, User Module LED
                                        (0058) ;  Instance name LCD_1, User Module LCD
                                        (0059) ;  Instance name PGA_1, User Module PGA
                                        (0060) ;       Instance name PGA_1, Block Name GAIN(ACB02)
                                        (0061) 	db		79h, feh		;PGA_1_GAIN_CR0(ACB02CR0)
                                        (0062) 	db		7ah, 21h		;PGA_1_GAIN_CR1(ACB02CR1)
                                        (0063) 	db		7bh, 20h		;PGA_1_GAIN_CR2(ACB02CR2)
                                        (0064) 	db		78h, 00h		;PGA_1_GAIN_CR3(ACB02CR3)
                                        (0065) ;  Instance name PTT, User Module LED
                                        (0066) ;  Instance name RefMux_1, User Module RefMux
                                        (0067) ;       Instance name RefMux_1, Block Name REFMUX(ACB00)
                                        (0068) 	db		71h, 01h		;RefMux_1_REFMUX_CR0(ACB00CR0)
                                        (0069) 	db		72h, 09h		;RefMux_1_REFMUX_CR1(ACB00CR1)
                                        (0070) 	db		73h, 14h		;RefMux_1_REFMUX_CR2(ACB00CR2)
                                        (0071) 	db		70h, 00h		;RefMux_1_REFMUX_CR3(ACB00CR3)
                                        (0072) ;  Instance name Timer8_1, User Module Timer8
                                        (0073) ;       Instance name Timer8_1, Block Name TIMER8(DBB00)
                                        (0074) 	db		23h, 04h		;Timer8_1_CONTROL_REG(DBB00CR0)
                                        (0075) 	db		21h, 4eh		;Timer8_1_PERIOD_REG(DBB00DR1)
                                        (0076) 	db		22h, 27h		;Timer8_1_COMPARE_REG(DBB00DR2)
                                        (0077) ;  Instance name Timer8_2, User Module Timer8
                                        (0078) ;       Instance name Timer8_2, Block Name TIMER8(DBB11)
                                        (0079) 	db		37h, 04h		;Timer8_2_CONTROL_REG(DBB11CR0)
                                        (0080) 	db		35h, 1fh		;Timer8_2_PERIOD_REG(DBB11DR1)
                                        (0081) 	db		36h, 00h		;Timer8_2_COMPARE_REG(DBB11DR2)
                                        (0082) ;  Instance name Timer8_3, User Module Timer8
                                        (0083) ;       Instance name Timer8_3, Block Name TIMER8(DBB10)
                                        (0084) 	db		33h, 04h		;Timer8_3_CONTROL_REG(DBB10CR0)
                                        (0085) 	db		31h, 00h		;Timer8_3_PERIOD_REG(DBB10DR1)
                                        (0086) 	db		32h, 00h		;Timer8_3_COMPARE_REG(DBB10DR2)
                                        (0087) ;  Instance name UART_1, User Module UART
                                        (0088) ;       Instance name UART_1, Block Name RX(DCB03)
                                        (0089) 	db		2fh, 00h		;UART_1_RX_CONTROL_REG(DCB03CR0)
                                        (0090) 	db		2dh, 00h		;UART_1_(DCB03DR1)
                                        (0091) 	db		2eh, 00h		;UART_1_RX_BUFFER_REG (DCB03DR2)
                                        (0092) ;       Instance name UART_1, Block Name TX(DCB02)
                                        (0093) 	db		2bh, 00h		;UART_1_TX_CONTROL_REG(DCB02CR0)
                                        (0094) 	db		29h, 00h		;UART_1_TX_BUFFER_REG (DCB02DR1)
                                        (0095) 	db		2ah, 00h		;UART_1_(DCB02DR2)
                                        (0096) ;  Instance name UART_2, User Module UART
                                        (0097) ;       Instance name UART_2, Block Name RX(DCB13)
                                        (0098) 	db		3fh, 00h		;UART_2_RX_CONTROL_REG(DCB13CR0)
                                        (0099) 	db		3dh, 00h		;UART_2_(DCB13DR1)
                                        (0100) 	db		3eh, 00h		;UART_2_RX_BUFFER_REG (DCB13DR2)
                                        (0101) ;       Instance name UART_2, Block Name TX(DCB12)
                                        (0102) 	db		3bh, 00h		;UART_2_TX_CONTROL_REG(DCB12CR0)
                                        (0103) 	db		39h, 00h		;UART_2_TX_BUFFER_REG (DCB12DR1)
                                        (0104) 	db		3ah, 00h		;UART_2_(DCB12DR2)
                                        (0105) ;  Global Register values Bank 0
                                        (0106) 	db		60h, 3eh		; AnalogColumnInputSelect register (AMX_IN)
                                        (0107) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0108) 	db		63h, 17h		; AnalogReferenceControl register (ARF_CR)
                                        (0109) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0110) 	db		e6h, 04h		; DecimatorControl_0 register (DEC_CR0)
                                        (0111) 	db		e7h, 01h		; DecimatorControl_1 register (DEC_CR1)
                                        (0112) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0113) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0114) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0115) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0116) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0117) 	db		b4h, 53h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0118) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0119) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0120) 	db		b8h, 42h		; Row_1_InputMux register (RDI1RI)
                                        (0121) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0122) 	db		bah, 00h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0123) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0124) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0125) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0126) 	db		beh, 01h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0127) 	db		ffh
                                        (0128) LoadConfigTBL_fmfunke_Bank1:
                                        (0129) ;  Instance name ADCINC_1, User Module ADCINC
                                        (0130) ;       Instance name ADCINC_1, Block Name ADC(ASC12)
                                        (0131) ;       Instance name ADCINC_1, Block Name PWM(DBB01)
                                        (0132) 	db		24h, 31h		;ADCINC_1_PWMfn(DBB01FN)
                                        (0133) 	db		25h, 16h		;ADCINC_1_PWMsl(DBB01IN)
                                        (0134) 	db		26h, 40h		;ADCINC_1_PWMos(DBB01OU)
                                        (0135) ;  Instance name COMP_1, User Module COMP
                                        (0136) ;       Instance name COMP_1, Block Name COMP(ACB03)
                                        (0137) ;  Instance name DAC8_1, User Module DAC8
                                        (0138) ;       Instance name DAC8_1, Block Name LSB(ASD20)
                                        (0139) ;       Instance name DAC8_1, Block Name MSB(ASC21)
                                        (0140) ;  Instance name E2PROM_1, User Module E2PROM
                                        (0141) ;  Instance name Eingangsamp, User Module PGA
                                        (0142) ;       Instance name Eingangsamp, Block Name GAIN(ACB01)
                                        (0143) ;  Instance name HF_power, User Module LED
                                        (0144) ;  Instance name LCD_1, User Module LCD
                                        (0145) ;  Instance name PGA_1, User Module PGA
                                        (0146) ;       Instance name PGA_1, Block Name GAIN(ACB02)
                                        (0147) ;  Instance name PTT, User Module LED
                                        (0148) ;  Instance name RefMux_1, User Module RefMux
                                        (0149) ;       Instance name RefMux_1, Block Name REFMUX(ACB00)
                                        (0150) ;  Instance name Timer8_1, User Module Timer8
                                        (0151) ;       Instance name Timer8_1, Block Name TIMER8(DBB00)
                                        (0152) 	db		20h, 60h		;Timer8_1_FUNC_REG(DBB00FN)
                                        (0153) 	db		21h, 15h		;Timer8_1_INPUT_REG(DBB00IN)
                                        (0154) 	db		22h, 40h		;Timer8_1_OUTPUT_REG(DBB00OU)
                                        (0155) ;  Instance name Timer8_2, User Module Timer8
                                        (0156) ;       Instance name Timer8_2, Block Name TIMER8(DBB11)
                                        (0157) 	db		34h, 28h		;Timer8_2_FUNC_REG(DBB11FN)
                                        (0158) 	db		35h, 11h		;Timer8_2_INPUT_REG(DBB11IN)
                                        (0159) 	db		36h, 40h		;Timer8_2_OUTPUT_REG(DBB11OU)
                                        (0160) ;  Instance name Timer8_3, User Module Timer8
                                        (0161) ;       Instance name Timer8_3, Block Name TIMER8(DBB10)
                                        (0162) 	db		30h, 20h		;Timer8_3_FUNC_REG(DBB10FN)
                                        (0163) 	db		31h, 15h		;Timer8_3_INPUT_REG(DBB10IN)
                                        (0164) 	db		32h, 40h		;Timer8_3_OUTPUT_REG(DBB10OU)
                                        (0165) ;  Instance name UART_1, User Module UART
                                        (0166) ;       Instance name UART_1, Block Name RX(DCB03)
                                        (0167) 	db		2ch, 05h		;UART_1_RX_FUNC_REG   (DCB03FN)
                                        (0168) 	db		2dh, c2h		;UART_1_RX_INPUT_REG  (DCB03IN)
                                        (0169) 	db		2eh, 40h		;UART_1_RX_OUTPUT_REG (DCB03OU)
                                        (0170) ;       Instance name UART_1, Block Name TX(DCB02)
                                        (0171) 	db		28h, 0dh		;UART_1_TX_FUNC_REG   (DCB02FN)
                                        (0172) 	db		29h, 02h		;UART_1_TX_INPUT_REG  (DCB02IN)
                                        (0173) 	db		2ah, 44h		;UART_1_TX_OUTPUT_REG (DCB02OU)
                                        (0174) ;  Instance name UART_2, User Module UART
                                        (0175) ;       Instance name UART_2, Block Name RX(DCB13)
                                        (0176) 	db		3ch, 05h		;UART_2_RX_FUNC_REG   (DCB13FN)
                                        (0177) 	db		3dh, d2h		;UART_2_RX_INPUT_REG  (DCB13IN)
                                        (0178) 	db		3eh, 40h		;UART_2_RX_OUTPUT_REG (DCB13OU)
                                        (0179) ;       Instance name UART_2, Block Name TX(DCB12)
                                        (0180) 	db		38h, 1dh		;UART_2_TX_FUNC_REG   (DCB12FN)
                                        (0181) 	db		39h, 02h		;UART_2_TX_INPUT_REG  (DCB12IN)
                                        (0182) 	db		3ah, 46h		;UART_2_TX_OUTPUT_REG (DCB12OU)
                                        (0183) ;  Global Register values Bank 1
                                        (0184) 	db		61h, 0ch		; AnalogClockSelect1 register (CLK_CR1)
                                        (0185) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0186) 	db		60h, 55h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0187) 	db		62h, 29h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0188) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0189) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0190) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0191) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0192) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0193) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0194) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0195) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0196) 	db		e1h, 3fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0197) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0198) 	db		dfh, 09h		; OscillatorControl_3 register (OSC_CR3)
                                        (0199) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0200) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0201) 	db		ffh
                                        (0202) AREA psoc_config(rom, rel)
                                        (0203) LoadConfigTBL_fmfunke_Ordered:
                                        (0204) ;  Ordered Global Register values
                                        (0205) 	M8C_SetBank0
0439: 62 00 00 MOV   REG[0x0],0x0       (0206) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
043C: 71 10    OR    F,0x10             
                                        (0207) 	M8C_SetBank1
043E: 62 00 04 MOV   REG[0x0],0x4       (0208) 	mov	reg[00h], 04h		; Port_0_DriveMode_0 register (PRT0DM0)
0441: 62 01 FB MOV   REG[0x1],0xFB      (0209) 	mov	reg[01h], fbh		; Port_0_DriveMode_1 register (PRT0DM1)
0444: 70 EF    AND   F,0xEF             
                                        (0210) 	M8C_SetBank0
0446: 62 03 F8 MOV   REG[0x3],0xF8      (0211) 	mov	reg[03h], f8h		; Port_0_DriveMode_2 register (PRT0DM2)
0449: 62 02 07 MOV   REG[0x2],0x7       (0212) 	mov	reg[02h], 07h		; Port_0_GlobalSelect register (PRT0GS)
044C: 71 10    OR    F,0x10             
                                        (0213) 	M8C_SetBank1
044E: 62 02 00 MOV   REG[0x2],0x0       (0214) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0451: 62 03 00 MOV   REG[0x3],0x0       (0215) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0454: 70 EF    AND   F,0xEF             
                                        (0216) 	M8C_SetBank0
0456: 62 01 00 MOV   REG[0x1],0x0       (0217) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0459: 62 04 E6 MOV   REG[0x4],0xE6      (0218) 	mov	reg[04h], e6h		; Port_1_Data register (PRT1DR)
045C: 71 10    OR    F,0x10             
                                        (0219) 	M8C_SetBank1
045E: 62 04 06 MOV   REG[0x4],0x6       (0220) 	mov	reg[04h], 06h		; Port_1_DriveMode_0 register (PRT1DM0)
0461: 62 05 FF MOV   REG[0x5],0xFF      (0221) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0464: 70 EF    AND   F,0xEF             
                                        (0222) 	M8C_SetBank0
0466: 62 07 0A MOV   REG[0x7],0xA       (0223) 	mov	reg[07h], 0ah		; Port_1_DriveMode_2 register (PRT1DM2)
0469: 62 06 01 MOV   REG[0x6],0x1       (0224) 	mov	reg[06h], 01h		; Port_1_GlobalSelect register (PRT1GS)
046C: 71 10    OR    F,0x10             
                                        (0225) 	M8C_SetBank1
046E: 62 06 A0 MOV   REG[0x6],0xA0      (0226) 	mov	reg[06h], a0h		; Port_1_IntCtrl_0 register (PRT1IC0)
0471: 62 07 80 MOV   REG[0x7],0x80      (0227) 	mov	reg[07h], 80h		; Port_1_IntCtrl_1 register (PRT1IC1)
0474: 70 EF    AND   F,0xEF             
                                        (0228) 	M8C_SetBank0
0476: 62 05 A0 MOV   REG[0x5],0xA0      (0229) 	mov	reg[05h], a0h		; Port_1_IntEn register (PRT1IE)
0479: 62 08 00 MOV   REG[0x8],0x0       (0230) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
047C: 71 10    OR    F,0x10             
                                        (0231) 	M8C_SetBank1
047E: 62 08 FF MOV   REG[0x8],0xFF      (0232) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
0481: 62 09 00 MOV   REG[0x9],0x0       (0233) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
0484: 70 EF    AND   F,0xEF             
                                        (0234) 	M8C_SetBank0
0486: 62 0B 00 MOV   REG[0xB],0x0       (0235) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0489: 62 0A 80 MOV   REG[0xA],0x80      (0236) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
048C: 71 10    OR    F,0x10             
                                        (0237) 	M8C_SetBank1
048E: 62 0A 00 MOV   REG[0xA],0x0       (0238) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0491: 62 0B 00 MOV   REG[0xB],0x0       (0239) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0494: 70 EF    AND   F,0xEF             
                                        (0240) 	M8C_SetBank0
0496: 62 09 00 MOV   REG[0x9],0x0       (0241) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0499: 62 0C 00 MOV   REG[0xC],0x0       (0242) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
049C: 71 10    OR    F,0x10             
                                        (0243) 	M8C_SetBank1
049E: 62 0C 00 MOV   REG[0xC],0x0       (0244) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
04A1: 62 0D 00 MOV   REG[0xD],0x0       (0245) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
04A4: 70 EF    AND   F,0xEF             
                                        (0246) 	M8C_SetBank0
04A6: 62 0F 00 MOV   REG[0xF],0x0       (0247) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
04A9: 62 0E 00 MOV   REG[0xE],0x0       (0248) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
04AC: 71 10    OR    F,0x10             
                                        (0249) 	M8C_SetBank1
04AE: 62 0E 00 MOV   REG[0xE],0x0       (0250) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
04B1: 62 0F 00 MOV   REG[0xF],0x0       (0251) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
04B4: 70 EF    AND   F,0xEF             
                                        (0252) 	M8C_SetBank0
04B6: 62 0D 00 MOV   REG[0xD],0x0       (0253) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
04B9: 62 10 00 MOV   REG[0x10],0x0      (0254) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
04BC: 71 10    OR    F,0x10             
                                        (0255) 	M8C_SetBank1
04BE: 62 10 00 MOV   REG[0x10],0x0      (0256) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
04C1: 62 11 00 MOV   REG[0x11],0x0      (0257) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
04C4: 70 EF    AND   F,0xEF             
                                        (0258) 	M8C_SetBank0
04C6: 62 13 00 MOV   REG[0x13],0x0      (0259) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
04C9: 62 12 00 MOV   REG[0x12],0x0      (0260) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
04CC: 71 10    OR    F,0x10             
                                        (0261) 	M8C_SetBank1
04CE: 62 12 00 MOV   REG[0x12],0x0      (0262) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
04D1: 62 13 00 MOV   REG[0x13],0x0      (0263) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
04D4: 70 EF    AND   F,0xEF             
                                        (0264) 	M8C_SetBank0
04D6: 62 11 00 MOV   REG[0x11],0x0      (0265) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
04D9: 62 14 00 MOV   REG[0x14],0x0      (0266) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
04DC: 71 10    OR    F,0x10             
                                        (0267) 	M8C_SetBank1
04DE: 62 14 00 MOV   REG[0x14],0x0      (0268) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
04E1: 62 15 00 MOV   REG[0x15],0x0      (0269) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
04E4: 70 EF    AND   F,0xEF             
                                        (0270) 	M8C_SetBank0
04E6: 62 17 00 MOV   REG[0x17],0x0      (0271) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
04E9: 62 16 00 MOV   REG[0x16],0x0      (0272) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
04EC: 71 10    OR    F,0x10             
                                        (0273) 	M8C_SetBank1
04EE: 62 16 00 MOV   REG[0x16],0x0      (0274) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
04F1: 62 17 00 MOV   REG[0x17],0x0      (0275) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
04F4: 70 EF    AND   F,0xEF             
                                        (0276) 	M8C_SetBank0
04F6: 62 15 00 MOV   REG[0x15],0x0      (0277) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
04F9: 70 EF    AND   F,0xEF             
                                        (0278) 	M8C_SetBank0
04FB: 7F       RET                      (0279) 	ret
                                        (0280) 
                                        (0281) 
                                        (0282) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_fmfunke
                                        (0026) export _LoadConfig_fmfunke
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
04FC: 55 0D E6 MOV   [0xD],0xE6         (0067) 	mov		[Port_1_Data_SHADE], e6h
04FF: 55 0E 00 MOV   [0xE],0x0          (0068) 	mov		[Port_2_Data_SHADE], 0h
0502: 55 0F FF MOV   [0xF],0xFF         (0069) 	mov		[Port_2_DriveMode_0_SHADE], ffh
0505: 55 10 00 MOV   [0x10],0x0         (0070) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0071) 
0508: 7C 05 0F LCALL 0x050F             (0072) 	lcall	LoadConfig_fmfunke
050B: 7C 04 37 LCALL 0x0437             (0073) 	lcall	LoadConfigTBL_fmfunke_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
050E: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration fmfunke
                                        (0081) ;
                                        (0082) ;    Load configuration registers for fmfunke.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_fmfunke:
                                        (0099)  LoadConfig_fmfunke:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
050F: 10       PUSH  X                  (0102) 	push	x
0510: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
0512: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
0514: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
0515: 50 02    MOV   A,0x2              (0107)     mov     A, >LoadConfigTBL_fmfunke_Bank0
0517: 57 30    MOV   X,0x30             (0108)     mov     X, <LoadConfigTBL_fmfunke_Bank0
0519: 7C 05 2A LCALL 0x052A             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
051C: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
051E: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
051F: 50 02    MOV   A,0x2              (0114)     mov     A, >LoadConfigTBL_fmfunke_Bank1
0521: 57 C3    MOV   X,0xC3             (0115)     mov     X, <LoadConfigTBL_fmfunke_Bank1
0523: 7C 05 2A LCALL 0x052A             (0116)     lcall   LoadConfig              ; Load the bank 1 values
0526: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
0528: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
0529: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
052A: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
052C: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
052D: 08       PUSH  A                  (0146)     push    A
052E: 4F       MOV   X,SP               (0147)     mov     X, SP
052F: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
0532: D0 04    JNC   0x0537             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0534: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
0537: 18       POP   A                  (0152)     pop     A
0538: 20       POP   X                  (0153)     pop     X
0539: 70 EF    AND   F,0xEF             
053B: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
053E: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
053F: 08       PUSH  A                  (0159)     push    A
0540: 28       ROMX                     (0160)     romx                            ; Load register address from table
0541: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
0543: A0 1F    JZ    0x0563             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
0545: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
0546: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
0549: A0 03    JZ    0x054D             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
054B: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
054D: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
054F: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
0550: 20       POP   X                  (0170)     pop     X
0551: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
0552: 09 00    ADC   A,0x0              (0172)     adc     A, 0
0554: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
0555: 08       PUSH  A                  (0174)     push    A
0556: 28       ROMX                     (0175)     romx                            ; load config data from the table
0557: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
0558: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
055A: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
055C: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
055D: 20       POP   X                  (0180)     pop     X
055E: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
055F: 09 00    ADC   A,0x0              (0182)     adc     A, 0
0561: 8F D7    JMP   0x0539             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
0563: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
0565: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_1_Data_SHADE:
                                        (0195) Port_1_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\uart_2int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UART_2INT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART_2.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_2_TX_ISR
                                        (0022) export  _UART_2_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_2_RXBUF_ENABLE)
                                        (0025) export  UART_2_aRxBuffer
                                        (0026) export _UART_2_aRxBuffer
                                        (0027) export  UART_2_bRxCnt
                                        (0028) export _UART_2_bRxCnt
                                        (0029) export  UART_2_fStatus
                                        (0030) export _UART_2_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_2_RXBUF_ENABLE)
                                        (0040)  UART_2_fStatus:
                                        (0041) _UART_2_fStatus:      BLK  1
                                        (0042)  UART_2_bRxCnt:
                                        (0043) _UART_2_bRxCnt:       BLK  1
                                        (0044) AREA UART_2_RAM (RAM, REL, CON)
                                        (0045)  UART_2_aRxBuffer:
                                        (0046) _UART_2_aRxBuffer:    BLK UART_2_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_2_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART_2.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_2_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0566: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_2_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART_2.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_2_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_2_RXBUF_ENABLE)
0567: 08       PUSH  A                  (0180)    push A
0568: 10       PUSH  X                  (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
0569: 58 0C    MOV   X,[0xC]            (0187)    mov  X,[UART_2_bRxCnt]                                  ; Load X with byte counter
056B: 5D 3F    MOV   A,REG[0x3F]        (0188)    mov  A,REG[UART_2_RX_CONTROL_REG]                       ; Read the control register
056D: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
056E: 21 08    AND   A,0x8              (0191)    and  A,UART_2_RX_REG_FULL                               ; Did really really get an IRQ
0570: B0 04    JNZ   0x0575             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
0572: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
0573: 80 40    JMP   0x05B4             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
0575: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
0576: 21 E0    AND   A,0xE0             (0200)    and  A,UART_2_RX_ERROR
0578: A0 12    JZ    0x058B             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
057A: 2C 0B    OR    [0xB],A            (0203)    or   [UART_2_fStatus],A                                 ; Set error flags (parity,framing,overrun) bits
057C: 49 3E 00 TST   REG[0x3E],0x0      (0204)    tst  REG[UART_2_RX_BUFFER_REG], 0x00                    ; Read the data buffer to clear it.
057F: 21 20    AND   A,0x20             (0205)    and  A,UART_2_RX_FRAMING_ERROR                          ; Check for framing error special case
0581: A0 32    JZ    0x05B4             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
0583: 41 3F FE AND   REG[0x3F],0xFE     (0210)    and   REG[UART_2_RX_CONTROL_REG], ~UART_2_RX_ENABLE     ; Disable RX
0586: 43 3F 01 OR    REG[0x3F],0x1      (0211)    or    REG[UART_2_RX_CONTROL_REG],  UART_2_RX_ENABLE     ; Enable RX
0589: 80 2A    JMP   0x05B4             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
058B: 5D 3E    MOV   A,REG[0x3E]        (0216)    mov  A,REG[UART_2_RX_BUFFER_REG ]                       ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
058D: 47 0B 01 TST   [0xB],0x1          (0219)    tst  [UART_2_fStatus],UART_2_RX_BUF_CMDTERM             ; Check for buffer full
0590: B0 23    JNZ   0x05B4             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
0592: 39 0D    CMP   A,0xD              (0222)    cmp  A,UART_2_CMD_TERM                                  ; Check for End of command
0594: B0 09    JNZ   0x059E             (0223)    jnz  .UARTRX_CHK_BACKSPACE
0596: 2E 0B 01 OR    [0xB],0x1          (0224)    or   [UART_2_fStatus],UART_2_RX_BUF_CMDTERM             ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_2_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0599: 56 50 00 MOV   [X+80],0x0         (0230)    mov  [X + UART_2_aRxBuffer],00h                         ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
059C: 80 17    JMP   0x05B4             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_2_BACKSPACE_ENABLE)                                ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_2_BACKSPACE_ENABLE                          ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_2_bRxCnt],00h                                ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_2_bRxCnt]                                    ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_2_RX_IGNORE_BELOW)                                 ; Ignore charaters below this value
059E: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_2_RX_IGNORE_BELOW                           ; If ignore char is set to 0x00, do not
05A0: C0 13    JC    0x05B4             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_2_aRxBuffer                       ;   using idexed address mode
05A2: 3C 0C 0F CMP   [0xC],0xF          (0253)    cmp  [UART_2_bRxCnt],(UART_2_RX_BUFFER_SIZE - 1)
05A5: C0 09    JC    0x05AF             (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
05A7: 56 50 00 MOV   [X+80],0x0         (0256)    mov  [X + UART_2_aRxBuffer],00h                         ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
05AA: 2E 0B 10 OR    [0xB],0x10         (0258)    or   [UART_2_fStatus],UART_2_RX_BUF_OVERRUN             ; Set error flags (parity,framing,overrun) bits
05AD: 80 06    JMP   0x05B4             (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
05AF: 54 50    MOV   [X+80],A           (0264)    mov  [X+UART_2_aRxBuffer],A                             ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
05B1: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
05B2: 5A 0C    MOV   [0xC],X            (0267)    mov  [UART_2_bRxCnt],X                                  ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
05B4: 20       POP   X                  (0275)    pop  X
05B5: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_2_RX_ISR_END:
05B6: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UART_2INT.asm
                                        (0284) 
FILE: lib\uart_2.asm                    (0001) ;;*****************************************************************************
05B7: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
05BA: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0003) ;;  Filename:   UART_2.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART_2.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_2_SetTxIntMode
                                        (0041) export _UART_2_SetTxIntMode
                                        (0042) export  UART_2_EnableInt
                                        (0043) export _UART_2_EnableInt
                                        (0044) export  UART_2_DisableInt
                                        (0045) export _UART_2_DisableInt
                                        (0046) 
                                        (0047) export  UART_2_Start
                                        (0048) export _UART_2_Start
                                        (0049) export  UART_2_Stop
                                        (0050) export _UART_2_Stop
                                        (0051) export  UART_2_SendData
                                        (0052) export _UART_2_SendData
                                        (0053) export  UART_2_bReadTxStatus
                                        (0054) export _UART_2_bReadTxStatus
                                        (0055) export  UART_2_bReadRxData
                                        (0056) export _UART_2_bReadRxData
                                        (0057) export  UART_2_bReadRxStatus
                                        (0058) export _UART_2_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_2_IntCntl
                                        (0061) export _UART_2_IntCntl
                                        (0062) 
                                        (0063) export  UART_2_TxIntMode
                                        (0064) export _UART_2_TxIntMode
                                        (0065) 
                                        (0066) export  UART_2_PutSHexByte
                                        (0067) export _UART_2_PutSHexByte
                                        (0068) export  UART_2_PutSHexInt
                                        (0069) export _UART_2_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_2_CPutString
                                        (0072) export _UART_2_CPutString
                                        (0073) export  UART_2_PutString
                                        (0074) export _UART_2_PutString
                                        (0075) export  UART_2_PutChar
                                        (0076) export _UART_2_PutChar
                                        (0077) export  UART_2_Write
                                        (0078) export _UART_2_Write
                                        (0079) export  UART_2_CWrite
                                        (0080) export _UART_2_CWrite
                                        (0081) 
                                        (0082) export  UART_2_cGetChar
                                        (0083) export _UART_2_cGetChar
                                        (0084) export  UART_2_cReadChar
                                        (0085) export _UART_2_cReadChar
                                        (0086) export  UART_2_iReadChar
                                        (0087) export _UART_2_iReadChar
                                        (0088) export  UART_2_PutCRLF
                                        (0089) export _UART_2_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_2_RXBUF_ENABLE)
                                        (0092) export  UART_2_CmdReset
                                        (0093) export _UART_2_CmdReset
                                        (0094) export  UART_2_bCmdCheck
                                        (0095) export _UART_2_bCmdCheck
                                        (0096) export  UART_2_bCmdLength
                                        (0097) export _UART_2_bCmdLength
                                        (0098) export  UART_2_bErrCheck
                                        (0099) export _UART_2_bErrCheck
                                        (0100) 
                                        (0101) export  UART_2_szGetParam
                                        (0102) export _UART_2_szGetParam
                                        (0103) export  UART_2_szGetRestOfParams
                                        (0104) export _UART_2_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_2_ReadTxStatus
                                        (0114) export _bUART_2_ReadTxStatus
                                        (0115) export  bUART_2_ReadRxData
                                        (0116) export _bUART_2_ReadRxData
                                        (0117) export  bUART_2_ReadRxStatus
                                        (0118) export _bUART_2_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_2_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_2_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_2_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_2_EnableInt:
                                        (0177) _UART_2_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_2_TX_INT_REG, UART_2_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_2_RX_INT_REG, UART_2_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
05BD: 7F       RET                      (0182)    ret
05BE: 41 E1 BF AND   REG[0xE1],0xBF     
05C1: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_2_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_2_DisableInt:
                                        (0209) _UART_2_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_2_TX_INT_REG, UART_2_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_2_RX_INT_REG, UART_2_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
05C4: 7F       RET                      (0214)    ret
05C5: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_2_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_2_SetTxIntMode:
                                        (0245) _UART_2_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
05C7: 21 01    AND   A,0x1              (0248)    and   A, UART_2_INT_MODE_TX_COMPLETE
05C9: A0 07    JZ    0x05D1             (0249)    jz    .SetModeRegEmpty
05CB: 43 38 10 OR    REG[0x38],0x10     (0250)    or    REG[UART_2_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
05CE: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
05D0: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
05D1: 41 38 EF AND   REG[0x38],0xEF     (0256)    and   REG[UART_2_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
05D4: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
05D6: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_2_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_2_Start:
                                        (0286) _UART_2_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
05D7: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
05D9: 60 3B    MOV   REG[0x3B],A        (0291)    mov   REG[UART_2_TX_CONTROL_REG], A
05DB: 60 3F    MOV   REG[0x3F],A        (0292)    mov   REG[UART_2_RX_CONTROL_REG], A
                                        (0293) IF ( UART_2_RXBUF_ENABLE )
05DD: 91 0E    CALL  _UART_2_CmdReset   (0294)    call  _UART_2_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
05DF: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_2_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_2_Stop:
                                        (0323) _UART_2_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
05E0: 41 3B FE AND   REG[0x3B],0xFE     (0325)    and   REG[UART_2_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
05E3: 41 3F FE AND   REG[0x3F],0xFE     (0326)    and   REG[UART_2_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
05E6: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_2_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_2_SendData:
                                        (0354) _UART_2_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
05E7: 60 39    MOV   REG[0x39],A        (0356)    mov REG[UART_2_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
05E9: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_2_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_2_bReadTxStatus:
                                        (0385) _UART_2_bReadTxStatus:
                                        (0386)  bUART_2_ReadTxStatus:                           ; For backwards compatibility only
                                        (0387) _bUART_2_ReadTxStatus:                           ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
05EA: 5D 3B    MOV   A,REG[0x3B]        (0389)    mov A,  REG[UART_2_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
05EC: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_2_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_2_bReadRxData:
                                        (0418) _UART_2_bReadRxData:
                                        (0419)  bUART_2_ReadRxData:                             ; For backwards compatibility only
                                        (0420) _bUART_2_ReadRxData:                             ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
05ED: 5D 3E    MOV   A,REG[0x3E]        (0422)    mov A, REG[UART_2_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
05EF: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_2_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_2_bReadRxStatus:
                                        (0452) _UART_2_bReadRxStatus:
                                        (0453)  bUART_2_ReadRxStatus:                           ; For backwards compatibility only
                                        (0454) _bUART_2_ReadRxStatus:                           ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
05F0: 5D 3F    MOV   A,REG[0x3F]        (0456)    mov A,  REG[UART_2_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
05F2: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_2_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_2_TxIntMode:
                                        (0486) _UART_2_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
05F3: 21 01    AND   A,0x1              (0489)    and  A,UART_2_INT_MODE_TX_COMPLETE
05F5: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
05F7: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_2_INT_MODE_TX_COMPLETE
05F9: A0 06    JZ    0x0600             (0492)    jz   .SetTxCmpMode
                                        (0493) 
05FB: 41 38 EF AND   REG[0x38],0xEF     (0494)    and  reg[UART_2_TX_FUNC_REG],0xEF             ; Set Interrupt on Tx_Reg_Empty
05FE: 80 04    JMP   0x0603             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0600: 43 38 10 OR    REG[0x38],0x10     (0498)    or   reg[UART_2_TX_FUNC_REG],0x10
0603: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0605: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_2_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_2_IntCntl:
                                        (0533) _UART_2_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0606: 08       PUSH  A                  (0536)    push A
0607: 21 01    AND   A,0x1              (0537)    and  A,UART_2_ENABLE_RX_INT
0609: A0 06    JZ    0x0610             (0538)    jz   .DisRxInt
060B: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_2_RX_INT_REG, UART_2_RX_INT_MASK
060E: 80 04    JMP   0x0613             (0541)    jmp  .CheckTxInt
0610: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_2_RX_INT_REG, UART_2_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0613: 18       POP   A                  (0547)    pop  A
0614: 21 02    AND   A,0x2              (0548)    and  A,UART_2_ENABLE_TX_INT
0616: A0 06    JZ    0x061D             (0549)    jz   .DisTxInt
0618: 43 E1 40 OR    REG[0xE1],0x40     
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_2_TX_INT_REG, UART_2_TX_INT_MASK
061B: 80 04    JMP   0x0620             (0552)    jmp  .End_IntCntl
061D: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_2_TX_INT_REG, UART_2_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0620: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_2_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_2_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_2_PutSHexByte:
                                        (0599) _UART_2_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0631: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0632: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0633: 67       ASR   A                  (0603)    asr   A
0634: 67       ASR   A                  (0604)    asr   A
0635: 67       ASR   A                  (0605)    asr   A
0636: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0638: FF E7    INDEX 0x0621             (0607)    index UART_2_HEX_STR                ; Get Hex value
063A: 90 0F    CALL  _UART_2_PutChar    (0608)    call  UART_2_PutChar                ; Write data to screen
063C: 18       POP   A                  (0609)    pop   A                             ; Restore value
063D: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
063F: FF E0    INDEX 0x0621             (0611)    index UART_2_HEX_STR                ; Get Hex value
0641: 90 08    CALL  _UART_2_PutChar    (0612)    call  UART_2_PutChar                ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0643: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_2_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_2_PutSHexInt:
                                        (0643) _UART_2_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0644: 4B       SWAP  A,X                (0645)    swap  A,X
0645: 9F EA    CALL  _UART_2_PutSHexByte(0646)    call  UART_2_PutSHexByte            ; Print MSB
0647: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0648: 9F E7    CALL  _UART_2_PutSHexByte(0648)    call  UART_2_PutSHexByte            ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
064A: 7F       RET                      (0650)    ret
064B: 49 3B 10 TST   REG[0x3B],0x10     
064E: AF FC    JZ    _UART_2_PutChar    
0650: 60 39    MOV   REG[0x39],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_2_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_2_TX_CONTROL_REG], UART_2_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_2_TX_BUFFER_REG], @Source        ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_2_PutChar:
                                        (0684) _UART_2_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0652: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_2_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_2_cGetChar:
                                        (0718) _UART_2_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0653: 49 3F 08 TST   REG[0x3F],0x8      (0720)    tst REG[UART_2_RX_CONTROL_REG],UART_2_RX_REG_FULL    ; Check if a character is ready
0656: AF FC    JZ    _UART_2_cGetChar   (0721)    jz  UART_2_cGetChar                              ; If not loop
0658: 5D 3E    MOV   A,REG[0x3E]        (0722)    mov A, REG[UART_2_RX_BUFFER_REG]                 ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
065A: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_2_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_2_cReadChar:
                                        (0753) _UART_2_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
065B: 5D 3F    MOV   A,REG[0x3F]        (0755)    mov  A,REG[UART_2_RX_CONTROL_REG]                       ; Get Status of RX
065D: 08       PUSH  A                  (0756)    push A
065E: 21 08    AND   A,0x8              (0757)    and  A,UART_2_RX_COMPLETE                               ; Check if a character is ready
0660: B0 04    JNZ   0x0665             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0662: 18       POP   A                  (0759)    pop  A
0663: 80 0B    JMP   0x066F             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0665: 5D 3E    MOV   A,REG[0x3E]        (0763)    mov  A,REG[UART_2_RX_BUFFER_REG ]          
0667: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0668: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0669: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_2_RX_PARITY_ERROR | UART_2_RX_FRAMING_ERROR)
066B: B0 03    JNZ   0x066F             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
066D: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
066E: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
066F: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_2_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0671: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_2_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_2_iReadChar:
                                        (0814) _UART_2_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0672: 5D 3F    MOV   A,REG[0x3F]        (0816)    mov  A,REG[UART_2_RX_CONTROL_REG]                       ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0674: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_2_RX_ERROR|UART_2_RX_REG_FULL)
0676: 08       PUSH  A                  (0819)    push A
0677: 21 08    AND   A,0x8              (0820)    and  A,UART_2_RX_COMPLETE                               ; Check if a character is ready
0679: B0 07    JNZ   0x0681             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
067B: 18       POP   A                  (0822)    pop  A
067C: 29 01    OR    A,0x1              (0823)    or   A,UART_2_RX_NO_DATA                                ; Add no data flag
067E: 4B       SWAP  A,X                (0824)    swap A,X
067F: 80 07    JMP   0x0687             (0825)    jmp  End_UART_2_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0681: 18       POP   A                  (0828)    pop  A
0682: 21 E0    AND   A,0xE0             (0829)    and  A,UART_2_RX_ERROR
0684: 4B       SWAP  A,X                (0830)    swap A,X
0685: 5D 3E    MOV   A,REG[0x3E]        (0831)    mov  A,REG[UART_2_RX_BUFFER_REG ]                       ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_2_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0687: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_2_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_2_PutString:
                                        (0867) _UART_2_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0688: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
068A: A0 06    JZ    0x0691             (0872)    jz    End_PutString                           ; Check for end of string
068C: 9F BD    CALL  _UART_2_PutChar    (0873)    call  UART_2_PutChar                          ; Send character to Tx port
068E: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
068F: 8F F8    JMP   _UART_2_PutString  (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0691: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_2_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_2_Write:
                                        (0914) _UART_2_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0692: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0693: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0695: A0 13    JZ    0x06A9             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0697: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0699: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
069B: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
069D: 49 3B 10 TST   REG[0x3B],0x10     
06A0: AF FC    JZ    0x069D             
06A2: 60 39    MOV   REG[0x39],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
06A4: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
06A5: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
06A7: 8F EB    JMP   0x0693             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
06A9: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_2_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_2_CWrite:
                                        (0975) _UART_2_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
06AA: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
06AB: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
06AE: B0 06    JNZ   0x06B5             (0980)    jnz   .CW_WRITEIT
06B0: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
06B3: A0 1D    JZ    0x06D1             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
06B5: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
06B6: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
06B8: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
06BA: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
06BB: 49 3B 10 TST   REG[0x3B],0x10     
06BE: AF FC    JZ    0x06BB             
06C0: 60 39    MOV   REG[0x39],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
06C2: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
06C3: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
06C6: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
06C9: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
06CC: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
06CF: 8F DB    JMP   0x06AB             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
06D1: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_2_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_2_CPutString:
                                        (1027) _UART_2_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
06D2: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
06D3: 10       PUSH  X                  (1030)    push  X
06D4: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
06D5: A0 0B    JZ    0x06E1             (1032)    jz    .End_CPutString
06D7: 9F 72    CALL  _UART_2_PutChar    (1033)    call  UART_2_PutChar                          ; Print character
06D9: 20       POP   X                  (1034)    pop   X
06DA: 18       POP   A                  (1035)    pop   A
06DB: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
06DC: DF F5    JNC   _UART_2_CPutString (1037)    jnc   UART_2_CPutString                       ; Check for carry
06DE: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
06DF: 8F F2    JMP   _UART_2_CPutString (1039)    jmp   UART_2_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
06E1: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
06E3: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_2_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_2_PutCRLF:
                                        (1071) _UART_2_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
06E4: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
06E6: 9F 63    CALL  _UART_2_PutChar    (1074)    call UART_2_PutChar
06E8: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
06EA: 9F 5F    CALL  _UART_2_PutChar    (1076)    call UART_2_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
06EC: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_2_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_2_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_2_CmdReset:
                                        (1119) _UART_2_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_2_aRxBuffer
06ED: 55 50 00 MOV   [filter+16],0x0    (1122)    mov [UART_2_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_2_bRxCnt
06F0: 55 0C 00 MOV   [0xC],0x0          (1124)    mov [UART_2_bRxCnt], 0x00
06F3: 26 0B 00 AND   [0xB],0x0          (1125)    and [UART_2_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
06F6: 55 60 00 MOV   [filter+32],0x0    (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
06F9: 7F       RET                      (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_2_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_2_bCmdCheck:
                                        (1162) _UART_2_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_2_fStatus
06FA: 51 0B    MOV   A,[0xB]            (1165)    mov A,  [UART_2_fStatus]
06FC: 21 01    AND   A,0x1              (1166)    and A, UART_2_RX_BUF_CMDTERM                  ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
06FE: 7F       RET                      (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_2_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_2_bErrCheck:
                                        (1206) _UART_2_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_2_fStatus
06FF: 51 0B    MOV   A,[0xB]            (1209)    mov A,  [UART_2_fStatus]
0701: 21 F0    AND   A,0xF0             (1210)    and A, UART_2_RX_BUF_ERROR                    ; Mask off Error status
0703: 26 0B 0F AND   [0xB],0xF          (1211)    and [UART_2_fStatus], ~UART_2_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
0706: 7F       RET                      (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_2_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_2_bCmdLength:
                                        (1241) _UART_2_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_2_bRxCnt
0707: 51 0C    MOV   A,[0xC]            (1244)    mov A,  [UART_2_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
0709: 7F       RET                      (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_2_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART_2 Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_2_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_2_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_2_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_2_szGetParam:
                                        (1299) _UART_2_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
070A: 50 50    MOV   A,0x50             (1304)    mov   A, <UART_2_aRxBuffer               ; Get address to receive buffer
070C: 02 60    ADD   A,[filter+32]      (1305)    add   A, [ptrParam]                      ; Add string offset
070E: 5C       MOV   X,A                (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_2_aRxBuffer
070F: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
0711: B0 04    JNZ   0x0716             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
0713: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
0714: 80 33    JMP   0x0748             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
0716: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_2_DELIMITER                ; Do we have a delimiter?
0718: B0 11    JNZ   0x072A             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
071A: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
071B: 76 60    INC   [filter+32]        (1318)    inc   [ptrParam]                         ;          the stored pointer.
071D: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
071F: 3C 60 0F CMP   [filter+32],0xF    (1320)    cmp   [ptrParam], (UART_2_RX_BUFFER_SIZE -1)   ; End of buffer?
0722: BF F3    JNZ   0x0716             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
0724: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
0725: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
0728: 80 1F    JMP   0x0748             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
072A: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
072B: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
072C: 76 60    INC   [filter+32]        (1334)    inc   [ptrParam]
072E: 3C 60 0F CMP   [filter+32],0xF    (1335)    cmp   [ptrParam], (UART_2_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0731: AF F3    JZ    0x0725             (1336)    jz    .TerminateString
0733: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
0735: A0 12    JZ    0x0748             (1338)    jz    .End_GetNextParam
0737: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_2_DELIMITER                ; Check if we have a delimiter
0739: BF F1    JNZ   0x072B             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
073B: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
073E: 76 60    INC   [filter+32]        (1342)    inc   [ptrParam]
0740: 3C 60 0F CMP   [filter+32],0xF    (1343)    cmp   [ptrParam], (UART_2_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0743: B0 04    JNZ   0x0748             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
0745: 55 60 0F MOV   [filter+32],0xF    (1345)    mov   [ptrParam], (UART_2_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
0748: 20       POP   X                  (1348)    pop   X
0749: 10       PUSH  X                  (1349)    push  X
074A: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
074D: B0 06    JNZ   0x0754             (1351)    jnz   .NotNullString
074F: 20       POP   X                  (1352)    pop   X
0750: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
0752: 5B       MOV   A,X                (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
0753: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
0754: 20       POP   X                  (1360)    pop  X
0755: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_2_aRxBuffer                ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
0757: 7F       RET                      (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_2_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_2_szGetRestOfParams:
                                        (1393) _UART_2_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
0758: 50 50    MOV   A,0x50             (1396)    mov  A, <UART_2_aRxBuffer                ; Get address to receive buffer
075A: 02 60    ADD   A,[filter+32]      (1397)    add  A, [ptrParam]                       ; Add string offset
075C: 5C       MOV   X,A                (1398)    mov  X,A
075D: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_2_aRxBuffer                 ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
075F: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART_2.asm
FILE: lib\uart_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UART_1INT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_1_TX_ISR
                                        (0022) export  _UART_1_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_1_RXBUF_ENABLE)
                                        (0025) export  UART_1_aRxBuffer
                                        (0026) export _UART_1_aRxBuffer
                                        (0027) export  UART_1_bRxCnt
                                        (0028) export _UART_1_bRxCnt
                                        (0029) export  UART_1_fStatus
                                        (0030) export _UART_1_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_1_RXBUF_ENABLE)
                                        (0040)  UART_1_fStatus:
                                        (0041) _UART_1_fStatus:      BLK  1
                                        (0042)  UART_1_bRxCnt:
                                        (0043) _UART_1_bRxCnt:       BLK  1
                                        (0044) AREA UART_1_RAM (RAM, REL, CON)
                                        (0045)  UART_1_aRxBuffer:
                                        (0046) _UART_1_aRxBuffer:    BLK UART_1_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_1_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART_1.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_1_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0760: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_1_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART_1.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_1_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_1_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_1_bRxCnt]                                  ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_1_RX_REG_FULL                               ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_1_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_1_fStatus],A                                 ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_1_RX_BUFFER_REG], 0x00                    ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_1_RX_FRAMING_ERROR                          ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_1_RX_CONTROL_REG], ~UART_1_RX_ENABLE     ; Disable RX
                                        (0211)    or    REG[UART_1_RX_CONTROL_REG],  UART_1_RX_ENABLE     ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_1_RX_BUFFER_REG ]                       ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_1_fStatus],UART_1_RX_BUF_CMDTERM             ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_1_CMD_TERM                                  ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_1_fStatus],UART_1_RX_BUF_CMDTERM             ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_1_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_1_aRxBuffer],00h                         ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_1_BACKSPACE_ENABLE)                                ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_1_BACKSPACE_ENABLE                          ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_1_bRxCnt],00h                                ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_1_bRxCnt]                                    ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_1_RX_IGNORE_BELOW)                                 ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_1_RX_IGNORE_BELOW                           ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_1_aRxBuffer                       ;   using idexed address mode
                                        (0253)    cmp  [UART_1_bRxCnt],(UART_1_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_1_aRxBuffer],00h                         ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_1_fStatus],UART_1_RX_BUF_OVERRUN             ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_1_aRxBuffer],A                             ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_1_bRxCnt],X                                  ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_1_RX_ISR_END:
0761: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UART_1INT.asm
                                        (0284) 
FILE: lib\uart_1.asm                    (0001) ;;*****************************************************************************
0762: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
0765: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART_1.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART_1.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_1_SetTxIntMode
                                        (0041) export _UART_1_SetTxIntMode
                                        (0042) export  UART_1_EnableInt
                                        (0043) export _UART_1_EnableInt
                                        (0044) export  UART_1_DisableInt
                                        (0045) export _UART_1_DisableInt
                                        (0046) 
                                        (0047) export  UART_1_Start
                                        (0048) export _UART_1_Start
                                        (0049) export  UART_1_Stop
                                        (0050) export _UART_1_Stop
                                        (0051) export  UART_1_SendData
                                        (0052) export _UART_1_SendData
                                        (0053) export  UART_1_bReadTxStatus
                                        (0054) export _UART_1_bReadTxStatus
                                        (0055) export  UART_1_bReadRxData
                                        (0056) export _UART_1_bReadRxData
                                        (0057) export  UART_1_bReadRxStatus
                                        (0058) export _UART_1_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_1_IntCntl
                                        (0061) export _UART_1_IntCntl
                                        (0062) 
                                        (0063) export  UART_1_TxIntMode
                                        (0064) export _UART_1_TxIntMode
                                        (0065) 
                                        (0066) export  UART_1_PutSHexByte
                                        (0067) export _UART_1_PutSHexByte
                                        (0068) export  UART_1_PutSHexInt
                                        (0069) export _UART_1_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_1_CPutString
                                        (0072) export _UART_1_CPutString
                                        (0073) export  UART_1_PutString
                                        (0074) export _UART_1_PutString
                                        (0075) export  UART_1_PutChar
                                        (0076) export _UART_1_PutChar
                                        (0077) export  UART_1_Write
                                        (0078) export _UART_1_Write
                                        (0079) export  UART_1_CWrite
                                        (0080) export _UART_1_CWrite
                                        (0081) 
                                        (0082) export  UART_1_cGetChar
                                        (0083) export _UART_1_cGetChar
                                        (0084) export  UART_1_cReadChar
                                        (0085) export _UART_1_cReadChar
                                        (0086) export  UART_1_iReadChar
                                        (0087) export _UART_1_iReadChar
                                        (0088) export  UART_1_PutCRLF
                                        (0089) export _UART_1_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_1_RXBUF_ENABLE)
                                        (0092) export  UART_1_CmdReset
                                        (0093) export _UART_1_CmdReset
                                        (0094) export  UART_1_bCmdCheck
                                        (0095) export _UART_1_bCmdCheck
                                        (0096) export  UART_1_bCmdLength
                                        (0097) export _UART_1_bCmdLength
                                        (0098) export  UART_1_bErrCheck
                                        (0099) export _UART_1_bErrCheck
                                        (0100) 
                                        (0101) export  UART_1_szGetParam
                                        (0102) export _UART_1_szGetParam
                                        (0103) export  UART_1_szGetRestOfParams
                                        (0104) export _UART_1_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_1_ReadTxStatus
                                        (0114) export _bUART_1_ReadTxStatus
                                        (0115) export  bUART_1_ReadRxData
                                        (0116) export _bUART_1_ReadRxData
                                        (0117) export  bUART_1_ReadRxStatus
                                        (0118) export _bUART_1_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_1_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_1_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_1_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_1_EnableInt:
                                        (0177) _UART_1_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0768: 7F       RET                      (0182)    ret
0769: 41 E1 FB AND   REG[0xE1],0xFB     
076C: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_1_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_1_DisableInt:
                                        (0209) _UART_1_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
076F: 7F       RET                      (0214)    ret
0770: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_1_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_1_SetTxIntMode:
                                        (0245) _UART_1_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
0772: 21 01    AND   A,0x1              (0248)    and   A, UART_1_INT_MODE_TX_COMPLETE
0774: A0 07    JZ    0x077C             (0249)    jz    .SetModeRegEmpty
0776: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_1_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0779: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
077B: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
077C: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_1_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
077F: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0781: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_1_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_1_Start:
                                        (0286) _UART_1_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0782: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0784: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_1_TX_CONTROL_REG], A
0786: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_1_RX_CONTROL_REG], A
                                        (0293) IF ( UART_1_RXBUF_ENABLE )
                                        (0294)    call  _UART_1_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0788: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_1_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_1_Stop:
                                        (0323) _UART_1_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0789: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_1_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
078C: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_1_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
078F: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_1_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_1_SendData:
                                        (0354) _UART_1_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0790: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_1_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0792: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_1_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_1_bReadTxStatus:
                                        (0385) _UART_1_bReadTxStatus:
                                        (0386)  bUART_1_ReadTxStatus:                           ; For backwards compatibility only
                                        (0387) _bUART_1_ReadTxStatus:                           ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0793: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_1_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0795: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_1_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_1_bReadRxData:
                                        (0418) _UART_1_bReadRxData:
                                        (0419)  bUART_1_ReadRxData:                             ; For backwards compatibility only
                                        (0420) _bUART_1_ReadRxData:                             ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0796: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_1_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0798: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_1_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_1_bReadRxStatus:
                                        (0452) _UART_1_bReadRxStatus:
                                        (0453)  bUART_1_ReadRxStatus:                           ; For backwards compatibility only
                                        (0454) _bUART_1_ReadRxStatus:                           ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0799: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_1_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
079B: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_1_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_1_TxIntMode:
                                        (0486) _UART_1_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
079C: 21 01    AND   A,0x1              (0489)    and  A,UART_1_INT_MODE_TX_COMPLETE
079E: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
07A0: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_1_INT_MODE_TX_COMPLETE
07A2: A0 06    JZ    0x07A9             (0492)    jz   .SetTxCmpMode
                                        (0493) 
07A4: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_1_TX_FUNC_REG],0xEF             ; Set Interrupt on Tx_Reg_Empty
07A7: 80 04    JMP   0x07AC             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
07A9: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_1_TX_FUNC_REG],0x10
07AC: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
07AE: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_1_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_1_IntCntl:
                                        (0533) _UART_1_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
07AF: 08       PUSH  A                  (0536)    push A
07B0: 21 01    AND   A,0x1              (0537)    and  A,UART_1_ENABLE_RX_INT
07B2: A0 06    JZ    0x07B9             (0538)    jz   .DisRxInt
07B4: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
07B7: 80 04    JMP   0x07BC             (0541)    jmp  .CheckTxInt
07B9: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
07BC: 18       POP   A                  (0547)    pop  A
07BD: 21 02    AND   A,0x2              (0548)    and  A,UART_1_ENABLE_TX_INT
07BF: A0 06    JZ    0x07C6             (0549)    jz   .DisTxInt
07C1: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
07C4: 80 04    JMP   0x07C9             (0552)    jmp  .End_IntCntl
07C6: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
07C9: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_1_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_1_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_1_PutSHexByte:
                                        (0599) _UART_1_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
07DA: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
07DB: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
07DC: 67       ASR   A                  (0603)    asr   A
07DD: 67       ASR   A                  (0604)    asr   A
07DE: 67       ASR   A                  (0605)    asr   A
07DF: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
07E1: FF E7    INDEX 0x07CA             (0607)    index UART_1_HEX_STR                ; Get Hex value
07E3: 90 0F    CALL  _UART_1_PutChar    (0608)    call  UART_1_PutChar                ; Write data to screen
07E5: 18       POP   A                  (0609)    pop   A                             ; Restore value
07E6: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
07E8: FF E0    INDEX 0x07CA             (0611)    index UART_1_HEX_STR                ; Get Hex value
07EA: 90 08    CALL  _UART_1_PutChar    (0612)    call  UART_1_PutChar                ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
07EC: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_1_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_1_PutSHexInt:
                                        (0643) _UART_1_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
07ED: 4B       SWAP  A,X                (0645)    swap  A,X
07EE: 9F EA    CALL  _UART_1_PutSHexByte(0646)    call  UART_1_PutSHexByte            ; Print MSB
07F0: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
07F1: 9F E7    CALL  _UART_1_PutSHexByte(0648)    call  UART_1_PutSHexByte            ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
07F3: 7F       RET                      (0650)    ret
07F4: 49 2B 10 TST   REG[0x2B],0x10     
07F7: AF FC    JZ    _UART_1_PutChar    
07F9: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_1_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_1_TX_CONTROL_REG], UART_1_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_1_TX_BUFFER_REG], @Source        ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_1_PutChar:
                                        (0684) _UART_1_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
07FB: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_1_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_1_cGetChar:
                                        (0718) _UART_1_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
07FC: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_1_RX_CONTROL_REG],UART_1_RX_REG_FULL    ; Check if a character is ready
07FF: AF FC    JZ    _UART_1_cGetChar   (0721)    jz  UART_1_cGetChar                              ; If not loop
0801: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_1_RX_BUFFER_REG]                 ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0803: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_1_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_1_cReadChar:
                                        (0753) _UART_1_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0804: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Get Status of RX
0806: 08       PUSH  A                  (0756)    push A
0807: 21 08    AND   A,0x8              (0757)    and  A,UART_1_RX_COMPLETE                               ; Check if a character is ready
0809: B0 04    JNZ   0x080E             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
080B: 18       POP   A                  (0759)    pop  A
080C: 80 0B    JMP   0x0818             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
080E: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_1_RX_BUFFER_REG ]          
0810: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0811: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0812: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_1_RX_PARITY_ERROR | UART_1_RX_FRAMING_ERROR)
0814: B0 03    JNZ   0x0818             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0816: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0817: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0818: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_1_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
081A: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_1_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_1_iReadChar:
                                        (0814) _UART_1_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
081B: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
081D: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_1_RX_ERROR|UART_1_RX_REG_FULL)
081F: 08       PUSH  A                  (0819)    push A
0820: 21 08    AND   A,0x8              (0820)    and  A,UART_1_RX_COMPLETE                               ; Check if a character is ready
0822: B0 07    JNZ   0x082A             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0824: 18       POP   A                  (0822)    pop  A
0825: 29 01    OR    A,0x1              (0823)    or   A,UART_1_RX_NO_DATA                                ; Add no data flag
0827: 4B       SWAP  A,X                (0824)    swap A,X
0828: 80 07    JMP   0x0830             (0825)    jmp  End_UART_1_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
082A: 18       POP   A                  (0828)    pop  A
082B: 21 E0    AND   A,0xE0             (0829)    and  A,UART_1_RX_ERROR
082D: 4B       SWAP  A,X                (0830)    swap A,X
082E: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_1_RX_BUFFER_REG ]                       ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_1_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0830: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_1_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_1_PutString:
                                        (0867) _UART_1_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0831: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0833: A0 06    JZ    0x083A             (0872)    jz    End_PutString                           ; Check for end of string
0835: 9F BD    CALL  _UART_1_PutChar    (0873)    call  UART_1_PutChar                          ; Send character to Tx port
0837: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0838: 8F F8    JMP   _UART_1_PutString  (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
083A: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_1_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_1_Write:
                                        (0914) _UART_1_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
083B: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
083C: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
083E: A0 13    JZ    0x0852             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0840: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0842: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0844: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0846: 49 2B 10 TST   REG[0x2B],0x10     
0849: AF FC    JZ    0x0846             
084B: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
084D: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
084E: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0850: 8F EB    JMP   0x083C             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0852: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_1_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_1_CWrite:
                                        (0975) _UART_1_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0853: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0854: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0857: B0 06    JNZ   0x085E             (0980)    jnz   .CW_WRITEIT
0859: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
085C: A0 1D    JZ    0x087A             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
085E: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
085F: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0861: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0863: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0864: 49 2B 10 TST   REG[0x2B],0x10     
0867: AF FC    JZ    0x0864             
0869: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
086B: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
086C: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
086F: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0872: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0875: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0878: 8F DB    JMP   0x0854             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
087A: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_1_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_1_CPutString:
                                        (1027) _UART_1_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
087B: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
087C: 10       PUSH  X                  (1030)    push  X
087D: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
087E: A0 0B    JZ    0x088A             (1032)    jz    .End_CPutString
0880: 9F 72    CALL  _UART_1_PutChar    (1033)    call  UART_1_PutChar                          ; Print character
0882: 20       POP   X                  (1034)    pop   X
0883: 18       POP   A                  (1035)    pop   A
0884: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0885: DF F5    JNC   _UART_1_CPutString (1037)    jnc   UART_1_CPutString                       ; Check for carry
0887: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0888: 8F F2    JMP   _UART_1_CPutString (1039)    jmp   UART_1_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
088A: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
088C: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_1_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_1_PutCRLF:
                                        (1071) _UART_1_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
088D: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
088F: 9F 63    CALL  _UART_1_PutChar    (1074)    call UART_1_PutChar
0891: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0893: 9F 5F    CALL  _UART_1_PutChar    (1076)    call UART_1_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0895: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_1_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_1_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_1_CmdReset:
                                        (1119) _UART_1_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_1_aRxBuffer
                                        (1122)    mov [UART_1_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_1_bRxCnt
                                        (1124)    mov [UART_1_bRxCnt], 0x00
                                        (1125)    and [UART_1_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_1_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_1_bCmdCheck:
                                        (1162) _UART_1_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_1_fStatus
                                        (1165)    mov A,  [UART_1_fStatus]
                                        (1166)    and A, UART_1_RX_BUF_CMDTERM                  ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_1_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_1_bErrCheck:
                                        (1206) _UART_1_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_1_fStatus
                                        (1209)    mov A,  [UART_1_fStatus]
                                        (1210)    and A, UART_1_RX_BUF_ERROR                    ; Mask off Error status
                                        (1211)    and [UART_1_fStatus], ~UART_1_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_1_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_1_bCmdLength:
                                        (1241) _UART_1_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_1_bRxCnt
                                        (1244)    mov A,  [UART_1_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_1_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART_1 Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_1_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_1_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_1_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_1_szGetParam:
                                        (1299) _UART_1_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_1_aRxBuffer               ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_1_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_1_DELIMITER                ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_1_DELIMITER                ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_1_aRxBuffer                ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_1_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_1_szGetRestOfParams:
                                        (1393) _UART_1_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_1_aRxBuffer                ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_1_aRxBuffer                 ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART_1.asm
FILE: lib\timer8_3int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8_3INT.asm
                                        (0004) ;;   Version: 2.70, Updated on 2015/3/4 at 22:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer8_3.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer8_3_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer8_3_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer8_3_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
0896: 08       PUSH  A                  (0074)                  push     a
0897: 10       PUSH  X                  (0075) 				 push     x
0898: 7C 08 A8 LCALL _Timer8_3_DisableInt(0076) 				 lcall    Timer8_3_DisableInt
                                        (0077)        ;          mov   a,[bTablePos]
                                        (0078)       ;          cmp   a,16
                                        (0079)      ;            jnz   l1
                                        (0080)     ;             mov   a,0
                                        (0081)    ;              mov   [bTablePos],a   
                                        (0082)   ;l1:            index  SINtable
                                        (0083)                 ; lcall  DAC8_1_WriteBlind
                                        (0084)                 ; inc   [bTablePos]
                                        (0085) 				
089B: 7C 13 A8 LCALL ton_on1            (0086) 				 lcall   ton_on1
089E: 7C 08 A4 LCALL _Timer8_3_EnableInt(0087) 				 lcall   Timer8_3_EnableInt
08A1: 20       POP   X                  (0088) 				 pop    x
08A2: 18       POP   A                  (0089) 				 pop    a
                                        (0090)                  
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert a lcall to a C function below this banner
                                        (0093)    ; and un-comment the lines between these banners
                                        (0094)    ;---------------------------------------------------
                                        (0095)    
                                        (0096)    ;PRESERVE_CPU_CONTEXT
                                        (0097)    ;lcall _My_C_Function
                                        (0098)    ;RESTORE_CPU_CONTEXT
                                        (0099)    
                                        (0100)    ;---------------------------------------------------
                                        (0101)    ; Insert a lcall to a C function above this banner
                                        (0102)    ; and un-comment the lines between these banners
                                        (0103)    ;---------------------------------------------------
                                        (0104)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0105) 
08A3: 7E       RETI                     (0106)    reti
                                        (0107) 
                                        (0108) 
                                        (0109) ; end of file Timer8_3INT.asm
FILE: lib\timer8_3.asm                  (0001) ;;*****************************************************************************
08A4: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8_3.asm
                                        (0004) ;;   Version: 2.70, Updated on 2015/3/4 at 22:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8_3.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8_3_EnableInt
                                        (0030) export _Timer8_3_EnableInt
                                        (0031) export  Timer8_3_DisableInt
                                        (0032) export _Timer8_3_DisableInt
                                        (0033) export  Timer8_3_Start
                                        (0034) export _Timer8_3_Start
                                        (0035) export  Timer8_3_Stop
                                        (0036) export _Timer8_3_Stop
                                        (0037) export  Timer8_3_WritePeriod
                                        (0038) export _Timer8_3_WritePeriod
                                        (0039) export  Timer8_3_WriteCompareValue
                                        (0040) export _Timer8_3_WriteCompareValue
                                        (0041) export  Timer8_3_bReadCompareValue
                                        (0042) export _Timer8_3_bReadCompareValue
                                        (0043) export  Timer8_3_bReadTimer
                                        (0044) export _Timer8_3_bReadTimer
                                        (0045) export  Timer8_3_bReadTimerSaveCV
                                        (0046) export _Timer8_3_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8_3_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8_3_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8_3_ReadTimer         ; deprecated
                                        (0053) export _bTimer8_3_ReadTimer         ; deprecated
                                        (0054) export  bTimer8_3_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8_3_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8_3_ReadCounter       ; obsolete
                                        (0058) export _bTimer8_3_ReadCounter       ; obsolete
                                        (0059) export  bTimer8_3_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8_3_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA fmfunke_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8_3_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8_3_EnableInt:
                                        (0098) _Timer8_3_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8_3_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
08A7: 7F       RET                      (0102)    ret
08A8: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8_3_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8_3_DisableInt:
                                        (0126) _Timer8_3_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8_3_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
08AB: 7F       RET                      (0130)    ret
08AC: 43 33 01 OR    REG[0x33],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8_3_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8_3_Start:
                                        (0154) _Timer8_3_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8_3_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
08AF: 7F       RET                      (0158)    ret
08B0: 41 33 FE AND   REG[0x33],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8_3_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8_3_Stop:
                                        (0182) _Timer8_3_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8_3_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
08B3: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8_3_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8_3_WritePeriod:
                                        (0211) _Timer8_3_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
08B4: 60 31    MOV   REG[0x31],A        (0213)    mov   reg[Timer8_3_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
08B6: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8_3_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8_3_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8_3_WriteCompareValue:
                                        (0241) _Timer8_3_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
08B7: 60 32    MOV   REG[0x32],A        (0243)    mov   reg[Timer8_3_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
08B9: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8_3_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8_3_bReadCompareValue:
                                        (0268) _Timer8_3_bReadCompareValue:
                                        (0269)  bTimer8_3_ReadCompareValue:                     ; this name deprecated
                                        (0270) _bTimer8_3_ReadCompareValue:                     ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
08BA: 5D 32    MOV   A,REG[0x32]        (0272)    mov   A, reg[Timer8_3_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
08BC: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8_3_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8_3_bReadTimerSaveCV:
                                        (0315) _Timer8_3_bReadTimerSaveCV:
                                        (0316)  bTimer8_3_ReadTimerSaveCV:                      ; this name deprecated
                                        (0317) _bTimer8_3_ReadTimerSaveCV:                      ; this name deprecated
                                        (0318)  bTimer8_3_ReadCounter:                          ; this name deprecated
                                        (0319) _bTimer8_3_ReadCounter:                          ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
08BD: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
08BE: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
08C0: 5D 33    MOV   A,REG[0x33]        (0327)    mov   A, reg[Timer8_3_CONTROL_REG]            ; save the Control register
08C2: 08       PUSH  A                  (0328)    push  A
08C3: 5D 32    MOV   A,REG[0x32]        (0329)    mov   A, reg[Timer8_3_COMPARE_REG]            ; save the Compare register
08C5: 08       PUSH  A                  (0330)    push  A
08C6: 5D 30    MOV   A,REG[0x30]        (0331)    mov   A, reg[Timer8_3_COUNTER_REG]            ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
08C8: 5D 32    MOV   A,REG[0x32]        (0333)    mov   A, reg[Timer8_3_COMPARE_REG]            ; Now grab DR2 (DR0) and save
08CA: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
08CC: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
08CE: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
08D1: A0 03    JZ    0x08D5             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
08D3: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
08D5: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
08D7: 70 FE    AND   F,0xFE             
08D9: 41 33 FE AND   REG[0x33],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8_3_Stop_M                               ; Stop the timer
08DC: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
08DD: 60 32    MOV   REG[0x32],A        (0344)    mov   reg[Timer8_3_COMPARE_REG], A
08DF: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
08E0: 60 33    MOV   REG[0x33],A        (0346)    mov   reg[Timer8_3_CONTROL_REG], A
08E2: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
08E3: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8_3_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8_3_bReadTimer:
                                        (0383) _Timer8_3_bReadTimer:
                                        (0384)  bTimer8_3_ReadTimer:                            ; this name deprecated
                                        (0385) _bTimer8_3_ReadTimer:                            ; this name deprecated
                                        (0386)  bTimer8_3_CaptureCounter:                       ; this name deprecated
                                        (0387) _bTimer8_3_CaptureCounter:                       ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
08E4: 5D 30    MOV   A,REG[0x30]        (0390)    mov   A, reg[Timer8_3_COUNTER_REG]            ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
08E6: 5D 32    MOV   A,REG[0x32]        (0392)    mov   A, reg[Timer8_3_COMPARE_REG]            ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
08E8: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8_3.asm
FILE: lib\timer8_2int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8_2INT.asm
                                        (0004) ;;   Version: 2.70, Updated on 2015/3/4 at 22:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer8_2.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer8_2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer8_2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer8_2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
08E9: 08       PUSH  A                  (0074)    							push       a
08EA: 10       PUSH  X                  (0075)                             push       x
08EB: 7C 09 32 LCALL _Timer8_2_DisableInt(0076) 							lcall      Timer8_2_DisableInt
08EE: 5D 04    MOV   A,REG[0x4]         (0077) 							mov        a,reg[PRT1DR]
08F0: 21 01    AND   A,0x1              (0078)                             and        a,1  
08F2: 65 19    ASL   [bit_buffer]       (0079) 			     			asl        [_bit_buffer]
08F4: 04 19    ADD   [bit_buffer],A     (0080)    							add        [_bit_buffer],a
08F6: 76 1A    INC   [bit_counter]      (0081) 							inc        [_bit_counter]
08F8: 3C 1A 08 CMP   [bit_counter],0x8  (0082) 							cmp        [_bit_counter],8
08FB: B0 2C    JNZ   0x0928             (0083) 							jnz        timerisr_ende
08FD: 26 1A 00 AND   [bit_counter],0x0  (0084) 							and        [_bit_counter],0
0900: 3C 19 7E CMP   [bit_buffer],0x7E  (0085) 							cmp        [_bit_buffer],0x7e
0903: A0 06    JZ    0x090A             (0086) 							jz         flagready
0905: 26 19 00 AND   [bit_buffer],0x0   (0087) 							and        [_bit_buffer],0
0908: 80 1F    JMP   0x0928             (0088) 							jmp        timerisr_ende
                                        (0089) 	flagready:              
090A: 5D 04    MOV   A,REG[0x4]         (0090) 	                        mov        a,reg[PRT1DR]
090C: 21 01    AND   A,0x1              (0091)                             and        a,1  
090E: 65 19    ASL   [bit_buffer]       (0092) 			     			asl        [_bit_buffer]
0910: 04 19    ADD   [bit_buffer],A     (0093)    							add        [_bit_buffer],a
0912: 76 1A    INC   [bit_counter]      (0094) 							inc        [_bit_counter]
0914: 3C 1A 08 CMP   [bit_counter],0x8  (0095) 							cmp        [_bit_counter],8
0917: BF F2    JNZ   0x090A             (0096) 							jnz        flagready
0919: 50 01    MOV   A,0x1              (0097) 	                        mov        a,1
091B: 57 00    MOV   X,0x0              (0098) 	                        mov        x,0
091D: 7C 0B A6 LCALL _LCD_1_Position    (0099) 							lcall      LCD_1_Position
0920: 51 19    MOV   A,[bit_buffer]     (0100) 							mov        a,[_bit_buffer]
0922: 7C 0A 57 LCALL _LCD_1_PrHexByte   (0101) 							lcall      LCD_1_PrHexByte
0925: 26 19 00 AND   [bit_buffer],0x0   (0102) 							and        [_bit_buffer],0
0928: 7C 09 2E LCALL _Timer8_2_EnableInt(0103) 	timerisr_ende:			lcall      Timer8_2_EnableInt
092B: 20       POP   X                  (0104) 							pop        x
092C: 18       POP   A                  (0105) 							pop        a
                                        (0106) 							
                                        (0107)    ;---------------------------------------------------
                                        (0108)    ; Insert a lcall to a C function below this banner
                                        (0109)    ; and un-comment the lines between these banners
                                        (0110)    ;---------------------------------------------------
                                        (0111)    
                                        (0112)    ;PRESERVE_CPU_CONTEXT
                                        (0113)    ;lcall _My_C_Function
                                        (0114)    ;RESTORE_CPU_CONTEXT
                                        (0115)    
                                        (0116)    ;---------------------------------------------------
                                        (0117)    ; Insert a lcall to a C function above this banner
                                        (0118)    ; and un-comment the lines between these banners
                                        (0119)    ;---------------------------------------------------
                                        (0120)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0121) 
092D: 7E       RETI                     (0122)    reti
                                        (0123) 
                                        (0124) 
                                        (0125) ; end of file Timer8_2INT.asm
FILE: lib\timer8_2.asm                  (0001) ;;*****************************************************************************
092E: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8_2.asm
                                        (0004) ;;   Version: 2.70, Updated on 2015/3/4 at 22:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8_2.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8_2_EnableInt
                                        (0030) export _Timer8_2_EnableInt
                                        (0031) export  Timer8_2_DisableInt
                                        (0032) export _Timer8_2_DisableInt
                                        (0033) export  Timer8_2_Start
                                        (0034) export _Timer8_2_Start
                                        (0035) export  Timer8_2_Stop
                                        (0036) export _Timer8_2_Stop
                                        (0037) export  Timer8_2_WritePeriod
                                        (0038) export _Timer8_2_WritePeriod
                                        (0039) export  Timer8_2_WriteCompareValue
                                        (0040) export _Timer8_2_WriteCompareValue
                                        (0041) export  Timer8_2_bReadCompareValue
                                        (0042) export _Timer8_2_bReadCompareValue
                                        (0043) export  Timer8_2_bReadTimer
                                        (0044) export _Timer8_2_bReadTimer
                                        (0045) export  Timer8_2_bReadTimerSaveCV
                                        (0046) export _Timer8_2_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8_2_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8_2_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8_2_ReadTimer         ; deprecated
                                        (0053) export _bTimer8_2_ReadTimer         ; deprecated
                                        (0054) export  bTimer8_2_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8_2_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8_2_ReadCounter       ; obsolete
                                        (0058) export _bTimer8_2_ReadCounter       ; obsolete
                                        (0059) export  bTimer8_2_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8_2_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA fmfunke_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8_2_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8_2_EnableInt:
                                        (0098) _Timer8_2_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8_2_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0931: 7F       RET                      (0102)    ret
0932: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8_2_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8_2_DisableInt:
                                        (0126) _Timer8_2_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8_2_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0935: 7F       RET                      (0130)    ret
0936: 43 37 01 OR    REG[0x37],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8_2_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8_2_Start:
                                        (0154) _Timer8_2_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8_2_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0939: 7F       RET                      (0158)    ret
093A: 41 37 FE AND   REG[0x37],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8_2_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8_2_Stop:
                                        (0182) _Timer8_2_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8_2_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
093D: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8_2_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8_2_WritePeriod:
                                        (0211) _Timer8_2_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
093E: 60 35    MOV   REG[0x35],A        (0213)    mov   reg[Timer8_2_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
0940: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8_2_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8_2_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8_2_WriteCompareValue:
                                        (0241) _Timer8_2_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
0941: 60 36    MOV   REG[0x36],A        (0243)    mov   reg[Timer8_2_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
0943: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8_2_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8_2_bReadCompareValue:
                                        (0268) _Timer8_2_bReadCompareValue:
                                        (0269)  bTimer8_2_ReadCompareValue:                     ; this name deprecated
                                        (0270) _bTimer8_2_ReadCompareValue:                     ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
0944: 5D 36    MOV   A,REG[0x36]        (0272)    mov   A, reg[Timer8_2_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
0946: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8_2_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8_2_bReadTimerSaveCV:
                                        (0315) _Timer8_2_bReadTimerSaveCV:
                                        (0316)  bTimer8_2_ReadTimerSaveCV:                      ; this name deprecated
                                        (0317) _bTimer8_2_ReadTimerSaveCV:                      ; this name deprecated
                                        (0318)  bTimer8_2_ReadCounter:                          ; this name deprecated
                                        (0319) _bTimer8_2_ReadCounter:                          ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
0947: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
0948: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
094A: 5D 37    MOV   A,REG[0x37]        (0327)    mov   A, reg[Timer8_2_CONTROL_REG]            ; save the Control register
094C: 08       PUSH  A                  (0328)    push  A
094D: 5D 36    MOV   A,REG[0x36]        (0329)    mov   A, reg[Timer8_2_COMPARE_REG]            ; save the Compare register
094F: 08       PUSH  A                  (0330)    push  A
0950: 5D 34    MOV   A,REG[0x34]        (0331)    mov   A, reg[Timer8_2_COUNTER_REG]            ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
0952: 5D 36    MOV   A,REG[0x36]        (0333)    mov   A, reg[Timer8_2_COMPARE_REG]            ; Now grab DR2 (DR0) and save
0954: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
0956: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
0958: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
095B: A0 03    JZ    0x095F             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
095D: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
095F: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
0961: 70 FE    AND   F,0xFE             
0963: 41 37 FE AND   REG[0x37],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8_2_Stop_M                               ; Stop the timer
0966: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
0967: 60 36    MOV   REG[0x36],A        (0344)    mov   reg[Timer8_2_COMPARE_REG], A
0969: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
096A: 60 37    MOV   REG[0x37],A        (0346)    mov   reg[Timer8_2_CONTROL_REG], A
096C: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
096D: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8_2_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8_2_bReadTimer:
                                        (0383) _Timer8_2_bReadTimer:
                                        (0384)  bTimer8_2_ReadTimer:                            ; this name deprecated
                                        (0385) _bTimer8_2_ReadTimer:                            ; this name deprecated
                                        (0386)  bTimer8_2_CaptureCounter:                       ; this name deprecated
                                        (0387) _bTimer8_2_CaptureCounter:                       ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
096E: 5D 34    MOV   A,REG[0x34]        (0390)    mov   A, reg[Timer8_2_COUNTER_REG]            ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
0970: 5D 36    MOV   A,REG[0x36]        (0392)    mov   A, reg[Timer8_2_COMPARE_REG]            ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
0972: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8_2.asm
FILE: lib\timer8_1int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8_1INT.asm
                                        (0004) ;;   Version: 2.70, Updated on 2015/3/4 at 22:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer8_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0973: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Timer8_1INT.asm
FILE: lib\timer8_1.asm                  (0001) ;;*****************************************************************************
0974: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8_1.asm
                                        (0004) ;;   Version: 2.70, Updated on 2015/3/4 at 22:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8_1_EnableInt
                                        (0030) export _Timer8_1_EnableInt
                                        (0031) export  Timer8_1_DisableInt
                                        (0032) export _Timer8_1_DisableInt
                                        (0033) export  Timer8_1_Start
                                        (0034) export _Timer8_1_Start
                                        (0035) export  Timer8_1_Stop
                                        (0036) export _Timer8_1_Stop
                                        (0037) export  Timer8_1_WritePeriod
                                        (0038) export _Timer8_1_WritePeriod
                                        (0039) export  Timer8_1_WriteCompareValue
                                        (0040) export _Timer8_1_WriteCompareValue
                                        (0041) export  Timer8_1_bReadCompareValue
                                        (0042) export _Timer8_1_bReadCompareValue
                                        (0043) export  Timer8_1_bReadTimer
                                        (0044) export _Timer8_1_bReadTimer
                                        (0045) export  Timer8_1_bReadTimerSaveCV
                                        (0046) export _Timer8_1_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8_1_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8_1_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8_1_ReadTimer         ; deprecated
                                        (0053) export _bTimer8_1_ReadTimer         ; deprecated
                                        (0054) export  bTimer8_1_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8_1_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8_1_ReadCounter       ; obsolete
                                        (0058) export _bTimer8_1_ReadCounter       ; obsolete
                                        (0059) export  bTimer8_1_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8_1_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA fmfunke_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8_1_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8_1_EnableInt:
                                        (0098) _Timer8_1_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8_1_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0977: 7F       RET                      (0102)    ret
0978: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8_1_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8_1_DisableInt:
                                        (0126) _Timer8_1_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8_1_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
097B: 7F       RET                      (0130)    ret
097C: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8_1_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8_1_Start:
                                        (0154) _Timer8_1_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8_1_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
097F: 7F       RET                      (0158)    ret
0980: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8_1_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8_1_Stop:
                                        (0182) _Timer8_1_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8_1_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0983: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8_1_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8_1_WritePeriod:
                                        (0211) _Timer8_1_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0984: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer8_1_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
0986: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8_1_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8_1_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8_1_WriteCompareValue:
                                        (0241) _Timer8_1_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
0987: 60 22    MOV   REG[0x22],A        (0243)    mov   reg[Timer8_1_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
0989: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8_1_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8_1_bReadCompareValue:
                                        (0268) _Timer8_1_bReadCompareValue:
                                        (0269)  bTimer8_1_ReadCompareValue:                     ; this name deprecated
                                        (0270) _bTimer8_1_ReadCompareValue:                     ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
098A: 5D 22    MOV   A,REG[0x22]        (0272)    mov   A, reg[Timer8_1_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
098C: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8_1_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8_1_bReadTimerSaveCV:
                                        (0315) _Timer8_1_bReadTimerSaveCV:
                                        (0316)  bTimer8_1_ReadTimerSaveCV:                      ; this name deprecated
                                        (0317) _bTimer8_1_ReadTimerSaveCV:                      ; this name deprecated
                                        (0318)  bTimer8_1_ReadCounter:                          ; this name deprecated
                                        (0319) _bTimer8_1_ReadCounter:                          ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
098D: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
098E: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
0990: 5D 23    MOV   A,REG[0x23]        (0327)    mov   A, reg[Timer8_1_CONTROL_REG]            ; save the Control register
0992: 08       PUSH  A                  (0328)    push  A
0993: 5D 22    MOV   A,REG[0x22]        (0329)    mov   A, reg[Timer8_1_COMPARE_REG]            ; save the Compare register
0995: 08       PUSH  A                  (0330)    push  A
0996: 5D 20    MOV   A,REG[0x20]        (0331)    mov   A, reg[Timer8_1_COUNTER_REG]            ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
0998: 5D 22    MOV   A,REG[0x22]        (0333)    mov   A, reg[Timer8_1_COMPARE_REG]            ; Now grab DR2 (DR0) and save
099A: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
099C: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
099E: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
09A1: A0 03    JZ    0x09A5             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
09A3: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
09A5: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
09A7: 70 FE    AND   F,0xFE             
09A9: 41 23 FE AND   REG[0x23],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8_1_Stop_M                               ; Stop the timer
09AC: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
09AD: 60 22    MOV   REG[0x22],A        (0344)    mov   reg[Timer8_1_COMPARE_REG], A
09AF: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
09B0: 60 23    MOV   REG[0x23],A        (0346)    mov   reg[Timer8_1_CONTROL_REG], A
09B2: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
09B3: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8_1_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8_1_bReadTimer:
                                        (0383) _Timer8_1_bReadTimer:
                                        (0384)  bTimer8_1_ReadTimer:                            ; this name deprecated
                                        (0385) _bTimer8_1_ReadTimer:                            ; this name deprecated
                                        (0386)  bTimer8_1_CaptureCounter:                       ; this name deprecated
                                        (0387) _bTimer8_1_CaptureCounter:                       ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
09B4: 5D 20    MOV   A,REG[0x20]        (0390)    mov   A, reg[Timer8_1_COUNTER_REG]            ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
09B6: 5D 22    MOV   A,REG[0x22]        (0392)    mov   A, reg[Timer8_1_COMPARE_REG]            ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
09B8: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8_1.asm
FILE: lib\refmux_1.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   RefMux_1.asm
                                        (0004) ;;  Version: 1.3, Updated on 2015/3/4 at 22:26:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: RefMux User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "RefMux_1.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  RefMux_1_Start
                                        (0030) export _RefMux_1_Start
                                        (0031) 
                                        (0032) export  RefMux_1_SetPower
                                        (0033) export _RefMux_1_SetPower
                                        (0034) 
                                        (0035) export  RefMux_1_Stop
                                        (0036) export _RefMux_1_Stop
                                        (0037) 
                                        (0038) export  RefMux_1_RefSelect
                                        (0039) export _RefMux_1_RefSelect
                                        (0040) 
                                        (0041) ;-----------------------------------------------
                                        (0042) ;  EQUATES
                                        (0043) ;-----------------------------------------------
                                        (0044) TMUX_MASK:        equ 1Ch              ; Mask for Test Mux control
                                        (0045) POWERMASK:        equ 03h
                                        (0046) 
                                        (0047) AREA UserModules (ROM, REL)
                                        (0048) .SECTION
                                        (0049) ;-----------------------------------------------------------------------------
                                        (0050) ;  FUNCTION NAME: RefMux_1_Start
                                        (0051) ;  FUNCTION NAME: RefMux_1_SetPower
                                        (0052) ;
                                        (0053) ;  DESCRIPTION:
                                        (0054) ;   Applies power setting to the module's PSoC block
                                        (0055) ;
                                        (0056) ;-----------------------------------------------------------------------------
                                        (0057) ;
                                        (0058) ;  ARGUMENTS:
                                        (0059) ;  A  Contains the power setting; 0 = Off
                                        (0060) ;                                 1 = Low
                                        (0061) ;                                 2 = Med
                                        (0062) ;                                 3 = High
                                        (0063) ;
                                        (0064) ;  RETURNS:  NA
                                        (0065) ;
                                        (0066) ;  SIDE EFFECTS:
                                        (0067) ;    The A and X registers may be modified by this or future implementations
                                        (0068) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0069) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0070) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0071) ;    functions.
                                        (0072) ;
                                        (0073)  RefMux_1_Start:
                                        (0074) _RefMux_1_Start:
                                        (0075)  RefMux_1_SetPower:
                                        (0076) _RefMux_1_SetPower:
                                        (0077)     RAM_PROLOGUE RAM_USE_CLASS_2
09B9: 21 03    AND   A,0x3              (0078)     and  A, POWERMASK                  ; mask A to protect unchanged bits
09BB: 4F       MOV   X,SP               (0079)     mov  X, SP                         ; define temp store location
                                        (0080) 
09BC: 08       PUSH  A                  (0081)     push A                             ; put power value in temp store
09BD: 5D 73    MOV   A,REG[0x73]        (0082)     mov  A, reg[RefMux_1_REFMUX_CR2]   ; read power value
09BF: 21 FC    AND   A,0xFC             (0083)     and  A, ~POWERMASK                 ; clear power bits in A
09C1: 2B 00    OR    A,[X+0]            (0084)     or   A, [X]                        ; combine power value with balance of reg.
09C3: 60 73    MOV   REG[0x73],A        (0085)     mov  reg[RefMux_1_REFMUX_CR2], A   ; move complete value back to register
09C5: 18       POP   A                  (0086)     pop  A
                                        (0087)     RAM_EPILOGUE RAM_USE_CLASS_2
09C6: 7F       RET                      (0088)     ret
                                        (0089) .ENDSECTION
                                        (0090) 
                                        (0091) .SECTION
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;  FUNCTION NAME: RefMux_1_Stop
                                        (0094) ;
                                        (0095) ;  DESCRIPTION:
                                        (0096) ;   Turn off power to user module
                                        (0097) ;
                                        (0098) ;-----------------------------------------------------------------------------
                                        (0099) ;
                                        (0100) ;  ARGUMENTS: None
                                        (0101) ;
                                        (0102) ;  RETURNS:  NA
                                        (0103) ;
                                        (0104) ;  SIDE EFFECTS:
                                        (0105) ;    The A and X registers may be modified by this or future implementations
                                        (0106) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0107) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0108) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0109) ;    functions.
                                        (0110) ;
                                        (0111)  RefMux_1_Stop:
                                        (0112) _RefMux_1_Stop:
                                        (0113)     RAM_PROLOGUE RAM_USE_CLASS_1
09C7: 41 73 FC AND   REG[0x73],0xFC     (0114)     and REG[RefMux_1_REFMUX_CR2], ~POWERMASK
                                        (0115)     RAM_EPILOGUE RAM_USE_CLASS_1
09CA: 7F       RET                      (0116)     ret
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) .SECTION
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;  FUNCTION NAME: RefMux_1_InputSelect
                                        (0122) ;
                                        (0123) ;  DESCRIPTION:
                                        (0124) ;   Select one of the input of the TestMux to be connected to the Analog
                                        (0125) ;   Column bus.
                                        (0126) ;
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;
                                        (0129) ;  ARGUMENTS:
                                        (0130) ;   A  contains value to select desired RefMux output.
                                        (0131) ;         Input              Code
                                        (0132) ;         Off                 00h
                                        (0133) ;         PMuxOut             10h
                                        (0134) ;         AGND                14h  (Power must be applied)
                                        (0135) ;         REFLO               18h
                                        (0136) ;         REFHI               1Ch
                                        (0137) ;
                                        (0138) ;  RETURNS:  NA
                                        (0139) ;
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  RefMux_1_RefSelect:
                                        (0148) _RefMux_1_RefSelect:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
09CB: 21 1C    AND   A,0x1C             (0150)     and  A,TMUX_MASK                   ; Mask off test mux control
09CD: 4F       MOV   X,SP               (0151)     mov  X,SP                          ; Get stack location
09CE: 08       PUSH  A                  (0152)     push A
09CF: 5D 73    MOV   A,REG[0x73]        (0153)     mov  A,reg[RefMux_1_REFMUX_CR2]    ; Write register Test Mux register to select reference
09D1: 21 E3    AND   A,0xE3             (0154)     and  A, ~TMUX_MASK                 ; Clear Mux control bits
09D3: 2B 00    OR    A,[X+0]            (0155)     or   A,[X]                         ; Or in the new setting
09D5: 60 73    MOV   REG[0x73],A        (0156)     mov  reg[RefMux_1_REFMUX_CR2],A    ; Write register Test Mux register to select reference
09D7: 18       POP   A                  (0157)     pop  A                             ; Restore the stack
                                        (0158)     RAM_EPILOGUE RAM_USE_CLASS_2
09D8: 7F       RET                      (0159)     ret
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) ; End of File RefMux_1.asm
FILE: lib\ptt.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PTT.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "PTT.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _PTT_Start
                                        (0027) export  PTT_Start
                                        (0028) 
                                        (0029) export _PTT_Stop
                                        (0030) export  PTT_Stop
                                        (0031) 
                                        (0032) export _PTT_On
                                        (0033) export  PTT_On
                                        (0034) 
                                        (0035) export _PTT_Off
                                        (0036) export  PTT_Off
                                        (0037) 
                                        (0038) export _PTT_Switch
                                        (0039) export  PTT_Switch
                                        (0040) 
                                        (0041) export _PTT_Invert
                                        (0042) export  PTT_Invert
                                        (0043) 
                                        (0044) export _PTT_GetState
                                        (0045) export  PTT_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: PTT_Start(void)
                                        (0054) ;  FUNCTION NAME: PTT_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: PTT_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _PTT_On:
                                        (0079)  PTT_On:
09D9: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
09DB: 80 03    JMP   _PTT_Switch        (0081)    jmp  PTT_Switch 
                                        (0082) 
                                        (0083) _PTT_Start:
                                        (0084)  PTT_Start:
                                        (0085) _PTT_Stop:
                                        (0086)  PTT_Stop:
                                        (0087) _PTT_Off:
                                        (0088)  PTT_Off:
09DD: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _PTT_Switch:
                                        (0092)  PTT_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
09DF: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
09E1: A0 06    JZ    0x09E8             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
09E3: 2E 0D 04 OR    [0xD],0x4          (0102)    or   [Port_1_Data_SHADE],PTT_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_1_Data_SHADE],~PTT_PinMask
                                        (0105) ENDIF
09E6: 80 04    JMP   0x09EB             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
09E8: 26 0D FB AND   [0xD],0xFB         (0110)    and  [Port_1_Data_SHADE],~PTT_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_1_Data_SHADE],PTT_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
09EB: 51 0D    MOV   A,[0xD]            (0116)    mov  A,[Port_1_Data_SHADE]
09ED: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[PTT_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
09EF: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: PTT_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _PTT_Invert:
                                        (0144)  PTT_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
09F0: 36 0D 04 XOR   [0xD],0x4          (0149)    xor  [Port_1_Data_SHADE],PTT_PinMask
09F3: 51 0D    MOV   A,[0xD]            (0150)    mov  A,[Port_1_Data_SHADE]
09F5: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[PTT_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
09F7: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: PTT_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _PTT_GetState:
                                        (0177)  PTT_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
09F8: 51 0D    MOV   A,[0xD]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
09FA: 21 04    AND   A,0x4              (0188)    and   A,PTT_PinMask                 ; Mask off the trash
09FC: A0 03    JZ    0x0A00             (0189)    jz    .End_LED_GS                   ; If zero, we're done
09FE: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0A00: 7F       RET                      (0195)    ret
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0A01: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0A03: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0A04: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0A05: 5D 7B    MOV   A,REG[0x7B]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
0A07: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0A09: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0A0B: 60 7B    MOV   REG[0x7B],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
0A0D: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0A0E: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0A0F: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0A11: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0A12: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0A13: 5D 79    MOV   A,REG[0x79]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
0A15: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0A17: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0A1A: B0 0A    JNZ   0x0A25             (0164)    jnz  .SETHIGHGAIN
0A1C: 41 78 FE AND   REG[0x78],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
0A1F: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0A21: 60 79    MOV   REG[0x79],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0A23: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0A24: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0A25: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0A28: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0A2A: 60 79    MOV   REG[0x79],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0A2C: 43 78 01 OR    REG[0x78],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
0A2F: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0A30: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0A31: 41 7B FC AND   REG[0x7B],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0A34: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: lib\lcd_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_1.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_1.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_1_Start
                                        (0044) export  _LCD_1_Start
                                        (0045) export   LCD_1_Init
                                        (0046) export  _LCD_1_Init
                                        (0047) 
                                        (0048) export   LCD_1_WriteData
                                        (0049) export  _LCD_1_WriteData
                                        (0050) 
                                        (0051) export   LCD_1_Control
                                        (0052) export  _LCD_1_Control
                                        (0053) 
                                        (0054) export  LCD_1_PrString
                                        (0055) export _LCD_1_PrString
                                        (0056) 
                                        (0057) export  LCD_1_PrCString
                                        (0058) export _LCD_1_PrCString
                                        (0059) 
                                        (0060) export  LCD_1_Position
                                        (0061) export _LCD_1_Position
                                        (0062) 
                                        (0063) export  LCD_1_PrHexByte
                                        (0064) export _LCD_1_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_1_PrHexInt
                                        (0067) export _LCD_1_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_1_Delay50uTimes
                                        (0070) export _LCD_1_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_1_Delay50u
                                        (0073) export _LCD_1_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0081) export  LCD_1_InitBG
                                        (0082) export _LCD_1_InitBG
                                        (0083) 
                                        (0084) export  LCD_1_InitVBG
                                        (0085) export _LCD_1_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_1_DrawVBG and
                                        (0090) ;    LCD_1_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_1_DrawVBG
                                        (0112) export _LCD_1_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_1_DrawVBG
                                        (0117) export  LCD_1_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_1_Write_Data
                                        (0127) export  _LCD_1_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_1_Port:           equ    PRT2DR
                                        (0135) LCD_1_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_1_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_1_E:              equ    10h
                                        (0139) LCD_1_RW:             equ    40h
                                        (0140) LCD_1_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_1_DATA_MASK:      equ    0Fh
                                        (0143) LCD_1_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                        (0146) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                        (0147) LCD_1_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_1_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_1_DISP_INC:       equ    03h
                                        (0151) LCD_1_DISP_OFF:       equ    08h
                                        (0152) LCD_1_DISP_ON:        equ    0Ch
                                        (0153) LCD_1_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_1_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_1_PrCString:
                                        (0205) _LCD_1_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0A35: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0A36: 10       PUSH  X                  (0209)     push  X
0A37: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0A38: B0 04    JNZ   0x0A3D             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0A3A: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0A3B: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0A3C: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0A3D: 90 3C    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0218)     call  LCD_1_WriteData              ; Write data to LCD
0A3F: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0A40: 18       POP   A                  (0220)     pop   A
0A41: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0A42: DF F2    JNC   _LCD_1_PrCString   (0222)     jnc   .Loop_PrCString
0A44: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0A45: 8F EF    JMP   _LCD_1_PrCString   (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_1_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_1_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_1_PrHexByte:
                                        (0258) _LCD_1_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0A57: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0A58: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0A59: 67       ASR   A                  (0262)     asr   A
0A5A: 67       ASR   A                  (0263)     asr   A
0A5B: 67       ASR   A                  (0264)     asr   A
0A5C: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0A5E: FF E7    INDEX LCD_1_HEX_STR      (0266)     index LCD_1_HEX_STR                  ; Get Hex value
0A60: 90 19    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0267)     call  LCD_1_WriteData              ; Write data to screen
0A62: 18       POP   A                  (0268)     pop   A                            ; Restore value
0A63: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0A65: FF E0    INDEX LCD_1_HEX_STR      (0270)     index LCD_1_HEX_STR                  ; Get Hex value
0A67: 90 12    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0271)     call  LCD_1_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0A69: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_1_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_1_PrHexInt:
                                        (0303) _LCD_1_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0A6A: 4B       SWAP  A,X                (0305)     swap  A,X
0A6B: 9F EA    CALL  _LCD_1_PrHexByte   (0306)     call  LCD_1_PrHexByte              ; Print MSB
0A6D: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0A6E: 9F E7    CALL  _LCD_1_PrHexByte   (0308)     call  LCD_1_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0A70: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_1_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_1_PrString:
                                        (0342) _LCD_1_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0A71: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0A73: A0 06    JZ    0x0A7A             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_1_writeData is known not to modify X so no need to preserve
0A75: 90 04    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0349)     call  LCD_1_WriteData              ; Write data to screen
0A77: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0A78: 8F F8    JMP   _LCD_1_PrString    (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0A7A: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_1_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_1_WriteData:
                                        (0382) _LCD_1_WriteData:
                                        (0383)  LCD_1_Write_Data:   ; Do not use
                                        (0384) _LCD_1_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0A7B: 90 5F    CALL  0x0ADC             (0386)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_1_Check_Ready
0A7D: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0A7E: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0A7F: 67       ASR   A                  (0390)     asr   A
0A80: 67       ASR   A                  (0391)     asr   A
0A81: 67       ASR   A                  (0392)     asr   A
0A82: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0A84: 90 38    CALL  0x0ABE             (0394)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
0A86: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0A87: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0A89: 40       NOP                      (0397)     nop
0A8A: 40       NOP                      (0398)     nop
0A8B: 40       NOP                      (0399)     nop
0A8C: 90 30    CALL  0x0ABE             (0400)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0A8E: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_1_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_1_Control:
                                        (0430) _LCD_1_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0A8F: 90 4B    CALL  0x0ADC             (0432)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_1_Check_Ready
0A91: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0A92: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0A93: 67       ASR   A                  (0436)     asr   A
0A94: 67       ASR   A                  (0437)     asr   A
0A95: 67       ASR   A                  (0438)     asr   A
0A96: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0A98: 90 09    CALL  0x0AA3             (0440)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
0A9A: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0A9B: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0A9D: 40       NOP                      (0443)     nop
0A9E: 40       NOP                      (0444)     nop
0A9F: 40       NOP                      (0445)     nop
0AA0: 90 01    CALL  0x0AA3             (0446)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0AA2: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_1_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0AA3: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0AA4: 26 0E 80 AND   [0xE],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
0AA7: 51 0E    MOV   A,[0xE]            (0480)     mov   A,[Port_2_Data_SHADE]
0AA9: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                        (0482) 
0AAB: 18       POP   A                  (0483)     pop   A
0AAC: 21 0F    AND   A,0xF              (0484)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
0AAE: 29 10    OR    A,0x10             (0485)     or    A,LCD_1_E                              ; Bring "E" Enable line high
0AB0: 2A 0E    OR    A,[0xE]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0AB2: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_1_Port], A                     ; Write data
0AB4: 53 0E    MOV   [0xE],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0AB6: 40       NOP                      (0489)     nop
0AB7: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
0AB9: 53 0E    MOV   [0xE],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0ABB: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_1_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0ABD: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_1_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0ABE: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0ABF: 26 0E 80 AND   [0xE],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
0AC2: 2E 0E 20 OR    [0xE],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
0AC5: 51 0E    MOV   A,[0xE]            (0527)     mov   A,[Port_2_Data_SHADE]
0AC7: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_1_Port],A
                                        (0529) 
0AC9: 18       POP   A                  (0530)     pop   A
0ACA: 21 0F    AND   A,0xF              (0531)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
0ACC: 29 30    OR    A,0x30             (0532)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
0ACE: 2A 0E    OR    A,[0xE]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0AD0: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_1_Port], A                            ; Write data
0AD2: 53 0E    MOV   [0xE],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0AD4: 40       NOP                      (0536)     NOP
0AD5: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
0AD7: 53 0E    MOV   [0xE],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0AD9: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_1_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0ADB: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_1_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_1_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0ADC: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0ADD: 26 0E 80 AND   [0xE],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
0AE0: 51 0E    MOV   A,[0xE]            (0574)     mov   A,[Port_2_Data_SHADE]
0AE2: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                        (0576) 
0AE4: 26 0F F0 AND   [0xF],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
0AE7: 51 0F    MOV   A,[0xF]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0AE9: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0AEB: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
0AED: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0AEF: 2E 0E 40 OR    [0xE],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
0AF2: 51 0E    MOV   A,[0xE]            (0584)     mov   A,[Port_2_Data_SHADE]
0AF4: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_1_Port],A
0AF6: 40       NOP                      (0586)     NOP
                                        (0587) 
0AF7: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0AF8: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0AFA: 2E 0E 50 OR    [0xE],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
0AFD: 51 0E    MOV   A,[0xE]            (0593)     mov   A,[Port_2_Data_SHADE]
0AFF: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_1_Port],A
                                        (0595) 
0B01: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0B02: 40       NOP                      (0597)     nop
0B03: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_1_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0B05: 08       PUSH  A                  (0610)     push  A
0B06: 26 0E C0 AND   [0xE],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
0B09: 51 0E    MOV   A,[0xE]            (0612)     mov   A,[Port_2_Data_SHADE]
0B0B: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_1_Port],A
                                        (0614) 
0B0D: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0B0E: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0B0F: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0B10: 2E 0E 50 OR    [0xE],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
0B13: 51 0E    MOV   A,[0xE]            (0620)     mov   A,[Port_2_Data_SHADE]
0B15: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_1_Port],A
                                        (0622) 
0B17: 40       NOP                      (0623)     nop
0B18: 40       NOP                      (0624)     nop
                                        (0625) 
0B19: 26 0E C0 AND   [0xE],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
0B1C: 51 0E    MOV   A,[0xE]            (0627)     mov   A,[Port_2_Data_SHADE]
0B1E: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_1_Port],A
                                        (0629) 
0B20: 18       POP   A                  (0630)     pop   A
0B21: 21 08    AND   A,0x8              (0631)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                        (0632) 
0B23: A0 04    JZ    0x0B28             (0633)     jz    .UNLOCK
0B25: 79       DEC   X                  (0634)     dec   X
0B26: BF D3    JNZ   0x0AFA             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0B28: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0B29: 2E 0F 7F OR    [0xF],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
0B2C: 51 0F    MOV   A,[0xF]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0B2E: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0B30: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
0B32: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0B34: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0B35: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_1_Start
                                        (0652) ;  FUNCTION NAME: LCD_1_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_1_Start:
                                        (0679) _LCD_1_Start:
                                        (0680)  LCD_1_Init:
                                        (0681) _LCD_1_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0B36: 26 0F 80 AND   [0xF],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
0B39: 2E 0F 7F OR    [0xF],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
0B3C: 26 10 80 AND   [0x10],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
0B3F: 51 0F    MOV   A,[0xF]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0B41: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0B43: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
0B45: 51 10    MOV   A,[0x10]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0B47: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_1_PortMode1],A
0B49: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0B4B: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0B4D: 90 63    CALL  _LCD_1_Delay50uTimes(0697)     call  LCD_1_Delay50uTimes
0B4F: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0B51: 90 5F    CALL  _LCD_1_Delay50uTimes(0699)     call  LCD_1_Delay50uTimes
                                        (0700) 
0B53: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0B55: 9F 4C    CALL  0x0AA3             (0702)     call  LCD_1_WCNTL_Nibble
                                        (0703) 
0B57: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0B59: 90 57    CALL  _LCD_1_Delay50uTimes(0705)     call  LCD_1_Delay50uTimes
                                        (0706) 
0B5B: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0B5D: 9F 44    CALL  0x0AA3             (0708)     call  LCD_1_WCNTL_Nibble
                                        (0709) 
0B5F: 90 5F    CALL  _LCD_1_Delay50u    (0710)     call  LCD_1_Delay50u
0B61: 90 5D    CALL  _LCD_1_Delay50u    (0711)     call  LCD_1_Delay50u
0B63: 90 5B    CALL  _LCD_1_Delay50u    (0712)     call  LCD_1_Delay50u
                                        (0713) 
0B65: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0B67: 9F 3A    CALL  0x0AA3             (0715)     call  LCD_1_WCNTL_Nibble
                                        (0716) 
0B69: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B6B: 90 45    CALL  _LCD_1_Delay50uTimes(0718)     call  LCD_1_Delay50uTimes
                                        (0719) 
0B6D: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0B6F: 9F 32    CALL  0x0AA3             (0721)     call  LCD_1_WCNTL_Nibble
                                        (0722) 
0B71: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B73: 90 3D    CALL  _LCD_1_Delay50uTimes(0724)     call  LCD_1_Delay50uTimes
                                        (0725) 
0B75: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0B77: 9F 16    CALL  _LCD_1_Control     (0727)     call  LCD_1_Control
0B79: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B7B: 90 35    CALL  _LCD_1_Delay50uTimes(0729)     call  LCD_1_Delay50uTimes
                                        (0730) 
0B7D: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0B7F: 9F 0E    CALL  _LCD_1_Control     (0732)     call  LCD_1_Control
0B81: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B83: 90 2D    CALL  _LCD_1_Delay50uTimes(0734)     call  LCD_1_Delay50uTimes
                                        (0735) 
0B85: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0B87: 9F 06    CALL  _LCD_1_Control     (0737)     call  LCD_1_Control
                                        (0738) 
0B89: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0B8B: 9F 02    CALL  _LCD_1_Control     (0740)     call  LCD_1_Control
                                        (0741) 
0B8D: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0B8F: 9E FE    CALL  _LCD_1_Control     (0743)     call  LCD_1_Control
                                        (0744) 
0B91: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_1_DISP_OFF
0B93: 9E FA    CALL  _LCD_1_Control     (0746)     call  LCD_1_Control
                                        (0747) 
0B95: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_1_DISP_ON
0B97: 9E F6    CALL  _LCD_1_Control     (0749)     call  LCD_1_Control
                                        (0750) 
0B99: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_1_DISP_INC
0B9B: 9E F2    CALL  _LCD_1_Control     (0752)     call  LCD_1_Control
                                        (0753) 
0B9D: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B9F: 90 11    CALL  _LCD_1_Delay50uTimes(0755)     call  LCD_1_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0BA1: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_1_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_1_ROW_OFFSET::
                                        (0783)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_1_Position:
                                        (0788) _LCD_1_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0BA6: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0BA8: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0BA9: FF F7    INDEX LCD_1_ROW_OFFSET   (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
0BAB: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0BAC: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0BAE: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0BAF: 9E DE    CALL  _LCD_1_Control     (0797)     call  LCD_1_Control                ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0BB1: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_1_Delay50uTimes:
                                        (0825) _LCD_1_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0BB2: 90 0C    CALL  _LCD_1_Delay50u    (0827)     call  LCD_1_Delay50u
0BB4: 78       DEC   A                  (0828)     dec   A
0BB5: BF FC    JNZ   _LCD_1_Delay50uTimes(0829)     jnz   LCD_1_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0BB7: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_1_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_1_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_1_Delay50u:
                                        (0869)  _LCD_1_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0BC0: 08       PUSH  A                  (0871)     push  A
0BC1: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0BC3: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0BC5: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0BC7: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0BC9: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0BCB: D0 06    JNC   0x0BD2             (0877)     jnc   .Delay50u_End
0BCD: FF E9    INDEX LCD_1_Delay50u_Table(0878)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0BCF: 78       DEC   A                  (0880)     dec   A                              ; [4]
0BD0: BF FE    JNZ   0x0BCF             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0BD2: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0BD3: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_1_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_1_DrawBG:
0BD4: 10       PUSH  X                  (0943)     push  X
0BD5: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
0BD7: 9F CD    CALL  _LCD_1_Position    (0945)     call  LCD_1_Position               ; Set cursor position
0BD9: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
0BDA: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
0BDD: B0 05    JNZ   0x0BE3             (0950)     jnz   .LCD_CHECK1X
0BDF: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
0BE1: 80 11    JMP   0x0BF3             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0BE3: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0BE6: D0 07    JNC   0x0BEE             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
0BE8: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
0BEA: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
0BEC: 80 06    JMP   0x0BF3             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
0BEE: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
0BF0: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0BF3: 9E 86    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0966)     call  LCD_1_WriteData              ; Display BG character
                                        (0967) 
0BF5: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
0BF7: BF E2    JNZ   0x0BDA             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
0BF9: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_1_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_1_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0BFA: 4F       MOV   X,SP               (1015)     mov   X, SP
0BFB: 10       PUSH  X                  (1016)     push  X
0BFC: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
0BFE: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0C00: 9F A4    CALL  _LCD_1_Position    (1020)     call  LCD_1_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0C02: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0C03: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0C06: B0 05    JNZ   0x0C0C             (1026)     jnz   .LCD_CHECK1
0C08: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0C0A: 80 11    JMP   0x0C1C             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0C0C: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0C0F: D0 07    JNC   0x0C17             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0C11: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0C13: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0C15: 80 06    JMP   0x0C1C             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0C17: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0C19: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0C1C: 9E 5D    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(1042)     call  LCD_1_WriteData              ; Display BG character
                                        (1043) 
0C1E: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0C20: BF E2    JNZ   0x0C03             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0C22: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_1_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_1_DrawVBG:
                                        (1095) 
0C23: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
0C25: 08       PUSH  A                  (1098)     push  A
0C26: FF 7A    INDEX LCD_1_ROW_OFFSET   (1099)     index LCD_1_ROW_OFFSET  ; Get row offset
0C28: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
0C2A: 9E 63    CALL  _LCD_1_Control     (1101)     call  LCD_1_Control                ; Position Cursor
0C2C: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
0C2F: B0 05    JNZ   0x0C35             (1103)     jnz   .VBG_NZ_SEGX
0C31: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
0C33: 80 13    JMP   0x0C47             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
0C35: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
0C38: D0 09    JNC   0x0C42             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
0C3A: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
0C3C: 78       DEC   A                  (1111)     dec   A
0C3D: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
0C40: 80 06    JMP   0x0C47             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
0C42: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
0C45: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
0C47: 9E 32    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(1120)     call  LCD_1_WriteData              ; Write value
0C49: 18       POP   A                  (1121)     pop   A
0C4A: 78       DEC   A                  (1122)     dec   A
0C4B: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
0C4D: BF D7    JNZ   0x0C25             (1124)     jnz   .VBG_LOOPX
0C4F: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_1_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_1_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
0C50: 4F       MOV   X,SP               (1168)     mov   X, SP
0C51: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0C53: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0C55: 08       PUSH  A                  (1172)     push  A
0C56: FF 4A    INDEX LCD_1_ROW_OFFSET   (1173)     index LCD_1_ROW_OFFSET  ; Get row offset
0C58: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0C5A: 9E 33    CALL  _LCD_1_Control     (1175)     call  LCD_1_Control                ; Position Cursor
0C5C: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0C5F: B0 05    JNZ   0x0C65             (1177)     jnz   .VBG_NZ_SEG
0C61: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0C63: 80 13    JMP   0x0C77             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0C65: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0C68: D0 09    JNC   0x0C72             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0C6A: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0C6C: 78       DEC   A                  (1185)     dec   A
0C6D: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0C70: 80 06    JMP   0x0C77             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0C72: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0C75: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0C77: 9E 02    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(1194)     call  LCD_1_WriteData              ; Write value
0C79: 18       POP   A                  (1195)     pop   A
0C7A: 78       DEC   A                  (1196)     dec   A
0C7B: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0C7D: BF D7    JNZ   0x0C55             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0C7F: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_1_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_1_InitVBG:
                                        (1236) _LCD_1_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
0C80: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0C81: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0C82: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0C83: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
0C85: 9E 08    CALL  _LCD_1_Control     (1243)     call  LCD_1_Control                ; Position the CG pointer
0C87: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0C8A: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0C8D: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0C8F: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0C91: D0 05    JNC   0x0C97             (1251)     jnc   .VBG_SOLID
0C93: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0C95: 80 03    JMP   0x0C99             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0C97: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0C99: 9D E0    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(1257)     call  LCD_1_WriteData              ; character data
0C9B: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0C9D: BF EF    JNZ   0x0C8D             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0C9F: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0CA1: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0CA4: BF E5    JNZ   0x0C8A             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0CA6: 18       POP   A                  (1264)     pop  A
0CA7: 18       POP   A                  (1265)     pop  A
0CA8: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_1_DISP_ON                    ; Turn on display, don't really
0CAA: 9D E3    CALL  _LCD_1_Control     (1267)     call LCD_1_Control                 ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0CAC: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_1_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_1_InitBG:
                                        (1317) _LCD_1_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0CBB: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0CBC: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0CBE: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0CC0: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
0CC2: 9D CB    CALL  _LCD_1_Control     (1324)     call  LCD_1_Control                ; Position the CG pointer
0CC4: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0CC7: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0CCA: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0CCC: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0CCF: B0 05    JNZ   0x0CD5             (1332)     jnz   .BG_OTHER
0CD1: FF DA    INDEX LCD_1_BG_TYPE1     (1333)     index LCD_1_BG_TYPE1
0CD3: 80 03    JMP   0x0CD7             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0CD5: FF DD    INDEX LCD_1_BG_TYPE2     (1336)     index LCD_1_BG_TYPE2
                                        (1337)  .BG_Load:
0CD7: 9D A2    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(1338)     call  LCD_1_WriteData
0CD9: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0CDB: BF EE    JNZ   0x0CCA             (1340)     jnz   .BG_Loop2
0CDD: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0CDF: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0CE2: BF E4    JNZ   0x0CC7             (1343)     jnz   .BG_Loop1
                                        (1344) 
0CE4: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0CE6: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_1_DISP_ON
0CE8: 9D A5    CALL  _LCD_1_Control     (1347)     call  LCD_1_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0CEA: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_1.asm
FILE: lib\hf_power.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   HF_power.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "HF_power.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _HF_power_Start
                                        (0027) export  HF_power_Start
                                        (0028) 
                                        (0029) export _HF_power_Stop
                                        (0030) export  HF_power_Stop
                                        (0031) 
                                        (0032) export _HF_power_On
                                        (0033) export  HF_power_On
                                        (0034) 
                                        (0035) export _HF_power_Off
                                        (0036) export  HF_power_Off
                                        (0037) 
                                        (0038) export _HF_power_Switch
                                        (0039) export  HF_power_Switch
                                        (0040) 
                                        (0041) export _HF_power_Invert
                                        (0042) export  HF_power_Invert
                                        (0043) 
                                        (0044) export _HF_power_GetState
                                        (0045) export  HF_power_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: HF_power_Start(void)
                                        (0054) ;  FUNCTION NAME: HF_power_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: HF_power_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _HF_power_On:
                                        (0079)  HF_power_On:
0CEB: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0CED: 80 03    JMP   _HF_power_Switch   (0081)    jmp  HF_power_Switch 
                                        (0082) 
                                        (0083) _HF_power_Start:
                                        (0084)  HF_power_Start:
                                        (0085) _HF_power_Stop:
                                        (0086)  HF_power_Stop:
                                        (0087) _HF_power_Off:
                                        (0088)  HF_power_Off:
0CEF: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _HF_power_Switch:
                                        (0092)  HF_power_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
0CF1: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0CF3: A0 06    JZ    0x0CFA             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
0CF5: 2E 0D 02 OR    [0xD],0x2          (0102)    or   [Port_1_Data_SHADE],HF_power_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_1_Data_SHADE],~HF_power_PinMask
                                        (0105) ENDIF
0CF8: 80 04    JMP   0x0CFD             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0CFA: 26 0D FD AND   [0xD],0xFD         (0110)    and  [Port_1_Data_SHADE],~HF_power_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_1_Data_SHADE],HF_power_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0CFD: 51 0D    MOV   A,[0xD]            (0116)    mov  A,[Port_1_Data_SHADE]
0CFF: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[HF_power_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0D01: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: HF_power_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _HF_power_Invert:
                                        (0144)  HF_power_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
0D02: 36 0D 02 XOR   [0xD],0x2          (0149)    xor  [Port_1_Data_SHADE],HF_power_PinMask
0D05: 51 0D    MOV   A,[0xD]            (0150)    mov  A,[Port_1_Data_SHADE]
0D07: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[HF_power_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0D09: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: HF_power_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _HF_power_GetState:
                                        (0177)  HF_power_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
0D0A: 51 0D    MOV   A,[0xD]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0D0C: 21 02    AND   A,0x2              (0188)    and   A,HF_power_PinMask            ; Mask off the trash
0D0E: A0 03    JZ    0x0D12             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0D10: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0D12: 7F       RET                      (0195)    ret
FILE: lib\eingangsamp.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   Eingangsamp.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "Eingangsamp.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  Eingangsamp_Start
                                        (0060) export _Eingangsamp_Start
                                        (0061) export  Eingangsamp_SetPower
                                        (0062) export _Eingangsamp_SetPower
                                        (0063) 
                                        (0064) export  Eingangsamp_SetGain
                                        (0065) export _Eingangsamp_SetGain
                                        (0066) 
                                        (0067) export  Eingangsamp_Stop
                                        (0068) export _Eingangsamp_Stop
                                        (0069) 
                                        (0070) IF (Eingangsamp_AGNDBUFAPI)
                                        (0071) export  Eingangsamp_EnableAGNDBuffer
                                        (0072) export _Eingangsamp_EnableAGNDBuffer
                                        (0073) export  Eingangsamp_DisableAGNDBuffer
                                        (0074) export _Eingangsamp_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: Eingangsamp_Start
                                        (0092) ;  FUNCTION NAME: Eingangsamp_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  Eingangsamp_Start:
                                        (0111) _Eingangsamp_Start:
                                        (0112)  Eingangsamp_SetPower:
                                        (0113) _Eingangsamp_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0D13: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0D15: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0D16: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0D17: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[Eingangsamp_GAIN_CR2]                       ; read power value
0D19: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0D1B: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0D1D: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[Eingangsamp_GAIN_CR2], A                  ; move complete value back to register
0D1F: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0D20: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: Eingangsamp_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Eingangsamp_SetGain:
                                        (0154) _Eingangsamp_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0D21: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0D23: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0D24: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0D25: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[Eingangsamp_GAIN_CR0]                       ; read mux settings
0D27: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0D29: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0D2C: B0 0A    JNZ   0x0D37             (0164)    jnz  .SETHIGHGAIN
0D2E: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[Eingangsamp_GAIN_CR3],~EXGAIN                  ; Clear High Gain bit.
0D31: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0D33: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[Eingangsamp_GAIN_CR0], A                       ; move complete value back to register
0D35: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0D36: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0D37: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0D3A: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0D3C: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[Eingangsamp_GAIN_CR0], A                       ; move complete value back to register
0D3E: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[Eingangsamp_GAIN_CR3], EXGAIN                  ; Set High Gain bit.
0D41: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0D42: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: Eingangsamp_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  Eingangsamp_Stop:
                                        (0203) _Eingangsamp_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0D43: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[Eingangsamp_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0D46: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (Eingangsamp_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: Eingangsamp_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  Eingangsamp_EnableAGNDBuffer:
                                        (0233) _Eingangsamp_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[Eingangsamp_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: Eingangsamp_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  Eingangsamp_DisableAGNDBuffer:
                                        (0261) _Eingangsamp_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[Eingangsamp_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File Eingangsamp.asm
FILE: lib\e2prom_1.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   E2PROM_1.asm
                                        (0004) ;;  Version: 1.7, Updated on 2015/3/4 at 22:26:11
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: EEPROM emulation User Module implementation file.
                                        (0008) ;;
                                        (0009) ;;     Routines in this file perform E2PROM_1 User Module Read and
                                        (0010) ;;     Write operations.
                                        (0011) ;;
                                        (0012) ;;     They provide a layer of abstraction on top of the E2PROMLIB.asm routines
                                        (0013) ;;     to allow instancing of the EEPROM devices.  Together the E2PROM and
                                        (0014) ;;     E2PROMLIB algorithms emulate a byte-wise EEPROM device on a block oriented
                                        (0015) ;;     flash architecture.
                                        (0016) ;;
                                        (0017) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0018) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0019) ;;        This means it is the caller's responsibility to preserve any values
                                        (0020) ;;        in the X and A registers that are still needed after the API functions
                                        (0021) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0022) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0023) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0024) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0025) ;;-----------------------------------------------------------------------------
                                        (0026) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0027) ;;*****************************************************************************
                                        (0028) ;;*****************************************************************************
                                        (0029) 
                                        (0030) ;Preset CPU_EQUATE for CY8C25/26xxx identification
                                        (0031) CPU_F:   equ   0
                                        (0032) 
                                        (0033) include "m8c.inc"
                                        (0034) include "E2PROM_1.inc"
                                        (0035) include "memory.inc"
                                        (0036) 
                                        (0037) ;-------------------------------------------------------------------
                                        (0038) ;  Declare the functions global for both assembler and C compiler.
                                        (0039) ;
                                        (0040) ;  Note that there are two names for each API. First name is
                                        (0041) ;  assembler reference. Name with underscore is name refence for
                                        (0042) ;  C compiler.  Calling function in C source code does not require
                                        (0043) ;  the underscore.
                                        (0044) ;-------------------------------------------------------------------
                                        (0045) 
                                        (0046) ;-----------------------------------------------
                                        (0047) ;  Global Symbols
                                        (0048) ;-----------------------------------------------
                                        (0049) 
                                        (0050) export   E2PROM_1_Start
                                        (0051) export  _E2PROM_1_Start
                                        (0052) export   E2PROM_1_Stop
                                        (0053) export  _E2PROM_1_Stop
                                        (0054) export   E2PROM_1_bE2Write
                                        (0055) export  _E2PROM_1_bE2Write
                                        (0056) export   E2PROM_1_E2Read
                                        (0057) export  _E2PROM_1_E2Read
                                        (0058) 
                                        (0059) export   E2PROM_1_RESERVED
                                        (0060) 
                                        (0061) ;-----------------------------------------------------------------
                                        (0062) ;  Allocate the E2PROM_1 EEPROM device in Flash memory
                                        (0063) ;     This will allow the linker to perform memory collision
                                        (0064) ;     checking and the EEPROM device will be displayed in the
                                        (0065) ;     map file.
                                        (0066) ;     Note that this memory region can also be accessed from "C".
                                        (0067) ;-----------------------------------------------------------------
                                        (0068) AREA  E2PROM_1_AREA   (ROM,ABS,CON)
                                        (0069)    ORG   E2PROM_1_START_ADDR
                                        (0070) 
                                        (0071) _E2PROM_1_RESERVED::
                                        (0072)  E2PROM_1_RESERVED::     blkb     40h
                                        (0073) 
                                        (0074) 
                                        (0075) AREA  UserModules (ROM,REL)
                                        (0076) 
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: E2PROM_1_Start
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Start routine for the E2PROM_1 user module.  This routine is
                                        (0082) ;     a place holder for conformance and consistency.
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     None
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;     None
                                        (0090) ;
                                        (0091) ;  SIDE EFFECTS: 
                                        (0092) ;    The A and X registers may be modified by this or future implementations
                                        (0093) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0094) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0095) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0096) ;    functions.
                                        (0097) ;
                                        (0098) .SECTION
                                        (0099) 
                                        (0100)  E2PROM_1_Start:
                                        (0101) _E2PROM_1_Start:
                                        (0102)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0103)    RAM_EPILOGUE RAM_USE_CLASS_1
0D47: 7F       RET                      (0104)    ret
                                        (0105) 
                                        (0106) .ENDSECTION
                                        (0107) 
                                        (0108) 
                                        (0109) ;-----------------------------------------------------------------------------
                                        (0110) ;  FUNCTION NAME: E2PROM_1_Stop
                                        (0111) ;
                                        (0112) ;  DESCRIPTION:
                                        (0113) ;     Stop routine for the E2PROM_1 user module.  This routine is
                                        (0114) ;     a place holder for conformance and consistency.
                                        (0115) ;
                                        (0116) ;-----------------------------------------------------------------------------
                                        (0117) ;
                                        (0118) ;  ARGUMENTS:
                                        (0119) ;     None
                                        (0120) ;
                                        (0121) ;  RETURNS:
                                        (0122) ;     None
                                        (0123) ;
                                        (0124) ;  SIDE EFFECTS: 
                                        (0125) ;    The A and X registers may be modified by this or future implementations
                                        (0126) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0127) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0128) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0129) ;    functions.
                                        (0130) ;
                                        (0131) .SECTION
                                        (0132) 
                                        (0133)  E2PROM_1_Stop:
                                        (0134) _E2PROM_1_Stop:
                                        (0135)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0136)    RAM_EPILOGUE RAM_USE_CLASS_1
0D48: 7F       RET                      (0137)    ret
                                        (0138) 
                                        (0139) .ENDSECTION
                                        (0140) 
                                        (0141) 
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;  FUNCTION NAME: E2PROM_1_E2Write
                                        (0144) ;
                                        (0145) ;  DESCRIPTION:
                                        (0146) ;     Writes the specified E2PROM data at the wAddr and wByteCount from RAM into
                                        (0147) ;     Flash into the defined E2PROM instance.
                                        (0148) ;
                                        (0149) ;     Prototype in C is:
                                        (0150) ;
                                        (0151) ;        #pragma  fastcall16 E2Write
                                        (0152) ;        void E2PROM_1_bE2Write( WORD wAddr, BYTE * pbData, WORD wByteCount,
                                        (0153) ;                                        CHAR cTemperature );
                                        (0154) ;
                                        (0155) ;     Easiest method to call from assembly is as follows:
                                        (0156) ;           push  X                    ; push X only if X needs to be perserved
                                        (0157) ;           mov   X, SP
                                        (0158) ;           push  <cTemperature>
                                        (0159) ;           push  <wByteCount>
                                        (0160) ;           push  <wByteCount+1>
                                        (0161) ;           push  <pbDataDest>                  
                                        (0162) ;           push  <pbDataDest+1>
                                        (0163) ;           push  <wAddr>
                                        (0164) ;           push  <wAddr+1>
                                        (0165) ;           call  E2PROM_1_bE2Write
                                        (0166) ;           add   SP, -E2_RD_ARG_STACK_FRAME_SIZE
                                        (0167) ;           pop   X                    ; restore X only if it was saved above
                                        (0168) ;
                                        (0169) ;           where <> refers to any addressing mode or number of instructions to
                                        (0170) ;              place the referenced data on the stack frame.
                                        (0171) ;
                                        (0172) ;     Other method is to create a stack frame using the defined equates and
                                        (0173) ;     load them into the stack frame using [X+E2_WR_ARG_*] offset addressing mode.
                                        (0174) ;     If this method is used in the LMM (large memory model) then make sure
                                        (0175) ;     that the index page tracks the stack page or is set to the same page
                                        (0176) ;     as the stack page.
                                        (0177) ;
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;
                                        (0180) ;  ARGUMENTS:
                                        (0181) ;     wAddr:         WORD   - relative OFFSET in defined E2PROM to write data
                                        (0182) ;     pbData:        BYTE * - pointer to the RAM buffer of data to write
                                        (0183) ;     wByteCount:    WORD   - number of bytes to write into E2PROM
                                        (0184) ;     cTemperature:  CHAR   - temperature in degrees celsius
                                        (0185) ;
                                        (0186) ;  RETURNS:    E2PROM_1_NOERROR, E2PROM_1_FAILURE, or
                                        (0187) ;              E2PROM_1_STACKOVERFLOW
                                        (0188) ;
                                        (0189) ;  SIDE EFFECTS: 
                                        (0190) ;    If a partial block is to be saved to flash, then a 64 byte buffer
                                        (0191) ;    is temporary allocated.
                                        (0192) ;
                                        (0193) ;    The A and X registers may be modified by this or future implementations
                                        (0194) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0195) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0196) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0197) ;    functions.
                                        (0198) ;          
                                        (0199) ;    Currently only the page pointer registers listed below are modified:
                                        (0200) ;       CUR_PP 
                                        (0201) ;       IDX_PP
                                        (0202) ;       MVW_PP
                                        (0203) ;                
                                        (0204) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0205) ;------------------------------------------------------------------------------
                                        (0206) .SECTION
                                        (0207) 
                                        (0208)  E2PROM_1_bE2Write::
                                        (0209) _E2PROM_1_bE2Write::
                                        (0210) 
                                        (0211) ;  RAM_PROLOGUE RAM_PROXY_CLASS_4 RAM_USE_CLASS_2  -->  implemented in E2PROMLIB  
                                        (0212) ;  Save the Flag register to perserve the native paging mode
                                        (0213) IF (CPU_F)     ;only save CPU flag if NOT CY8C25/26xxx PSoC devices
0D49: 5D F7    MOV   A,REG[0xF7]        (0214)    mov   A, reg[CPU_F]                            
0D4B: 08       PUSH  A                  (0215)    push  A
                                        (0216) ENDIF
0D4C: 50 00    MOV   A,0x0              (0217)    mov   A, >E2PROM_1_START_BLOCK          ; push the FirstBlockID - MSB
0D4E: 08       PUSH  A                  (0218)    push  A
0D4F: 50 FF    MOV   A,0xFF             (0219)    mov   A, <E2PROM_1_START_BLOCK          ; push the FirstBlockID - LSB
0D51: 08       PUSH  A                  (0220)    push  A
0D52: 7D 0E F3 LJMP  _bE2Write          (0221)    ljmp  bE2Write                                  ; jmp to E2PROMLIB 
                                        (0222) 
                                        (0223) 
                                        (0224) ; NOTE that return will be done by a RETI instruction to restore the orginal paging
                                        (0225) ;      mode and flag status.
                                        (0226) 
                                        (0227) .ENDSECTION
                                        (0228) 
                                        (0229) 
                                        (0230) ;-----------------------------------------------------------------------------
                                        (0231) ;  FUNCTION NAME: E2PROM_1_E2Read
                                        (0232) ;
                                        (0233) ;  DESCRIPTION:
                                        (0234) ;     Reads the specified E2PROM data at offset=wAddr for wByteCount bytes  and
                                        (0235) ;     places the data read into the RAM buffer pbDataDest.
                                        (0236) ;
                                        (0237) ;     Prototype in C is:
                                        (0238) ;
                                        (0239) ;        #pragma  fastcall16 E2Read
                                        (0240) ;        void E2PROM_1_E2Read( WORD wAddr, BYTE * pbDataDest, WORD wByteCount );
                                        (0241) ;
                                        (0242) ;     Easiest method to call from assembly is as follows:
                                        (0243) ;           push  X                             ; only if X needs to be preserved
                                        (0244) ;           mov   X, SP
                                        (0245) ;           push  <wByteCount>
                                        (0246) ;           push  <wByteCount+1>
                                        (0247) ;           push  <pbDataDest
                                        (0248) ;           push  <pbDataDest+1>
                                        (0249) ;           push  <wAddr>
                                        (0250) ;           push  <wAddr+1>
                                        (0251) ;           call  E2PROM_1_E2Read
                                        (0252) ;           add   SP, -E2_RD_ARG_STACK_FRAME_SIZE
                                        (0253) ;           pop   X                             ; restore only if X needs to be preserved
                                        (0254) ;
                                        (0255) ;           where <> refers to any addressing mode or number of instructions to
                                        (0256) ;              place the referenced data on the stack frame.
                                        (0257) ;
                                        (0258) ;     Other method is to create a stack frame using the defined equates and
                                        (0259) ;     load them into the stack frame using [X+E2_WR_ARG_*] offset addressing mode.
                                        (0260) ;     If this method is used in the LMM (large memory model) then make sure
                                        (0261) ;     that the index page tracks the stack page or is set to the same page
                                        (0262) ;     as the stack page.
                                        (0263) ;
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;
                                        (0266) ;  ARGUMENTS:
                                        (0267) ;     wAddr:         WORD   - relative OFFSET in defined E2PROM to read data
                                        (0268) ;     pbDataDest:    BYTE * - pointer to the RAM buffer to place read data
                                        (0269) ;     wByteCount:    WORD   - number of bytes to read from E2PROM
                                        (0270) ;
                                        (0271) ;  RETURNS:       none
                                        (0272) ;
                                        (0273) ;  SIDE EFFECTS:
                                        (0274) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED 
                                        (0275) ;    AS MAY THE PAGE POINTER REGISTERS! 
                                        (0276) ;    
                                        (0277) ;    In the large memory model currently only the page
                                        (0278) ;    pointer registers listed below are modified.  This does
                                        (0279) ;    not guarantee that in future implementations of this
                                        (0280) ;    function other page pointer registers will not be
                                        (0281) ;    modified.
                                        (0282) ;    
                                        (0283) ;    Page Pointer Registers Modified:
                                        (0284) ;          CUR_PP
                                        (0285) ;          MVW_PP 
                                        (0286) ;
                                        (0287) ;-----------------------------------------------------------------------------
                                        (0288) .SECTION
                                        (0289) 
                                        (0290)  E2PROM_1_E2Read::
                                        (0291) _E2PROM_1_E2Read::
                                        (0292) ;  RAM_PROLOGUE RAM_PROXY_CLASS_NULL RAM_USE_CLASS_4  -->  implemented in E2PROMLIB  
                                        (0293) ;  Save the Flag register to perserve the native paging mode
                                        (0294) IF (CPU_F)     ;only save CPU flag if NOT CY8C25/26xxx PSoC devices
0D55: 5D F7    MOV   A,REG[0xF7]        (0295)    mov   A, reg[CPU_F]                            
0D57: 08       PUSH  A                  (0296)    push  A
                                        (0297) ENDIF
                                        (0298) 
                                        (0299) ;  Load the Block ID into X and A
0D58: 50 00    MOV   A,0x0              (0300)    mov   A, >E2PROM_1_START_BLOCK       
0D5A: 5C       MOV   X,A                (0301)    mov   X, A
0D5B: 50 FF    MOV   A,0xFF             (0302)    mov   A, <E2PROM_1_START_BLOCK
0D5D: 7D 10 22 LJMP  _E2Read            (0303)    ljmp  E2Read
                                        (0304) 
                                        (0305) ; NOTE that return will be done by a RETI instruction to restore the orginal paging
                                        (0306) ;      mode and flag status.
                                        (0307) 
                                        (0308) 
                                        (0309) .ENDSECTION
                                        (0310) 
                                        (0311) ; End of File
FILE: lib\dac8_1.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DAC8_1.asm
                                        (0004) ;;   Version: 2.2, Updated on 2015/3/4 at 22:25:12
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DAC8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "DAC8_1.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DAC8_1_Start
                                        (0030) export _DAC8_1_Start
                                        (0031) export  DAC8_1_SetPower
                                        (0032) export _DAC8_1_SetPower
                                        (0033) 
                                        (0034) export  DAC8_1_WriteBlind
                                        (0035) export _DAC8_1_WriteBlind
                                        (0036) export  DAC8_1_WriteBlind2B
                                        (0037) export _DAC8_1_WriteBlind2B
                                        (0038) 
                                        (0039) export  DAC8_1_WriteStall
                                        (0040) export _DAC8_1_WriteStall
                                        (0041) export  DAC8_1_WriteStall2B
                                        (0042) export _DAC8_1_WriteStall2B
                                        (0043) 
                                        (0044) export  DAC8_1_Stop
                                        (0045) export _DAC8_1_Stop
                                        (0046) 
                                        (0047) ;-----------------------------------------------
                                        (0048) ;  EQUATES
                                        (0049) ;-----------------------------------------------
                                        (0050) 
                                        (0051) cOFFSET:   equ 127              ; Conversion term for offset binary to 2's C
                                        (0052) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0053) bSPLITMASK:equ 03h              ; Marks split between MSB and LSB bits
                                        (0054) bSMMASK:   equ 3Fh              ; Sign and Magnitude bits mask
                                        (0055) bSIGNMASK: equ 20h              ; Sign bit mask
                                        (0056) 
                                        (0057)     AREA UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: DAC8_1_Start
                                        (0062) ;  FUNCTION NAME: DAC8_1_SetPower
                                        (0063) ;
                                        (0064) ;  DESCRIPTION:
                                        (0065) ;    Applies power setting to the module's analog PSoC blocks.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:
                                        (0070) ;    A contains the power setting 0=Off, 1=Low, 2=Med, 3=High.
                                        (0071) ;
                                        (0072) ;  RETURNS: none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  DAC8_1_Start:
                                        (0082) _DAC8_1_Start:
                                        (0083)  DAC8_1_SetPower:
                                        (0084) _DAC8_1_SetPower:
                                        (0085)     RAM_PROLOGUE RAM_USE_CLASS_2
0D60: 21 03    AND   A,0x3              (0086)     and   A, bPWRMASK       ; trim input to bits of interest
0D62: 4F       MOV   X,SP               (0087)     mov   X, SP             ; Set stack frame pointer
0D63: 08       PUSH  A                  (0088)     push  A
                                        (0089)     ;; read CR3 registers, modify power bits & write back
0D64: 5D 97    MOV   A,REG[0x97]        (0090)     mov   A, reg[DAC8_1_MSB_CR3]
0D66: 21 FC    AND   A,0xFC             (0091)     and   a, ~bPWRMASK      ; clear old setting
0D68: 2B 00    OR    A,[X+0]            (0092)     or    A, [X]            ; set power in MSB register image
0D6A: 60 97    MOV   REG[0x97],A        (0093)     mov   reg[DAC8_1_MSB_CR3], A
0D6C: 5D 93    MOV   A,REG[0x93]        (0094)     mov   A, reg[DAC8_1_LSB_CR3]
0D6E: 21 FC    AND   A,0xFC             (0095)     and   a, ~bPWRMASK      ; clear old setting
0D70: 2B 00    OR    A,[X+0]            (0096)     or    A, [X]            ; set power in LSB register image
0D72: 60 93    MOV   REG[0x93],A        (0097)     mov   reg[DAC8_1_LSB_CR3], A
0D74: 18       POP   A                  (0098)     pop   A
                                        (0099)     RAM_EPILOGUE RAM_USE_CLASS_2
0D75: 7F       RET                      (0100)     ret
                                        (0101) .ENDSECTION
                                        (0102) 
                                        (0103) .SECTION
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: DAC8_1_WriteBlind
                                        (0106) ;  FUNCTION NAME: DAC8_1_WriteBlind2B
                                        (0107) ;
                                        (0108) ;  DESCRIPTION:
                                        (0109) ;    Modify the DAC's update value without worrying about the clocks
                                        (0110) ;    Lowest overhead, but may cause glitches on the output.
                                        (0111) ;
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;
                                        (0114) ;  ARGUMENTS:
                                        (0115) ;    A contains the update value if data format is offset binary or
                                        (0116) ;    2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0117) ;    A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0118) ;    inverted sign.
                                        (0119) ;
                                        (0120) ;  RETURNS: none
                                        (0121) ;
                                        (0122) ;  SIDE EFFECTS:
                                        (0123) ;    The A and X registers may be modified by this or future implementations
                                        (0124) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0125) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0126) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0127) ;    functions.
                                        (0128) ;
                                        (0129)  DAC8_1_WriteBlind:
                                        (0130) _DAC8_1_WriteBlind:
                                        (0131)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0132)   IF DAC8_1_OFFSETBINARY
                                        (0133)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0134)     ;; Following converts it to 2's complement:
0D76: 11 7F    SUB   A,0x7F             (0135)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0136)   ENDIF
                                        (0137)   IF DAC8_1_OFFSETBINARY | DAC8_1_TWOSCOMPLEMENT
0D78: 4F       MOV   X,SP               (0138)     mov   X, SP
0D79: 08       PUSH  A                  (0139)     push  A                     ; Preserve the sign
0D7A: 39 80    CMP   A,0x80             (0140)     cmp   A, 80h                ; negative (or zero)?
0D7C: C0 05    JC    0x0D82             (0141)     jc    BlindAdjustCycles     ;   no: just go on
0D7E: 73       CPL   A                  (0142)     cpl   A                     ;  yes: take the 2's Complement
0D7F: 74       INC   A                  (0143)     inc   A
0D80: 80 05    JMP   0x0D86             (0144)     jmp   BlindMagSet
                                        (0145) BlindAdjustCycles:
0D82: 73       CPL   A                  (0146)     cpl   A                     ; these 3 instructions implement a 13-cycle
0D83: 73       CPL   A                  (0147)     cpl   A                     ;   NOP so it takes the same amount of time
0D84: 80 01    JMP   0x0D86             (0148)     jmp   BlindMagSet           ;   for both positive and negative numbers.
                                        (0149) BlindMagSet:
0D86: 08       PUSH  A                  (0150)     push  A                     ; preserve LSB magnitude bits
0D87: 27 01 03 AND   [X+1],0x3          (0151)     and   [X+1], bSPLITMASK
0D8A: 27 00 80 AND   [X+0],0x80         (0152)     and   [X], 80h              ; isolate the sign
0D8D: 2B 00    OR    A,[X+0]            (0153)     or    A, [X]                ; insert in MSB
0D8F: 67       ASR   A                  (0154)     asr   A                     ; justify MSB sign & mag
0D90: 67       ASR   A                  (0155)     asr   A
0D91: 21 3F    AND   A,0x3F             (0156)     and   A, bSMMASK            ; clear sign extension bits
                                        (0157)                                 ; Set FCap and ClockPhase bits for MSB
0D93: 54 00    MOV   [X+0],A            (0158)     mov   [X], A                ; stash the MSB
0D95: 21 20    AND   A,0x20             (0159)     and   A, bSIGNMASK          ; isolate the sign
0D97: 31 20    XOR   A,0x20             (0160)     xor   A, bSIGNMASK          ;   and invert for LSB
0D99: 66 01    ASL   [X+1]              (0161)     asl   [X+1]                 ; justify LSB magnitude
0D9B: 66 01    ASL   [X+1]              (0162)     asl   [X+1]
0D9D: 66 01    ASL   [X+1]              (0163)     asl   [X+1]
0D9F: 2B 01    OR    A,[X+1]            (0164)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0165)                                 ; Set FCap and ClockPhase bits for LSB
0DA1: 20       POP   X                  (0166)     pop   X                     ; Put MSB in X
0DA2: 20       POP   X                  (0167)     pop   X
                                        (0168)   ENDIF
0DA3: 29 80    OR    A,0x80             (0169)     or    A, DAC8_1_CR0_HIBITS
0DA5: 4B       SWAP  A,X                (0170)     swap  A, X
0DA6: 29 80    OR    A,0x80             (0171)     or    A, DAC8_1_CR0_HIBITS
0DA8: 60 94    MOV   REG[0x94],A        (0172)     mov   reg[DAC8_1_MSB_CR0], A
0DAA: 5B       MOV   A,X                (0173)     mov   A, X
0DAB: 60 90    MOV   REG[0x90],A        (0174)     mov   reg[DAC8_1_LSB_CR0], A
                                        (0175)     RAM_EPILOGUE RAM_USE_CLASS_2
0DAD: 7F       RET                      (0176)     ret
                                        (0177) 
                                        (0178) 
                                        (0179)  DAC8_1_WriteBlind2B:
                                        (0180) _DAC8_1_WriteBlind2B:
                                        (0181)     RAM_PROLOGUE RAM_USE_CLASS_1
0DAE: 29 80    OR    A,0x80             (0182)     or    A, DAC8_1_CR0_HIBITS
0DB0: 4B       SWAP  A,X                (0183)     swap  A, X
0DB1: 29 80    OR    A,0x80             (0184)     or    A, DAC8_1_CR0_HIBITS
0DB3: 60 94    MOV   REG[0x94],A        (0185)     mov   reg[DAC8_1_MSB_CR0], A
0DB5: 5B       MOV   A,X                (0186)     mov   A, X
0DB6: 60 90    MOV   REG[0x90],A        (0187)     mov   reg[DAC8_1_LSB_CR0], A
                                        (0188)     RAM_EPILOGUE RAM_USE_CLASS_1
0DB8: 7F       RET                      (0189)     ret
                                        (0190) .ENDSECTION
                                        (0191) 
                                        (0192) .SECTION
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;  FUNCTION NAME: DAC8_1_WriteStall
                                        (0195) ;  FUNCTION NAME: DAC8_1_WriteStall2B
                                        (0196) ;
                                        (0197) ;  DESCRIPTION:
                                        (0198) ;    Modify the DAC's update value, stalling the CPU if necessary.
                                        (0199) ;    This routine should be used with faster analog clocks or when the
                                        (0200) ;    effect of prolonging interrupt latencies can be safely tolerated.
                                        (0201) ;
                                        (0202) ;-----------------------------------------------------------------------------
                                        (0203) ;
                                        (0204) ;  ARGUMENTS:
                                        (0205) ;   A contains the update value if data format is offset binary or
                                        (0206) ;   2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0207) ;   A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0208) ;   inverted sign.
                                        (0209) ;
                                        (0210) ;  RETURNS: none
                                        (0211) ;
                                        (0212) ;  SIDE EFFECTS:
                                        (0213) ;
                                        (0214) ;  THEORY of OPERATION or PROCEDURE:
                                        (0215) ;    The A and X registers may be modified by this or future implementations
                                        (0216) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0217) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0218) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0219) ;    functions.
                                        (0220) ;
                                        (0221)  DAC8_1_WriteStall:
                                        (0222) _DAC8_1_WriteStall:
                                        (0223)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0224)   IF DAC8_1_OFFSETBINARY
                                        (0225)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0226)     ;; Following converts it to 2's complement:
0DB9: 11 7F    SUB   A,0x7F             (0227)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0228)   ENDIF
                                        (0229)   IF DAC8_1_OFFSETBINARY | DAC8_1_TWOSCOMPLEMENT
0DBB: 4F       MOV   X,SP               (0230)     mov   X, SP
0DBC: 08       PUSH  A                  (0231)     push  A                     ; Preserve the sign
0DBD: 39 80    CMP   A,0x80             (0232)     cmp   A, 80h                ; negative (or zero)?
0DBF: C0 05    JC    0x0DC5             (0233)     jc    StallAdjustCycles     ;   no: just go on
0DC1: 73       CPL   A                  (0234)     cpl   A                     ;  yes: take the 2's Complement
0DC2: 74       INC   A                  (0235)     inc   A
0DC3: 80 05    JMP   0x0DC9             (0236)     jmp   StallMagSet
                                        (0237) StallAdjustCycles:
0DC5: 73       CPL   A                  (0238)     cpl   A                     ; these 3 instructions implement a 13-cycle
0DC6: 73       CPL   A                  (0239)     cpl   A                     ;   NOP so it takes the same amount of time
0DC7: 80 01    JMP   0x0DC9             (0240)     jmp   StallMagSet           ;   for both positive and negative numbers.
                                        (0241) StallMagSet:
0DC9: 08       PUSH  A                  (0242)     push  A                     ; preserve LSB magnitude bits
0DCA: 27 01 03 AND   [X+1],0x3          (0243)     and   [X+1], bSPLITMASK
0DCD: 27 00 80 AND   [X+0],0x80         (0244)     and   [X], 80h              ; isolate the sign
0DD0: 2B 00    OR    A,[X+0]            (0245)     or    A, [X]                ; insert in MSB
0DD2: 67       ASR   A                  (0246)     asr   A                     ; justify MSB sign & mag
0DD3: 67       ASR   A                  (0247)     asr   A
0DD4: 21 3F    AND   A,0x3F             (0248)     and   A, bSMMASK            ; clear sign extension bits
                                        (0249)                                 ; Set FCap and ClockPhase bits for MSB
0DD6: 54 00    MOV   [X+0],A            (0250)     mov   [X], A                ; stash the MSB
0DD8: 21 20    AND   A,0x20             (0251)     and   A, bSIGNMASK          ; isolate the sign
0DDA: 31 20    XOR   A,0x20             (0252)     xor   A, bSIGNMASK          ;   and invert for LSB
0DDC: 66 01    ASL   [X+1]              (0253)     asl   [X+1]                 ; justify LSB magnitude
0DDE: 66 01    ASL   [X+1]              (0254)     asl   [X+1]
0DE0: 66 01    ASL   [X+1]              (0255)     asl   [X+1]
0DE2: 2B 01    OR    A,[X+1]            (0256)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0257)                                 ; Set FCap and ClockPhase bits for LSB
0DE4: 20       POP   X                  (0258)     pop   X                     ; Put MSB in X
0DE5: 20       POP   X                  (0259)     pop   X
                                        (0260)   ENDIF
0DE6: 29 80    OR    A,0x80             (0261)     or    A, DAC8_1_CR0_HIBITS
0DE8: 4B       SWAP  A,X                (0262)     swap  A, X
0DE9: 29 80    OR    A,0x80             (0263)     or    A, DAC8_1_CR0_HIBITS
0DEB: 43 65 01 OR    REG[0x65],0x1      
                                        (0264) 
                                        (0265)     M8C_Stall
0DEE: 60 94    MOV   REG[0x94],A        (0266)     mov   reg[DAC8_1_MSB_CR0], A
0DF0: 41 65 FE AND   REG[0x65],0xFE     
                                        (0267)     M8C_Unstall
0DF3: 5B       MOV   A,X                (0268)     mov   A, X
0DF4: 60 90    MOV   REG[0x90],A        (0269)     mov   reg[DAC8_1_LSB_CR0], A
                                        (0270)     RAM_EPILOGUE RAM_USE_CLASS_2
0DF6: 7F       RET                      (0271)     ret
                                        (0272) 
                                        (0273)  DAC8_1_WriteStall2B:
                                        (0274) _DAC8_1_WriteStall2B:
                                        (0275)     RAM_PROLOGUE RAM_USE_CLASS_1
0DF7: 29 80    OR    A,0x80             (0276)     or    A, DAC8_1_CR0_HIBITS
0DF9: 4B       SWAP  A,X                (0277)     swap  A, X
0DFA: 29 80    OR    A,0x80             (0278)     or    A, DAC8_1_CR0_HIBITS
0DFC: 43 65 01 OR    REG[0x65],0x1      
                                        (0279) 
                                        (0280)     M8C_Stall
0DFF: 60 94    MOV   REG[0x94],A        (0281)     mov   reg[DAC8_1_MSB_CR0], A
0E01: 41 65 FE AND   REG[0x65],0xFE     
                                        (0282)     M8C_Unstall
0E04: 5B       MOV   A,X                (0283)     mov   A, X
0E05: 60 90    MOV   REG[0x90],A        (0284)     mov   reg[DAC8_1_LSB_CR0], A
                                        (0285)     RAM_EPILOGUE RAM_USE_CLASS_1
0E07: 7F       RET                      (0286)     ret
                                        (0287) .ENDSECTION
                                        (0288) 
                                        (0289) .SECTION
                                        (0290) ;-----------------------------------------------------------------------------
                                        (0291) ;  FUNCTION NAME: DAC8_1_Stop
                                        (0292) ;
                                        (0293) ;  DESCRIPTION:
                                        (0294) ;    Cuts power to the user module.
                                        (0295) ;
                                        (0296) ;-----------------------------------------------------------------------------
                                        (0297) ;
                                        (0298) ;  ARGUMENTS: none
                                        (0299) ;
                                        (0300) ;  RETURNS: none
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;
                                        (0309)  DAC8_1_Stop:
                                        (0310) _DAC8_1_Stop:
                                        (0311)     RAM_PROLOGUE RAM_USE_CLASS_1
0E08: 41 97 FC AND   REG[0x97],0xFC     (0312)     and  reg[DAC8_1_MSB_CR3], ~bPWRMASK
0E0B: 41 93 FC AND   REG[0x93],0xFC     (0313)     and  reg[DAC8_1_LSB_CR3], ~bPWRMASK
                                        (0314)     RAM_EPILOGUE RAM_USE_CLASS_1
0E0E: 7F       RET                      (0315)     ret
                                        (0316) .ENDSECTION
                                        (0317) ; End of File DAC8_1.asm
FILE: lib\comp_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  COMP_1INT.asm
                                        (0004) ;;  Version: 2.20, Updated on 2015/3/4 at 22:23:39
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: COMP_1 User Module ISR implementation file.
                                        (0008) ;;*****************************************************************************
                                        (0009) ;;*****************************************************************************
                                        (0010) 
                                        (0011) include "m8c.inc"
                                        (0012) include "memory.inc"
                                        (0013) include "COMP_1.inc"
                                        (0014) 
                                        (0015) ;-----------------------------------------------
                                        (0016) ;  Global Symbols
                                        (0017) ;-----------------------------------------------
                                        (0018) 
                                        (0019) export _COMP_1_ISR
                                        (0020) 
                                        (0021) 
                                        (0022) AREA InterruptRAM (RAM,REL,CON)
                                        (0023) 
                                        (0024) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0025) ;---------------------------------------------------
                                        (0026) ; Insert your custom declarations below this banner
                                        (0027) ;---------------------------------------------------
                                        (0028) 
                                        (0029) ;------------------------
                                        (0030) ; Includes
                                        (0031) ;------------------------
                                        (0032) 
                                        (0033) 
                                        (0034) ;------------------------
                                        (0035) ;  Constant Definitions
                                        (0036) ;------------------------
                                        (0037) 
                                        (0038) 
                                        (0039) ;------------------------
                                        (0040) ; Variable Allocation
                                        (0041) ;------------------------
                                        (0042) 
                                        (0043) 
                                        (0044) ;---------------------------------------------------
                                        (0045) ; Insert your custom declarations above this banner
                                        (0046) ;---------------------------------------------------
                                        (0047) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: COMP_1_ISR
                                        (0054) ;
                                        (0055) ;  DESCRIPTION:
                                        (0056) ;  Interrupt Service Routine for the Analog Column.  If the interrupt is 
                                        (0057) ;  enabled and the comparator trips the code execution will vector to this
                                        (0058) ;  ISR.  
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) 
                                        (0061) _COMP_1_ISR:
                                        (0062) 
                                        (0063)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0064)    ;---------------------------------------------------
                                        (0065)    ; Insert your custom assembly code below this banner
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ;   NOTE: interrupt service routines must preserve
                                        (0068)    ;   the values of the A and X CPU registers.
                                        (0069)    
                                        (0070)    ;---------------------------------------------------
                                        (0071)    ; Insert your custom assembly code above this banner
                                        (0072)    ;---------------------------------------------------
                                        (0073)    
                                        (0074)    ;---------------------------------------------------
                                        (0075)    ; Insert a lcall to a C function below this banner
                                        (0076)    ; and un-comment the lines between these banners
                                        (0077)    ;---------------------------------------------------
                                        (0078)    
                                        (0079)    ;PRESERVE_CPU_CONTEXT
                                        (0080)    ;lcall _My_C_Function
                                        (0081)    ;RESTORE_CPU_CONTEXT
                                        (0082)    
                                        (0083)    ;---------------------------------------------------
                                        (0084)    ; Insert a lcall to a C function above this banner
                                        (0085)    ; and un-comment the lines between these banners
                                        (0086)    ;---------------------------------------------------
                                        (0087)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0088) 
0E0F: 7E       RETI                     (0089)    reti
                                        (0090)    
                                        (0091)    
                                        (0092) ; End of File COMP_1INT.asm
FILE: lib\adcinc_1int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC_1INT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2015/3/4 at 22:21:26
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC_1.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_1_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_1_iResult
                                        (0026) export  ADCINC_1_iResult
                                        (0027) export _ADCINC_1_fStatus
                                        (0028) export  ADCINC_1_fStatus
                                        (0029) export _ADCINC_1_bState
                                        (0030) export  ADCINC_1_bState
                                        (0031) export _ADCINC_1_fMode
                                        (0032) export  ADCINC_1_fMode
                                        (0033) export _ADCINC_1_bNumSamples
                                        (0034) export  ADCINC_1_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_1_iResult:
                                        (0041) _ADCINC_1_iResult:                         BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_1_fStatus:
                                        (0044) _ADCINC_1_fStatus:                         BLK  1 ;ADC Status
                                        (0045)  ADCINC_1_bState:
                                        (0046) _ADCINC_1_bState:                          BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_1_fMode:
                                        (0048) _ADCINC_1_fMode:                           BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_1_bNumSamples:
                                        (0050) _ADCINC_1_bNumSamples:                     BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_1_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_1_ADConversion_ISR:
0E10: 7A 16    DEC   [0x16]             (0093)     dec  [ADCINC_1_bState]
                                        (0094) if1:
0E12: C0 02    JC    0x0E15             (0095)     jc endif1 ; no underflow
0E14: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
0E15: 3C 17 00 CMP   [0x17],0x0         (0098)     cmp [ADCINC_1_fMode],0
                                        (0099) if2: 
0E18: B0 12    JNZ   0x0E2B             (0100)     jnz endif2  ;leaving reset mode
0E1A: 08       PUSH  A                  (0101)     push A                            ;read decimator
0E1B: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
0E1D: 53 14    MOV   [0x14],A           (0103)     mov  [iTemp + LowByte],A
0E1F: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
0E21: 53 13    MOV   [0x13],A           (0105)     mov  [iTemp + HighByte], A
0E23: 18       POP   A                  (0106)     pop A
0E24: 55 17 01 MOV   [0x17],0x1         (0107)     mov [ADCINC_1_fMode],1
0E27: 55 16 03 MOV   [0x16],0x3         (0108)     mov [ADCINC_1_bState],((1<<(ADCINC_1_bNUMBITS- 6))-1)
0E2A: 7E       RETI                     (0109)     reti
0E2B: 43 8A 20 OR    REG[0x8A],0x20     
0E2E: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_1_RESET_INTEGRATOR_M
0E31: 08       PUSH  A                  (0113)     push A
0E32: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
0E34: 12 14    SUB   A,[0x14]           (0115)     sub  A,[iTemp + LowByte]
0E36: 53 14    MOV   [0x14],A           (0116)     mov  [iTemp +LowByte],A
0E38: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
0E3A: 1A 13    SBB   A,[0x13]           (0118)     sbb  A,[iTemp + HighByte]
0E3C: 67       ASR   A                  (0119)     asr  A
0E3D: 6E 14    RRC   [0x14]             (0120)     rrc  [iTemp + LowByte]
                                        (0121) 
                                        (0122)        ;Covert to Unipolar
                                        (0123) IF  ADCINC_1_9_OR_MORE_BITS
                                        (0124)     add  A, (1<<(ADCINC_1_bNUMBITS - 9))
                                        (0125) ELSE
0E3F: 06 14 80 ADD   [0x14],0x80        (0126)     add [iTemp + LowByte], (1<<(ADCINC_1_bNUMBITS - 1)) ;work on lower Byte
0E42: 09 00    ADC   A,0x0              (0127)     adc A,0 
                                        (0128) ENDIF
                                        (0129)        ;check for overflow
                                        (0130) IF     ADCINC_1_8_OR_MORE_BITS
0E44: 39 01    CMP   A,0x1              (0131)     cmp A,(1<<(ADCINC_1_bNUMBITS - 8))
                                        (0132) if3: 
0E46: B0 05    JNZ   0x0E4C             (0133)     jnz endif3 ;overflow
0E48: 78       DEC   A                  (0134)     dec A
0E49: 55 14 FF MOV   [0x14],0xFF        (0135)     mov [iTemp + LowByte],ffh
                                        (0136) endif3:
                                        (0137) ELSE
                                        (0138)     cmp [iTemp + LowByte],(1<<(ADCINC_1_bNUMBITS))
                                        (0139) if4: 
                                        (0140)     jnz endif4 ;overflow
                                        (0141)     dec [iTemp + LowByte]
                                        (0142) endif4:
                                        (0143) ENDIF
                                        (0144) IF ADCINC_1_SIGNED_DATA
                                        (0145) IF ADCINC_1_9_OR_MORE_BITS
                                        (0146)     sub A,(1<<(ADCINC_1_bNUMBITS - 9))
                                        (0147) ELSE
                                        (0148)     sub [iTemp +LowByte],(1<<(ADCINC_1_bNUMBITS - 1))
                                        (0149)     sbb A,0
                                        (0150) ENDIF
                                        (0151) ENDIF
0E4C: 5F 12 14 MOV   [0x12],[0x14]      (0152)     mov  [ADCINC_1_iResult + LowByte],[iTemp +LowByte]
0E4F: 53 11    MOV   [0x11],A           (0153)     mov  [ADCINC_1_iResult + HighByte],A
0E51: 55 15 01 MOV   [0x15],0x1         (0154)     mov  [ADCINC_1_fStatus],1
                                        (0155) ConversionReady:
                                        (0156)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0157)     ;---------------------------------------------------
                                        (0158)     ; Insert your custom code below this banner
                                        (0159)     ;---------------------------------------------------
                                        (0160)     ;  Sample data is now in iResult
                                        (0161)     ;
                                        (0162)     ;  NOTE: This interrupt service routine has already
                                        (0163)     ;  preserved the values of the A CPU register. If
                                        (0164)     ;  you need to use the X register you must preserve
                                        (0165)     ;  its value and restore it before the return from
                                        (0166)     ;  interrupt.
                                        (0167)     ;---------------------------------------------------
                                        (0168)     ; Insert your custom code above this banner
                                        (0169)     ;---------------------------------------------------
                                        (0170)     ;@PSoC_UserCode_END@ (Do not change this line.)
0E54: 18       POP   A                  (0171)     pop A
0E55: 3C 18 00 CMP   [0x18],0x0         (0172)     cmp [ADCINC_1_bNumSamples],0
                                        (0173) if5: 
0E58: B0 0E    JNZ   0x0E67             (0174)     jnz endif5 ; Number of samples is zero
0E5A: 55 17 00 MOV   [0x17],0x0         (0175)     mov [ADCINC_1_fMode],0
0E5D: 55 16 00 MOV   [0x16],0x0         (0176)     mov [ADCINC_1_bState],0
0E60: 41 8B EF AND   REG[0x8B],0xEF     
0E63: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0177)     ADCINC_1_ENABLE_INTEGRATOR_M
0E66: 7E       RETI                     (0178)     reti       
                                        (0179) endif5:
0E67: 7A 18    DEC   [0x18]             (0180)     dec [ADCINC_1_bNumSamples]
                                        (0181) if6:
0E69: A0 0E    JZ    0x0E78             (0182)     jz endif6  ; count not zero
0E6B: 55 17 00 MOV   [0x17],0x0         (0183)     mov [ADCINC_1_fMode],0
0E6E: 55 16 00 MOV   [0x16],0x0         (0184)     mov [ADCINC_1_bState],0
0E71: 41 8B EF AND   REG[0x8B],0xEF     
0E74: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0185)     ADCINC_1_ENABLE_INTEGRATOR_M
0E77: 7E       RETI                     (0186)     reti       
0E78: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0187) endif6:
                                        (0188)     ;All samples done
                                        (0189)     ADCINC_1_STOPADC_M
0E7B: 7E       RETI                     (0190)  reti 
FILE: lib\adcinc_1.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC_1.asm
                                        (0004) ;;   Version: 1.1, Updated on 2006/02/03 at 09:10:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC_1.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_1_Start
                                        (0031) export _ADCINC_1_Start
                                        (0032) export  ADCINC_1_SetPower
                                        (0033) export _ADCINC_1_SetPower
                                        (0034) export  ADCINC_1_Stop
                                        (0035) export _ADCINC_1_Stop
                                        (0036) export  ADCINC_1_GetSamples
                                        (0037) export _ADCINC_1_GetSamples
                                        (0038) export  ADCINC_1_StopADC
                                        (0039) export _ADCINC_1_StopADC
                                        (0040) export  ADCINC_1_fIsDataAvailable
                                        (0041) export _ADCINC_1_fIsDataAvailable
                                        (0042) export  ADCINC_1_iClearFlagGetData
                                        (0043) export _ADCINC_1_iClearFlagGetData
                                        (0044) export  ADCINC_1_wClearFlagGetData
                                        (0045) export _ADCINC_1_wClearFlagGetData
                                        (0046) export  ADCINC_1_cClearFlagGetData
                                        (0047) export _ADCINC_1_cClearFlagGetData
                                        (0048) export  ADCINC_1_bClearFlagGetData
                                        (0049) export _ADCINC_1_bClearFlagGetData
                                        (0050) export  ADCINC_1_iGetData
                                        (0051) export _ADCINC_1_iGetData
                                        (0052) export  ADCINC_1_wGetData
                                        (0053) export _ADCINC_1_wGetData
                                        (0054) export  ADCINC_1_bGetData
                                        (0055) export _ADCINC_1_bGetData
                                        (0056) export  ADCINC_1_cGetData
                                        (0057) export _ADCINC_1_cGetData
                                        (0058) export  ADCINC_1_fClearFlag
                                        (0059) export _ADCINC_1_fClearFlag
                                        (0060) export  ADCINC_1_WritePulseWidth
                                        (0061) export _ADCINC_1_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_1_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  When necessary, it is the calling function's
                                        (0090) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0091) ;    functions.
                                        (0092) ;
                                        (0093)  ADCINC_1_Start:
                                        (0094) _ADCINC_1_Start:
                                        (0095)    RAM_PROLOGUE RAM_USE_CLASS_1
0E7C: 43 E7 C0 OR    REG[0xE7],0xC0     (0096)    or    reg[DEC_CR1],c0h
0E7F: 90 0D    CALL  _ADCINC_1_SetPower (0097)    call  ADCINC_1_SetPower
0E81: 43 8A 20 OR    REG[0x8A],0x20     
0E84: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0098)    ADCINC_1_RESET_INTEGRATOR_M
0E87: 62 25 FF MOV   REG[0x25],0xFF     (0099)    mov   reg[ADCINC_1_PWMdr1],ffh
0E8A: 43 27 01 OR    REG[0x27],0x1      (0100)    or    reg[ADCINC_1_PWMcr0],01h                    ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0E8D: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_1_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  When necessary, it is the calling function's
                                        (0118) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0119) ;    functions.
                                        (0120) ;
                                        (0121)  ADCINC_1_SetPower:
                                        (0122) _ADCINC_1_SetPower:
                                        (0123)    RAM_PROLOGUE RAM_USE_CLASS_2
0E8E: 4F       MOV   X,SP               (0124)    mov  X,SP                                     ; Set up Stack frame
0E8F: 21 03    AND   A,0x3              (0125)    and  A,03h                                    ; Ensure value is legal
0E91: 08       PUSH  A                  (0126)    push A
0E92: 5D 8B    MOV   A,REG[0x8B]        (0127)    mov  A,reg[ADCINC_1_AtoDcr3]                  ; First SC block:
0E94: 21 FC    AND   A,0xFC             (0128)    and  A,~03h                                   ;   clear power bits to zero
0E96: 2B 00    OR    A,[X+0]            (0129)    or   A,[ X ]                                  ;   establish new value
0E98: 60 8B    MOV   REG[0x8B],A        (0130)    mov  reg[ADCINC_1_AtoDcr3],A                  ;   change the actual setting
0E9A: 18       POP   A                  (0131)    pop  A
                                        (0132)    RAM_EPILOGUE RAM_USE_CLASS_2
0E9B: 7F       RET                      (0133)    ret
0E9C: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0134) .ENDSECTION
                                        (0135) 
                                        (0136) .SECTION
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;  FUNCTION NAME: ADCINC_1_Stop
                                        (0139) ;
                                        (0140) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0141) ;                 and turns off PWM
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:     None.
                                        (0145) ;  RETURNS:       Nothing.
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  When necessary, it is the calling function's
                                        (0149) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0150) ;    functions.
                                        (0151) ;
                                        (0152)  ADCINC_1_Stop:
                                        (0153) _ADCINC_1_Stop:
                                        (0154)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0155)    ADCINC_1_STOPADC_M
0E9F: 41 8B FC AND   REG[0x8B],0xFC     (0156)    and  reg[ADCINC_1_AtoDcr3], ~03h
0EA2: 41 27 FE AND   REG[0x27],0xFE     (0157)    and  reg[ADCINC_1_PWMcr0], ~01h ; stop PWM
                                        (0158)    RAM_EPILOGUE RAM_USE_CLASS_1
0EA5: 7F       RET                      (0159)    ret
0EA6: 41 8B EF AND   REG[0x8B],0xEF     
0EA9: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: ADCINC_1_GetSamples
                                        (0166) ;
                                        (0167) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) ;  ARGUMENTS:    A register contain number of samples
                                        (0171) ;  RETURNS:      Nothing.
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    The A and X registers may be modified by this or future implementations
                                        (0174) ;    of this function.  When necessary, it is the calling function's
                                        (0175) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0176) ;    functions.
                                        (0177) ;          
                                        (0178)  ADCINC_1_GetSamples:
                                        (0179) _ADCINC_1_GetSamples:
                                        (0180)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0181)    RAM_SETPAGE_CUR >ADCINC_1_fMode
                                        (0182)    ADCINC_1_ENABLE_INTEGRATOR_M
0EAC: 55 17 00 MOV   [0x17],0x0         (0183)    mov [ADCINC_1_fMode],0
0EAF: 55 16 00 MOV   [0x16],0x0         (0184)    mov [ADCINC_1_bState],0
0EB2: 53 18    MOV   [0x18],A           (0185)    mov [ADCINC_1_bNumSamples],A
0EB4: 5D 26    MOV   A,REG[0x26]        (0186)    mov A, reg[ADCINC_1_PWMdr2]
0EB6: B0 04    JNZ   0x0EBB             (0187)    jnz  .SkipPulseWrite
0EB8: 62 26 01 MOV   REG[0x26],0x1      (0188)    mov reg[ADCINC_1_PWMdr2], 1
0EBB: 62 DB FD MOV   REG[0xDB],0xFD     
0EBE: 43 E1 02 OR    REG[0xE1],0x2      
                                        (0189) .SkipPulseWrite:
                                        (0190)    ADCINC_1_STARTADC_M  ;enable interrupt 
                                        (0191)    RAM_EPILOGUE RAM_USE_CLASS_4 
0EC1: 7F       RET                      (0192)    ret
0EC2: 41 E1 FD AND   REG[0xE1],0xFD     
0EC5: 43 8A 20 OR    REG[0x8A],0x20     
0EC8: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0193) .ENDSECTION
                                        (0194) 
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: ADCINC_1_StopADC
                                        (0199) ;
                                        (0200) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0201) ;               is disabled but the PWM output is still active.
                                        (0202) ;               Integrator is reset
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:    None.
                                        (0206) ;  RETURNS:      Nothing.
                                        (0207) ;  SIDE EFFECTS:
                                        (0208) ;    The A and X registers may be modified by this or future implementations
                                        (0209) ;    of this function.  When necessary, it is the calling function's
                                        (0210) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0211) ;    functions.
                                        (0212) ;
                                        (0213)  ADCINC_1_StopADC:
                                        (0214) _ADCINC_1_StopADC:
                                        (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0216)    ADCINC_1_STOPADC_M
                                        (0217)    ADCINC_1_RESET_INTEGRATOR_M
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_1 
0ECB: 7F       RET                      (0219)  ret
0ECC: 51 15    MOV   A,[0x15]           
                                        (0220) .ENDSECTION
                                        (0221) 
                                        (0222) 
                                        (0223) .SECTION
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  FUNCTION NAME: ADCINC_1_fIsDataAvailable
                                        (0226) ;
                                        (0227) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  ARGUMENTS:    None.
                                        (0230) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0231) ;  SIDE EFFECTS:
                                        (0232) ;    The A and X registers may be modified by this or future implementations
                                        (0233) ;    of this function.  When necessary, it is the calling function's
                                        (0234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0235) ;    functions.
                                        (0236) ;          
                                        (0237)  ADCINC_1_fIsDataAvailable:
                                        (0238) _ADCINC_1_fIsDataAvailable:
                                        (0239)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0240)    ADCINC_1_fIsDataAvailable_M   
                                        (0241)    RAM_EPILOGUE RAM_USE_CLASS_4
0ECE: 7F       RET                      (0242)    ret
0ECF: 55 15 00 MOV   [0x15],0x0         
0ED2: 58 11    MOV   X,[0x11]           
0ED4: 51 12    MOV   A,[0x12]           
0ED6: 3C 15 00 CMP   [0x15],0x0         
0ED9: BF F5    JNZ   ADCINC_1_wClearFlagGetData|ADCINC_1_iClearFlagGetData|_ADCINC_1_wClearFlagGetData|_ADCINC_1_iClearFlagGetData
                                        (0243) .ENDSECTION
                                        (0244) 
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME:  ADCINC_1_iClearFlagGetData
                                        (0249) ;                  ADCINC_1_wClearFlagGetData
                                        (0250) ;
                                        (0251) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0252) ;                  Flag is checked after trandfer to insure valid data.
                                        (0253) ;                  available. Also clears the DATA_READY flag. 
                                        (0254) ;-----------------------------------------------------------------------------
                                        (0255) ;  ARGUMENTS:    None.
                                        (0256) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0257) ;  SIDE EFFECTS:
                                        (0258) ;    The A and X registers may be modified by this or future implementations
                                        (0259) ;    of this function.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;          
                                        (0263)  ADCINC_1_iClearFlagGetData:
                                        (0264) _ADCINC_1_iClearFlagGetData:
                                        (0265)  ADCINC_1_wClearFlagGetData:
                                        (0266) _ADCINC_1_wClearFlagGetData:
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0268)    ADCINC_1_iClearFlagGetData_M   
                                        (0269)    RAM_EPILOGUE RAM_USE_CLASS_4
0EDB: 7F       RET                      (0270)    ret
0EDC: 55 15 00 MOV   [0x15],0x0         
0EDF: 51 12    MOV   A,[0x12]           
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME:  ADCINC_1_cClearFlagGetData
                                        (0277) ;                  ADCINC_1_bClearFlagGetData
                                        (0278) ;
                                        (0279) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  ARGUMENTS:    None.
                                        (0282) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0283) ;  SIDE EFFECTS:
                                        (0284) ;    The A and X registers may be modified by this or future implementations
                                        (0285) ;    of this function.  When necessary, it is the calling function's
                                        (0286) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0287) ;    functions.
                                        (0288) ;          
                                        (0289)  ADCINC_1_cClearFlagGetData:
                                        (0290) _ADCINC_1_cClearFlagGetData:
                                        (0291)  ADCINC_1_bClearFlagGetData:
                                        (0292) _ADCINC_1_bClearFlagGetData:
                                        (0293)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0294)    ADCINC_1_bClearFlagGetData_M     
                                        (0295)    RAM_EPILOGUE RAM_USE_CLASS_4
0EE1: 7F       RET                      (0296)    ret
0EE2: 58 11    MOV   X,[0x11]           
0EE4: 51 12    MOV   A,[0x12]           
                                        (0297) .ENDSECTION
                                        (0298) .SECTION
                                        (0299) ;-----------------------------------------------------------------------------
                                        (0300) ;  FUNCTION NAME:  ADCINC_1_iGetData
                                        (0301) ;                  ADCINC_1_wGetData
                                        (0302) ;
                                        (0303) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0304) ;                   available.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  When necessary, it is the calling function's
                                        (0311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0312) ;    functions.
                                        (0313) ;          
                                        (0314)  ADCINC_1_iGetData:
                                        (0315) _ADCINC_1_iGetData:
                                        (0316)  ADCINC_1_wGetData:
                                        (0317) _ADCINC_1_wGetData:
                                        (0318)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0319)    ADCINC_1_wGetData_M          
                                        (0320)    RAM_EPILOGUE RAM_USE_CLASS_4
0EE6: 7F       RET                      (0321)    ret
0EE7: 51 12    MOV   A,[0x12]           
                                        (0322) .ENDSECTION
                                        (0323) .SECTION
                                        (0324) ;-----------------------------------------------------------------------------
                                        (0325) ;  FUNCTION NAME:  ADCINC_1_bGetData
                                        (0326) ;                  ADCINC_1_cGetData
                                        (0327) ;
                                        (0328) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0329) ;                   available.
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  ARGUMENTS:    None.
                                        (0332) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0333) ;  SIDE EFFECTS:
                                        (0334) ;    The A and X registers may be modified by this or future implementations
                                        (0335) ;    of this function.  When necessary, it is the calling function's
                                        (0336) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0337) ;    functions.
                                        (0338) ;          
                                        (0339)  ADCINC_1_bGetData:
                                        (0340) _ADCINC_1_bGetData:
                                        (0341)  ADCINC_1_cGetData:
                                        (0342) _ADCINC_1_cGetData:
                                        (0343)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0344)    ADCINC_1_cGetData_M        
                                        (0345)    RAM_EPILOGUE RAM_USE_CLASS_4
0EE9: 7F       RET                      (0346)    ret
0EEA: 51 15    MOV   A,[0x15]           
0EEC: 55 15 00 MOV   [0x15],0x0         
                                        (0347) .ENDSECTION
                                        (0348) 
                                        (0349) 
                                        (0350) .SECTION
                                        (0351) ;-----------------------------------------------------------------------------
                                        (0352) ;  FUNCTION NAME: ADCINC_1_fClearFlag
                                        (0353) ;
                                        (0354) ;  DESCRIPTION: Clears the data ready flag.
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  ARGUMENTS:    None.
                                        (0357) ;  RETURNS:      Nothing.
                                        (0358) ;  SIDE EFFECTS: 
                                        (0359) ;    The DATA_READY flag is cleared.
                                        (0360) ;    The A and X registers may be modified by this or future implementations
                                        (0361) ;    of this function.  When necessary, it is the calling function's
                                        (0362) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0363) ;    functions.
                                        (0364) ;          
                                        (0365)  ADCINC_1_fClearFlag:
                                        (0366) _ADCINC_1_fClearFlag:
                                        (0367)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0368)    ADCINC_1_fClearFlag_M    
                                        (0369)    RAM_EPILOGUE RAM_USE_CLASS_4
0EEF: 7F       RET                      (0370)    ret
0EF0: 60 26    MOV   REG[0x26],A        
                                        (0371) .ENDSECTION
                                        (0372) 
                                        (0373) 
                                        (0374) .SECTION
                                        (0375) ;-----------------------------------------------------------------------------
                                        (0376) ;  FUNCTION NAME: ADCINC_1_WritePulseWidth
                                        (0377) ;
                                        (0378) ;  DESCRIPTION:
                                        (0379) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0380) ;-----------------------------------------------------------------------------
                                        (0381) ;
                                        (0382) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0383) ;  RETURNS:   Nothing
                                        (0384) ;  SIDE EFFECTS:
                                        (0385) ;    The A and X registers may be modified by this or future implementations
                                        (0386) ;    of this function.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390)  ADCINC_1_WritePulseWidth:
                                        (0391) _ADCINC_1_WritePulseWidth:
                                        (0392)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0393)    ADCINC_1_WritePulseWidth_M  
                                        (0394)    RAM_EPILOGUE RAM_USE_CLASS_1
0EF2: 7F       RET                      (0395)    ret
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File ADCINC_1.asm
_bE2Write:
    0EF3: 4F       MOV   X,SP
    0EF4: 4B       SWAP  A,X
    0EF5: 39 EB    CMP   A,0xEB
    0EF7: C0 06    JC    0x0EFE
    0EF9: 50 FE    MOV   A,0xFE
    0EFB: 38 FE    ADD   SP,0xFE
    0EFD: 7E       RETI  
    0EFE: 4F       MOV   X,SP
    0EFF: 38 0A    ADD   SP,0xA
    0F01: 56 07 00 MOV   [X+7],0x0
    0F04: 52 FF    MOV   A,[X-1]
    0F06: 54 00    MOV   [X+0],A
    0F08: 52 FA    MOV   A,[X-6]
    0F0A: 08       PUSH  A
    0F0B: 52 F9    MOV   A,[X-7]
    0F0D: 6C FA    RLC   [X-6]
    0F0F: 6A       RLC   A
    0F10: 6C FA    RLC   [X-6]
    0F12: 6A       RLC   A
    0F13: 03 00    ADD   A,[X+0]
    0F15: 54 00    MOV   [X+0],A
    0F17: 18       POP   A
    0F18: 54 FA    MOV   [X-6],A
    0F1A: 52 F8    MOV   A,[X-8]
    0F1C: 54 02    MOV   [X+2],A
    0F1E: 52 F4    MOV   A,[X-12]
    0F20: 54 03    MOV   [X+3],A
    0F22: 52 FA    MOV   A,[X-6]
    0F24: 21 3F    AND   A,0x3F
    0F26: 54 08    MOV   [X+8],A
    0F28: 50 40    MOV   A,0x40
    0F2A: 13 08    SUB   A,[X+8]
    0F2C: 54 09    MOV   [X+9],A
    0F2E: 52 F5    MOV   A,[X-11]
    0F30: B0 09    JNZ   0x0F3A
    0F32: 52 F6    MOV   A,[X-10]
    0F34: 3B 09    CMP   A,[X+9]
    0F36: D0 03    JNC   0x0F3A
    0F38: 54 09    MOV   [X+9],A
    0F3A: 3D 09 40 CMP   [X+9],0x40
    0F3D: B0 16    JNZ   0x0F54
    0F3F: 56 07 FF MOV   [X+7],0xFF
    0F42: 10       PUSH  X
    0F43: 5B       MOV   A,X
    0F44: 01 00    ADD   A,0x0
    0F46: 5C       MOV   X,A
    0F47: 7C 10 68 LCALL _bFlashWriteBlock
    0F4A: 20       POP   X
    0F4B: 39 00    CMP   A,0x0
    0F4D: A0 3A    JZ    0x0F88
    0F4F: 56 07 00 MOV   [X+7],0x0
    0F52: 80 0D    JMP   0x0F60
    0F54: 90 37    CALL  0x0F8D
    0F56: 52 07    MOV   A,[X+7]
    0F58: 39 FF    CMP   A,0xFF
    0F5A: A0 2D    JZ    0x0F88
    0F5C: 39 FE    CMP   A,0xFE
    0F5E: A0 29    JZ    0x0F88
    0F60: 52 F6    MOV   A,[X-10]
    0F62: 13 09    SUB   A,[X+9]
    0F64: 54 F6    MOV   [X-10],A
    0F66: D0 03    JNC   0x0F6A
    0F68: 7B F5    DEC   [X-11]
    0F6A: 52 F6    MOV   A,[X-10]
    0F6C: 2B F5    OR    A,[X-11]
    0F6E: A0 19    JZ    0x0F88
    0F70: 77 00    INC   [X+0]
    0F72: 52 02    MOV   A,[X+2]
    0F74: 03 09    ADD   A,[X+9]
    0F76: 54 02    MOV   [X+2],A
    0F78: D0 03    JNC   0x0F7C
    0F7A: 77 01    INC   [X+1]
    0F7C: 52 FA    MOV   A,[X-6]
    0F7E: 03 09    ADD   A,[X+9]
    0F80: 54 FA    MOV   [X-6],A
    0F82: DF 9F    JNC   0x0F22
    0F84: 77 F9    INC   [X-7]
    0F86: 8F 9B    JMP   0x0F22
    0F88: 52 07    MOV   A,[X+7]
    0F8A: 38 F4    ADD   SP,0xF4
    0F8C: 7E       RETI  
    0F8D: 5B       MOV   A,X
    0F8E: 4F       MOV   X,SP
    0F8F: 4B       SWAP  A,X
    0F90: 39 A3    CMP   A,0xA3
    0F92: C0 05    JC    0x0F98
    0F94: 56 07 FE MOV   [X+7],0xFE
    0F97: 7F       RET   
    0F98: 38 41    ADD   SP,0x41
    0F9A: 52 08    MOV   A,[X+8]
    0F9C: 03 09    ADD   A,[X+9]
    0F9E: 54 4C    MOV   [X+76],A
    0FA0: 52 08    MOV   A,[X+8]
    0FA2: A0 1A    JZ    0x0FBD
    0FA4: 10       PUSH  X
    0FA5: 50 00    MOV   A,0x0
    0FA7: 08       PUSH  A
    0FA8: 52 08    MOV   A,[X+8]
    0FAA: 08       PUSH  A
    0FAB: 50 00    MOV   A,0x0
    0FAD: 08       PUSH  A
    0FAE: 5B       MOV   A,X
    0FAF: 01 0C    ADD   A,0xC
    0FB1: 08       PUSH  A
    0FB2: 50 00    MOV   A,0x0
    0FB4: 08       PUSH  A
    0FB5: 08       PUSH  A
    0FB6: 52 00    MOV   A,[X+0]
    0FB8: 90 61    CALL  0x101B
    0FBA: 38 FA    ADD   SP,0xFA
    0FBC: 20       POP   X
    0FBD: 3D 4C 40 CMP   [X+76],0x40
    0FC0: D0 20    JNC   0x0FE1
    0FC2: 10       PUSH  X
    0FC3: 50 00    MOV   A,0x0
    0FC5: 08       PUSH  A
    0FC6: 50 40    MOV   A,0x40
    0FC8: 13 4C    SUB   A,[X+76]
    0FCA: 08       PUSH  A
    0FCB: 50 00    MOV   A,0x0
    0FCD: 08       PUSH  A
    0FCE: 5B       MOV   A,X
    0FCF: 01 0C    ADD   A,0xC
    0FD1: 03 4C    ADD   A,[X+76]
    0FD3: 08       PUSH  A
    0FD4: 50 00    MOV   A,0x0
    0FD6: 08       PUSH  A
    0FD7: 52 4C    MOV   A,[X+76]
    0FD9: 08       PUSH  A
    0FDA: 52 00    MOV   A,[X+0]
    0FDC: 90 3D    CALL  0x101B
    0FDE: 38 FA    ADD   SP,0xFA
    0FE0: 20       POP   X
    0FE1: 5B       MOV   A,X
    0FE2: 03 08    ADD   A,[X+8]
    0FE4: 01 0C    ADD   A,0xC
    0FE6: 53 FD    MOV   [filter+189],A
    0FE8: 52 02    MOV   A,[X+2]
    0FEA: 53 FC    MOV   [filter+188],A
    0FEC: 52 4C    MOV   A,[X+76]
    0FEE: 13 08    SUB   A,[X+8]
    0FF0: 53 FF    MOV   [filter+191],A
    0FF2: 3E FC    MVI   A,[filter+188]
    0FF4: 3F FD    MVI   [filter+189],A
    0FF6: 7A FF    DEC   [filter+191]
    0FF8: BF F9    JNZ   0x0FF2
    0FFA: 52 02    MOV   A,[X+2]
    0FFC: 08       PUSH  A
    0FFD: 5B       MOV   A,X
    0FFE: 01 0C    ADD   A,0xC
    1000: 54 02    MOV   [X+2],A
    1002: 56 07 FF MOV   [X+7],0xFF
    1005: 10       PUSH  X
    1006: 5B       MOV   A,X
    1007: 01 00    ADD   A,0x0
    1009: 5C       MOV   X,A
    100A: 7C 10 68 LCALL _bFlashWriteBlock
    100D: 20       POP   X
    100E: 39 00    CMP   A,0x0
    1010: A0 04    JZ    0x1015
    1012: 56 07 00 MOV   [X+7],0x0
    1015: 18       POP   A
    1016: 54 02    MOV   [X+2],A
    1018: 38 BF    ADD   SP,0xBF
    101A: 7F       RET   
    101B: 53 FB    MOV   [filter+187],A
    101D: 5D F7    MOV   A,REG[0xF7]
    101F: 08       PUSH  A
    1020: 51 FB    MOV   A,[filter+187]
_E2Read:
    1022: 4F       MOV   X,SP
    1023: 53 F9    MOV   [filter+185],A
    1025: 64       ASL   A
    1026: 64       ASL   A
    1027: 64       ASL   A
    1028: 64       ASL   A
    1029: 64       ASL   A
    102A: 64       ASL   A
    102B: 53 FA    MOV   [filter+186],A
    102D: 51 F9    MOV   A,[filter+185]
    102F: 67       ASR   A
    1030: 67       ASR   A
    1031: 21 3F    AND   A,0x3F
    1033: 53 F9    MOV   [filter+185],A
    1035: 52 F7    MOV   A,[X-9]
    1037: 2B F8    OR    A,[X-8]
    1039: A0 2C    JZ    0x1066
    103B: 52 F7    MOV   A,[X-9]
    103D: 53 FE    MOV   [filter+190],A
    103F: 52 F8    MOV   A,[X-8]
    1041: 53 FF    MOV   [filter+191],A
    1043: 76 FE    INC   [filter+190]
    1045: 52 FA    MOV   A,[X-6]
    1047: 53 FD    MOV   [filter+189],A
    1049: 51 FA    MOV   A,[filter+186]
    104B: 05 FC    ADD   [X-4],A
    104D: 51 F9    MOV   A,[filter+185]
    104F: 0D FB    ADC   [X-5],A
    1051: 52 FB    MOV   A,[X-5]
    1053: 59 FC    MOV   X,[X-4]
    1055: 08       PUSH  A
    1056: 28       ROMX  
    1057: 3F FD    MVI   [filter+189],A
    1059: 18       POP   A
    105A: 75       INC   X
    105B: B0 02    JNZ   0x105E
    105D: 74       INC   A
    105E: 7A FF    DEC   [filter+191]
    1060: BF F4    JNZ   0x1055
    1062: 7A FE    DEC   [filter+190]
    1064: BF F0    JNZ   0x1055
    1066: 7E       RETI  
    1067: 30       HALT  
_bFlashWriteBlock:
    1068: 55 FD 01 MOV   [filter+189],0x1
    106B: 3C FD 01 CMP   [filter+189],0x1
    106E: B0 C4    JNZ   0x1133
    1070: 71 10    OR    F,0x10
    1072: 5D E0    MOV   A,REG[0xE0]
    1074: 08       PUSH  A
    1075: 21 F8    AND   A,0xF8
    1077: 49 FE 10 TST   REG[0xFE],0x10
    107A: A0 05    JZ    0x1080
    107C: 29 03    OR    A,0x3
    107E: 80 03    JMP   0x1082
    1080: 29 02    OR    A,0x2
    1082: 60 E0    MOV   REG[0xE0],A
    1084: 70 EF    AND   F,0xEF
    1086: 62 E3 00 MOV   REG[0xE3],0x0
    1089: 65 FD    ASL   [filter+189]
    108B: 3C FD 02 CMP   [filter+189],0x2
    108E: B0 A4    JNZ   0x1133
    1090: 90 A8    CALL  0x113A
    1092: 39 00    CMP   A,0x0
    1094: A0 09    JZ    0x109E
    1096: 55 FF 00 MOV   [filter+191],0x0
    1099: 55 FD 10 MOV   [filter+189],0x10
    109C: 80 81    JMP   0x111E
    109E: 65 FD    ASL   [filter+189]
    10A0: 49 FE 10 TST   REG[0xFE],0x10
    10A3: A0 0C    JZ    0x10B0
    10A5: 71 10    OR    F,0x10
    10A7: 49 E4 08 TST   REG[0xE4],0x8
    10AA: A0 05    JZ    0x10B0
    10AC: 70 EF    AND   F,0xEF
    10AE: 80 2E    JMP   0x10DD
    10B0: 70 EF    AND   F,0xEF
    10B2: 62 E3 00 MOV   REG[0xE3],0x0
    10B5: 52 00    MOV   A,[X+0]
    10B7: 53 FA    MOV   [filter+186],A
    10B9: 52 04    MOV   A,[X+4]
    10BB: 53 FC    MOV   [filter+188],A
    10BD: 55 FE 56 MOV   [filter+190],0x56
    10C0: 51 FD    MOV   A,[filter+189]
    10C2: 39 04    CMP   A,0x4
    10C4: B0 6E    JNZ   0x1133
    10C6: 08       PUSH  A
    10C7: 10       PUSH  X
_FlashBlockLocal1:
    10C8: 4F       MOV   X,SP
    10C9: 5B       MOV   A,X
    10CA: 01 03    ADD   A,0x3
    10CC: 53 F9    MOV   [filter+185],A
    10CE: 55 F8 3A MOV   [filter+184],0x3A
    10D1: 50 03    MOV   A,0x3
    10D3: 00       SWI   
    10D4: 20       POP   X
    10D5: 18       POP   A
    10D6: 53 FD    MOV   [filter+189],A
    10D8: 3C F8 00 CMP   [filter+184],0x0
    10DB: A0 09    JZ    0x10E5
    10DD: 55 FF 00 MOV   [filter+191],0x0
    10E0: 55 FD 10 MOV   [filter+189],0x10
    10E3: 80 3A    JMP   0x111E
    10E5: 62 E3 00 MOV   REG[0xE3],0x0
    10E8: 65 FD    ASL   [filter+189]
    10EA: 52 00    MOV   A,[X+0]
    10EC: 53 FA    MOV   [filter+186],A
    10EE: 52 02    MOV   A,[X+2]
    10F0: 53 FB    MOV   [filter+187],A
    10F2: 52 05    MOV   A,[X+5]
    10F4: 53 FC    MOV   [filter+188],A
    10F6: 55 FE 56 MOV   [filter+190],0x56
    10F9: 51 FD    MOV   A,[filter+189]
    10FB: 39 08    CMP   A,0x8
    10FD: B0 35    JNZ   0x1133
    10FF: 08       PUSH  A
    1100: 10       PUSH  X
_FlashBlockLocal2:
    1101: 4F       MOV   X,SP
    1102: 5B       MOV   A,X
    1103: 01 03    ADD   A,0x3
    1105: 53 F9    MOV   [filter+185],A
    1107: 55 F8 3A MOV   [filter+184],0x3A
    110A: 50 02    MOV   A,0x2
    110C: 00       SWI   
    110D: 20       POP   X
    110E: 18       POP   A
    110F: 53 FD    MOV   [filter+189],A
    1111: 55 FF 01 MOV   [filter+191],0x1
    1114: 3C F8 00 CMP   [filter+184],0x0
    1117: A0 04    JZ    0x111C
    1119: 55 FF 00 MOV   [filter+191],0x0
    111C: 65 FD    ASL   [filter+189]
    111E: 3C FD 10 CMP   [filter+189],0x10
    1121: B0 11    JNZ   0x1133
    1123: 18       POP   A
    1124: 71 10    OR    F,0x10
    1126: 60 E0    MOV   REG[0xE0],A
    1128: 70 EF    AND   F,0xEF
    112A: 65 FD    ASL   [filter+189]
    112C: 51 FF    MOV   A,[filter+191]
    112E: 3C FD 20 CMP   [filter+189],0x20
    1131: A0 04    JZ    0x1136
    1133: 30       HALT  
    1134: 8F FE    JMP   0x1133
    1136: 7F       RET   
    1137: 30       HALT  
    1138: 30       HALT  
    1139: 30       HALT  
    113A: 55 FA 03 MOV   [filter+186],0x3
    113D: 51 FD    MOV   A,[filter+189]
    113F: 39 02    CMP   A,0x2
    1141: BF F1    JNZ   0x1133
    1143: 08       PUSH  A
    1144: 10       PUSH  X
_FlashBlockLocal3:
    1145: 4F       MOV   X,SP
    1146: 5B       MOV   A,X
    1147: 01 03    ADD   A,0x3
    1149: 53 F9    MOV   [filter+185],A
    114B: 55 F8 3A MOV   [filter+184],0x3A
    114E: 50 06    MOV   A,0x6
    1150: 00       SWI   
    1151: 20       POP   X
    1152: 3C FF 01 CMP   [filter+191],0x1
    1155: B0 73    JNZ   0x11C9
    1157: 10       PUSH  X
    1158: 52 03    MOV   A,[X+3]
    115A: 60 E8    MOV   REG[0xE8],A
    115C: 21 80    AND   A,0x80
    115E: B0 09    JNZ   0x1168
    1160: 51 FD    MOV   A,[filter+189]
    1162: 54 06    MOV   [X+6],A
    1164: 57 FB    MOV   X,0xFB
    1166: 80 07    JMP   0x116E
    1168: 51 FA    MOV   A,[filter+186]
    116A: 54 06    MOV   [X+6],A
    116C: 57 F8    MOV   X,0xF8
    116E: 52 00    MOV   A,[X+0]
    1170: 60 E9    MOV   REG[0xE9],A
    1172: 5D EB    MOV   A,REG[0xEB]
    1174: 64       ASL   A
    1175: 5D EA    MOV   A,REG[0xEA]
    1177: 6A       RLC   A
    1178: 73       CPL   A
    1179: 74       INC   A
    117A: 03 01    ADD   A,[X+1]
    117C: 53 FE    MOV   [filter+190],A
    117E: 21 7F    AND   A,0x7F
    1180: 60 E8    MOV   REG[0xE8],A
    1182: 52 02    MOV   A,[X+2]
    1184: 67       ASR   A
    1185: 21 7F    AND   A,0x7F
    1187: 60 E9    MOV   REG[0xE9],A
    1189: 5D EA    MOV   A,REG[0xEA]
    118B: 53 FF    MOV   [filter+191],A
    118D: 5D EB    MOV   A,REG[0xEB]
    118F: 64       ASL   A
    1190: 6B FF    RLC   [filter+191]
    1192: 48 02 01 TST   [X+2],0x1
    1195: A0 06    JZ    0x119C
    1197: 02 FE    ADD   A,[filter+190]
    1199: 0E FF 00 ADC   [filter+191],0x0
    119C: 64       ASL   A
    119D: 6B FF    RLC   [filter+191]
    119F: 64       ASL   A
    11A0: 6B FF    RLC   [filter+191]
    11A2: 51 FF    MOV   A,[filter+191]
    11A4: 20       POP   X
    11A5: 54 05    MOV   [X+5],A
    11A7: 51 FE    MOV   A,[filter+190]
    11A9: 54 04    MOV   [X+4],A
    11AB: 49 FE 10 TST   REG[0xFE],0x10
    11AE: A0 10    JZ    0x11BF
    11B0: 7C 00 EF LCALL 0x00EF
    11B3: 21 04    AND   A,0x4
    11B5: B0 09    JNZ   0x11BF
    11B7: 69 05    ASR   [X+5]
    11B9: 77 05    INC   [X+5]
    11BB: 69 04    ASR   [X+4]
    11BD: 77 04    INC   [X+4]
    11BF: 18       POP   A
    11C0: 39 02    CMP   A,0x2
    11C2: BF 70    JNZ   0x1133
    11C4: 53 FD    MOV   [filter+189],A
    11C6: 50 00    MOV   A,0x0
    11C8: 7F       RET   
    11C9: 18       POP   A
    11CA: 39 02    CMP   A,0x2
    11CC: BF 66    JNZ   0x1133
    11CE: 53 FD    MOV   [filter+189],A
    11D0: 50 01    MOV   A,0x1
    11D2: 7F       RET   
_FlashReadBlock:
    11D3: 52 02    MOV   A,[X+2]
    11D5: 53 FB    MOV   [filter+187],A
    11D7: 52 03    MOV   A,[X+3]
    11D9: 53 FD    MOV   [filter+189],A
    11DB: 52 00    MOV   A,[X+0]
    11DD: 6D       RRC   A
    11DE: 6D       RRC   A
    11DF: 6D       RRC   A
    11E0: 21 C0    AND   A,0xC0
    11E2: 08       PUSH  A
    11E3: 52 00    MOV   A,[X+0]
    11E5: 67       ASR   A
    11E6: 67       ASR   A
    11E7: 21 3F    AND   A,0x3F
    11E9: 20       POP   X
    11EA: 08       PUSH  A
    11EB: 28       ROMX  
    11EC: 3F FB    MVI   [filter+187],A
    11EE: 18       POP   A
    11EF: 75       INC   X
    11F0: 7A FD    DEC   [filter+189]
    11F2: BF F7    JNZ   0x11EA
    11F4: 7F       RET   
FILE: .\aprs.asm                        (0001) ;include 'm8c.inc'
                                        (0002) ;include 'memory.inc'
                                        (0003) ;include 'PSoCAPI.inc'
                                        (0004) 	;export 	_aprs
                                        (0005) 	export  _bit_counter
                                        (0006) 	export  _bit_buffer
                                        (0007) 	export  _SINtable
                                        (0008) area 	bss(RAM)
                                        (0009) 
                                        (0010) ;-----------------------------------------------------------------------------
                                        (0011) ;  Defines
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) 
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) ;  Private data: 
                                        (0016) ;-----------------------------------------------------------------------------
                                        (0017) _bit_buffer:         blk  1
                                        (0018) _bit_counter:         blk  1
                                        (0019) ;data_counter:        blk 1
                                        (0020) area 	text(ROM,REL)
                                        (0021) 
11F5: 7F       RET                      (0022) _aprs:       ret
                                        (0023) ;             call           testFlag
                                        (0024) ;			 cmp            [bit_buffer],0
                                        (0025) ;			 jnz            deadress
                                        (0026) ;			 ret
                                        (0027) ;deadress:    mov            [data_counter],7
                                        (0028) ;             ret
                                        (0029) ;---------------------------------------------------------------------------------
                                        (0030) ;
                                        (0031) ;            Testet ob      UI Frame erkannt ist ---> ist bit_buffer =7e dann ready
                                        (0032) ;------------------------------------------------------------------------------------
                                        (0033) ;testFlag:    inc        	[clock] 
                                        (0034) ;			 cmp            [clock],8
                                        (0035) ;			 jz             clockfull
                                        (0036) ;			 ret
                                        (0037) ;clockfull:   mov            a,reg[PRT1DR]
                                        (0038) ;             and            a,1  
                                        (0039) 			
                                        (0040) ;			 asl            [bit_buffer]
                                        (0041) ;			 add            [bit_buffer],a
                                        (0042) ;			 mov            [clock],0
                                        (0043) ;            inc            [bit_counter]
                                        (0044) ;             cmp            [bit_counter],8
                                        (0045) ;			 jz              bytefull
                                        (0046) ;			 ret
                                        (0047) ;bytefull:     
                                        (0048) ;             mov            [clock],0
                                        (0049) ;             cmp            [bit_buffer],0x7e
                                        (0050) ;			  jz             aprsflag_ready
                                        (0051) ;			  mov            [bit_buffer],0
                                        (0052) ;			  ret
                                        (0053) ;aprsflag_ready:    mov            a,48
                                        (0054) ;              lcall          LCD_1_WriteData
                                        (0055) ;              ret
                                        (0056) ;-----------------------------------------------------------------------------------------
                                        (0057) ;
                                        (0058) ;   holt daten in den Datenbuffer anzahl steht im Data_counter  
                                        (0059) ;------------------------------------------------------------------------------------------
                                        (0060) ;get_aprs_data:
                                        (0061) ;              push            a
                                        (0062) ;			  push            x
                                        (0063) ;g1:           inc             [clock]
                                        (0064) ;              cmp             [clock],8
                                        (0065) ;			  jnz             g1
                                        (0066) ;			  
                                        (0067) ;			  ret
FILE: .\kommando.asm                    (0001) include 'm8c.inc'
                                        (0002) include 'memory.inc'
                                        (0003) include 'PSoCAPI.inc'
                                        (0004) 	export 	_Kommando
                                        (0005)     export  _kommando_setvol
                                        (0006) 	export  _responsebuffer
                                        (0007) 	export  _kommando_heartbeat
                                        (0008) 	export  _kommando_rssi
                                        (0009) 	export  _kommando_rufton
                                        (0010) 	export  _kommando_setfilter
                                        (0011) 	export  _wait_ptt
                                        (0012) 	export  _lcdInit
                                        (0013) 	export  _clear_LCD
                                        (0014) 	export  _setgroup_response
                                        (0015) 	export   lastPrt1
                                        (0016) 	export   ton_on1
                                        (0017)     export  _counter	
                                        (0018) 	export   bTablePos
                                        (0019) 	export   w3
                                        (0020) 
                                        (0021) 	
                                        (0022) 	
                                        (0023) area 	bss(RAM)
                                        (0024) 
                                        (0025) ;-----------------------------------------------------------------------------
                                        (0026) ;  Defines
                                        (0027) ;-----------------------------------------------------------------------------
                                        (0028) 
                                        (0029) ;-----------------------------------------------------------------------------
                                        (0030) ;  Private data: 
                                        (0031) ;-----------------------------------------------------------------------------
                                        (0032) 
                                        (0033) _responsebuffer:      blk 20
                                        (0034) speicher:             blk 1
                                        (0035) lastPrt1:             blk 1
                                        (0036) bTablePos:            blk 1
                                        (0037) counter1:             blk 1
                                        (0038) _counter:             blk 1
                                        (0039) area 	text(ROM,REL)
                                        (0040) 
11F6: 08       PUSH  A                  (0041) _clear_LCD:      push       a
11F7: 10       PUSH  X                  (0042)                  push       x
11F8: 50 01    MOV   A,0x1              (0043)                  mov        a,1
11FA: 7C 0A 8F LCALL _LCD_1_Control     (0044)                  lcall      LCD_1_Control
11FD: 20       POP   X                  (0045) 				 pop        x
11FE: 18       POP   A                  (0046) 			     pop        a
11FF: 7F       RET                      (0047) 				 ret
                                        (0048) _lcdInit:   
1200: 7C 0B 36 LCALL _LCD_1_Start|LCD_1_Init|LCD_1_Start|_LCD_1_Init(0049)                  lcall    LCD_1_Start;
1203: 9F F1    CALL  _clear_LCD         (0050) 				 call      _clear_LCD
1205: 50 13    MOV   A,0x13             (0051)    				 mov    	A, >Str_Welcome      
1207: 57 D8    MOV   X,0xD8             (0052)    				 mov    	X, <Str_Welcome
1209: 7C 0A 35 LCALL _LCD_1_PrCString   (0053)    				 lcall  	LCD_1_PrCString   
                                        (0054) 				 ;mov        a,reg[PRT0DR]
                                        (0055)                  ;and        a,24
                                        (0056) 				 ;mov        [lastPrt0],a
120C: 5D 04    MOV   A,REG[0x4]         (0057) 				 mov        a,reg[PRT1DR]
120E: 21 C0    AND   A,0xC0             (0058) 				 and        a,192
1210: 53 30    MOV   [lastPrt1],A       (0059) 				 mov        [lastPrt1],a
                                        (0060) 				 ;M8C_SetBank1
                                        (0061) 				 ;and        reg[ABF_CR0],0xe2
                                        (0062) 				 ;M8C_SetBank0
1212: 7F       RET                      (0063) 				 ret
                                        (0064) 				 
                                        (0065) ; show the RSSI on the Character Display  Argument 1 : how many rows display in the variable Counter1  max: 8 rows
                                        (0066) ;                                         return : none
                                        (0067) ;
                                        (0068) display_pegel:   
1213: 50 01    MOV   A,0x1              (0069)                  mov        a,1
1215: 57 0C    MOV   X,0xC              (0070) 				 mov        x,12
1217: 7C 0B A6 LCALL _LCD_1_Position    (0071) 				 lcall      LCD_1_Position
121A: 51 32    MOV   A,[bTablePos+1]    (0072) 				 mov        a,[counter1]
121C: 08       PUSH  A                  (0073) 				 push       a
                                        (0074) l45:             
121D: 50 FF    MOV   A,0xFF             (0075)                  mov        a,0xff
121F: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0076) 				 lcall      LCD_1_WriteData				 
1222: 7A 32    DEC   [bTablePos+1]      (0077) 				 dec        [counter1]
1224: 3C 32 00 CMP   [bTablePos+1],0x0  (0078) 				 cmp        [counter1],0
1227: BF F5    JNZ   0x121D             (0079) 				 jnz        l45
1229: 18       POP   A                  (0080) 				 pop        A
122A: 53 32    MOV   [bTablePos+1],A    (0081) 				 mov        [counter1],a
122C: 50 08    MOV   A,0x8              (0082) 				 mov        a,8
122E: 12 32    SUB   A,[bTablePos+1]    (0083) 				 sub        a,[counter1]
1230: 53 32    MOV   [bTablePos+1],A    (0084) 				 mov        [counter1],a
                                        (0085) 				 
1232: 50 20    MOV   A,0x20             (0086) l43:		     mov        A,0x20
1234: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0087)                  lcall      LCD_1_WriteData
1237: 7A 32    DEC   [bTablePos+1]      (0088) 				 dec        [counter1]
1239: 3C 32 00 CMP   [bTablePos+1],0x0  (0089) 				 cmp        [counter1],0
123C: BF F5    JNZ   0x1232             (0090) 				 jnz        l43
123E: 7F       RET                      (0091) 				 ret
                                        (0092) ; command for DRA818 set filter    Argument : filter value  0-3 in the variable _filter
                                        (0093) ;                                  return   : response from the DRA818 in the Buffer _response_data 1 -> 14
                                        (0094) _kommando_setfilter:
123F: 50 14    MOV   A,0x14             (0095)                  mov      a,>dmofilter
1241: 57 03    MOV   X,0x3              (0096) 	             mov      x,<dmofilter
1243: 7C 08 7B LCALL _UART_1_CPutString (0097)                  lcall    UART_1_CPutString
1246: 3C 40 00 CMP   [filter],0x0       (0098) 				 cmp      [_filter],0
1249: B0 0A    JNZ   0x1254             (0099) 				 jnz      f1
124B: 50 14    MOV   A,0x14             (0100) 				 mov      a,>fil0
124D: 57 28    MOV   X,0x28             (0101) 				 mov      x,<fil0
124F: 7C 08 7B LCALL _UART_1_CPutString (0102) 				 lcall    UART_1_CPutString
1252: 80 2A    JMP   0x127D             (0103) 				 jmp      f5
1254: 3C 40 01 CMP   [filter],0x1       (0104) f1:				 cmp      [_filter],1
                                        (0105)                  ;cmp      a,1
1257: B0 0A    JNZ   0x1262             (0106)                  jnz      f2
1259: 50 14    MOV   A,0x14             (0107) 				 mov      a,>fil1
125B: 57 2E    MOV   X,0x2E             (0108) 				 mov      x,<fil1
125D: 7C 08 7B LCALL _UART_1_CPutString (0109) 				 lcall    UART_1_CPutString
1260: 80 1C    JMP   0x127D             (0110) 				 jmp      f5
1262: 3C 40 02 CMP   [filter],0x2       (0111) f2:				 cmp      [_filter],2
                                        (0112)                  ;cmp      a,2
1265: B0 0A    JNZ   0x1270             (0113)                  jnz      f3
1267: 50 14    MOV   A,0x14             (0114) 				 mov      a,>fil2
1269: 57 34    MOV   X,0x34             (0115) 				 mov      x,<fil2
126B: 7C 08 7B LCALL _UART_1_CPutString (0116)                  lcall    UART_1_CPutString
126E: 80 0E    JMP   0x127D             (0117) 				 jmp      f5
1270: 3C 40 03 CMP   [filter],0x3       (0118) f3:				 cmp      [_filter],3
                                        (0119)                  ;cmp      a,3
1273: A0 02    JZ    0x1276             (0120) 				 jz       f4
1275: 7F       RET                      (0121) 				 ret
1276: 50 14    MOV   A,0x14             (0122) f4:				  mov     a,>fil3
1278: 57 3A    MOV   X,0x3A             (0123) 				 mov      x,<fil3
127A: 7C 08 7B LCALL _UART_1_CPutString (0124) 				 lcall    UART_1_CPutString
127D: 7C 08 8D LCALL _UART_1_PutCRLF    (0125) f5:				 lcall    UART_1_PutCRLF
                                        (0126)                  
1280: 50 10    MOV   A,0x10             (0127) 				 mov      a,16
1282: 91 41    CALL  0x13C5             (0128) 				 call    responsedata
                                        (0129) 				 ;mov        a,1
                                        (0130) 				 ;mov        x,0
                                        (0131) 				 ;lcall     LCD_1_Position
                                        (0132) 				 ;mov        a ,>_responsebuffer
                                        (0133) 				 ;mov        x ,<_responsebuffer
                                        (0134) 				 ;lcall      LCD_1_PrString
1284: 3C 29 30 CMP   [responsebuffer+14],0x30(0135) 				 cmp       [_responsebuffer+14],0x30
1287: B0 07    JNZ   0x128F             (0136) 		         jnz        end9
1289: 3C 28 3A CMP   [responsebuffer+13],0x3A(0137) 				 cmp        [_responsebuffer+13],0x3a
128C: B0 02    JNZ   0x128F             (0138) 				 jnz        end9
128E: 7F       RET                      (0139) 				 ret
128F: 50 01    MOV   A,0x1              (0140) end9:			 mov        a,1    		; Set row
1291: 57 00    MOV   X,0x0              (0141)    	             mov      	X, 0			; Set col
1293: 7C 0B A6 LCALL _LCD_1_Position    (0142)                  lcall	    LCD_1_Position
1296: 50 14    MOV   A,0x14             (0143) 				 mov    	A, >filterror       
1298: 57 14    MOV   X,0x14             (0144)                  mov    	X, <filterror
129A: 7C 0A 35 LCALL _LCD_1_PrCString   (0145)   			 	 lcall  	LCD_1_PrCString 
129D: 7F       RET                      (0146) 				 ret		
                                        (0147) ; command for DRA818 set Volume    Argument : value 1-8 in the variable _volume
                                        (0148) ;                                  return   : response from the DRA818 in the Buffer _response_data 1 -> 14				 
                                        (0149) _kommando_setvol:
129E: 50 13    MOV   A,0x13             (0150)                  mov      a,>dmovolume
12A0: 57 F2    MOV   X,0xF2             (0151) 	             mov      x,<dmovolume
12A2: 7C 08 7B LCALL _UART_1_CPutString (0152)                  lcall    UART_1_CPutString
12A5: 51 36    MOV   A,[volume]         (0153)                  mov      a,[_volume]
12A7: 01 30    ADD   A,0x30             (0154) 				 add      a,48
12A9: 7C 07 F4 LCALL _UART_1_PutChar    (0155) 				 lcall    UART_1_PutChar
12AC: 7C 08 8D LCALL _UART_1_PutCRLF    (0156) 				 lcall      UART_1_PutCRLF
12AF: 50 0F    MOV   A,0xF              (0157) 				 mov        a,15
12B1: 91 12    CALL  0x13C5             (0158) 				 call       responsedata
12B3: 3C 29 30 CMP   [responsebuffer+14],0x30(0159) 				 cmp        [_responsebuffer+14],0x30
12B6: B0 06    JNZ   0x12BD             (0160) 		         jnz        end6
12B8: 3C 28 3A CMP   [responsebuffer+13],0x3A(0161) 				 cmp        [_responsebuffer+13],0x3a
12BB: A0 0F    JZ    0x12CB             (0162) 				 jz         print_volume
12BD: 50 01    MOV   A,0x1              (0163) end6:			 mov 	    A, 1	      		; Set row
12BF: 57 00    MOV   X,0x0              (0164)    	             mov      	X, 0 			; Set col
12C1: 7C 0B A6 LCALL _LCD_1_Position    (0165)                  lcall	    LCD_1_Position
12C4: 50 14    MOV   A,0x14             (0166) 				 mov    	A, >voerror       
12C6: 57 11    MOV   X,0x11             (0167)                  mov    	X, <voerror
12C8: 7C 0A 35 LCALL _LCD_1_PrCString   (0168)   			 	 lcall  	LCD_1_PrCString 
12CB: 7F       RET                      (0169) print_volume:    ret			
                                        (0170) ;print_vol:        mov        a,0
                                        (0171) ;                 mov        x,12
                                        (0172) ;				 lcall      LCD_1_Position
                                        (0173) ;				 mov        a,>batstr
                                        (0174) ;				 mov        x,<batstr
                                        (0175) ;				 lcall      LCD_1_PrCString
                                        (0176) ;				 mov        a,[_volt]
                                        (0177) ;				 add        a,48
                                        (0178) ;				 lcall      LCD_1_WriteData
                                        (0179) ;				 mov        a,0x20
                                        (0180) ;				 lcall      LCD_1_WriteData
                                        (0181) ;                 ret				
                                        (0182) 
                                        (0183) 
                                        (0184) ; command for DRA818 Connect       Argument : none
                                        (0185) ;                                  return   : response from the DRA818 in the Buffer _response_data 1 -> 11
                                        (0186) 
                                        (0187) _kommando_heartbeat:
12CC: 50 14    MOV   A,0x14             (0188)                  mov      a,>heartbeat
12CE: 57 17    MOV   X,0x17             (0189) 	             mov      x,<heartbeat
12D0: 7C 08 7B LCALL _UART_1_CPutString (0190)                  lcall    UART_1_CPutString
12D3: 7C 08 8D LCALL _UART_1_PutCRLF    (0191) 				 lcall    UART_1_PutCRLF
12D6: 50 0D    MOV   A,0xD              (0192) 				 mov      a,13
12D8: 90 EB    CALL  0x13C5             (0193) 				 call      responsedata
12DA: 3C 26 30 CMP   [responsebuffer+11],0x30(0194) 				 cmp      [_responsebuffer+11],48
12DD: B0 06    JNZ   0x12E4             (0195) 		         jnz       end5
12DF: 3C 25 3A CMP   [responsebuffer+10],0x3A(0196) 				 cmp      [_responsebuffer+10],0x3a
12E2: A0 0F    JZ    0x12F2             (0197) 				 jz        end1
12E4: 50 01    MOV   A,0x1              (0198) end5:	     	 mov    	A, 1	      		; Set row
12E6: 57 00    MOV   X,0x0              (0199)    	             mov    	X, 0 			; Set col
12E8: 7C 0B A6 LCALL _LCD_1_Position    (0200)                  lcall  	LCD_1_Position
12EB: 50 14    MOV   A,0x14             (0201) 				 mov    	A, >coerror    
12ED: 57 25    MOV   X,0x25             (0202)                  mov    	X, <coerror
12EF: 7C 0A 35 LCALL _LCD_1_PrCString   (0203)   			 	 lcall  	LCD_1_PrCString 
12F2: 7F       RET                      (0204) end1:            ret
                                        (0205) ; command for DRA818 get RSSI      Argument : none
                                        (0206) ;                                  return   : response from the DRA818 in the Buffer _response_data 1 -> 8
                                        (0207) ; function display the RSSI in Row 2 at the display
                                        (0208) ;
                                        (0209) _kommando_rssi:
12F3: 50 14    MOV   A,0x14             (0210)                  mov      a,>rssi
12F5: 57 40    MOV   X,0x40             (0211) 				 mov      x,<rssi
12F7: 7C 08 7B LCALL _UART_1_CPutString (0212) 				 lcall     UART_1_CPutString
12FA: 7C 08 8D LCALL _UART_1_PutCRLF    (0213) 				 lcall     UART_1_PutCRLF
12FD: 50 08    MOV   A,0x8              (0214) 				 mov        a,8
12FF: 90 C4    CALL  0x13C5             (0215) 				 call       responsedata
1301: 50 01    MOV   A,0x1              (0216) 				 mov    	A, 1	      		; Set row
1303: 57 00    MOV   X,0x0              (0217)    	             mov    	X, 0 			; Set col
1305: 7C 0B A6 LCALL _LCD_1_Position    (0218)                  lcall  	LCD_1_Position
1308: 50 01    MOV   A,0x1              (0219) 				 mov        a,1
130A: 57 00    MOV   X,0x0              (0220) 				 mov        x,0
130C: 08       PUSH  A                  (0221) l76:			 push       a
130D: 52 1B    MOV   A,[X+27]           (0222)                  mov        a,[x+_responsebuffer]
130F: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0223)                  lcall      LCD_1_WriteData
1312: 18       POP   A                  (0224) 				 pop        a
1313: 75       INC   X                  (0225) 				 inc        x
1314: 74       INC   A                  (0226)                  inc        a
1315: 39 09    CMP   A,0x9              (0227) 				 cmp        a,9
1317: BF F4    JNZ   0x130C             (0228) 				 jnz        l76
1319: 50 20    MOV   A,0x20             (0229) 				 mov        a,0x20
131B: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0230) 				 lcall      LCD_1_WriteData
131E: 50 64    MOV   A,0x64             (0231) 				 mov        a,100
1320: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0232) 				 lcall      LCD_1_WriteData
1323: 50 62    MOV   A,0x62             (0233) 				 mov        a,98
1325: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0234) 				 lcall      LCD_1_WriteData
1328: 50 20    MOV   A,0x20             (0235) 				 mov        a,0x20
132A: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0236) 				 lcall      LCD_1_WriteData
132D: 55 32 00 MOV   [bTablePos+1],0x0  (0237) 				 mov        [counter1],0
1330: 51 20    MOV   A,[responsebuffer+5](0238) 				 mov        a,[5+_responsebuffer]
                                        (0239) 				 
1332: 11 30    SUB   A,0x30             (0240) 				 sub        a,48
1334: 39 00    CMP   A,0x0              (0241) 				 cmp        a,0
1336: A0 0A    JZ    0x1341             (0242) 				 jz         x1
1338: 60 E8    MOV   REG[0xE8],A        (0243) 				 mov        reg[MUL_X],a
133A: 62 E9 64 MOV   REG[0xE9],0x64     (0244) 				 mov        reg[MUL_Y],100
133D: 5D EB    MOV   A,REG[0xEB]        (0245) 				 mov        a,reg[MUL_DL]
133F: 53 32    MOV   [bTablePos+1],A    (0246) 				 mov        [counter1],a
1341: 51 21    MOV   A,[responsebuffer+6](0247) x1:              mov        a,[6+_responsebuffer]
                                        (0248)              
1343: 11 30    SUB   A,0x30             (0249) 				 sub        a,48		
1345: 39 00    CMP   A,0x0              (0250) 				 cmp        a,0
1347: A0 08    JZ    0x1350             (0251) 				 jz         x2
1349: 60 E8    MOV   REG[0xE8],A        (0252) 				 mov        reg[MUL_X],a
134B: 62 E9 0A MOV   REG[0xE9],0xA      (0253) 				 mov        reg[MUL_Y],10
134E: 5D EB    MOV   A,REG[0xEB]        (0254) 				 mov        a,reg[MUL_DL]	
                                        (0255) 				
1350: 02 32    ADD   A,[bTablePos+1]    (0256) x2:				 add        a,[counter1]
1352: 4C 32    SWAP  A,[bTablePos+1]    (0257) 				 swap       a,[counter1]
1354: 51 22    MOV   A,[responsebuffer+7](0258) 				 mov        a,[7+_responsebuffer]
1356: 11 30    SUB   A,0x30             (0259) 				 sub        a,48		
1358: 02 32    ADD   A,[bTablePos+1]    (0260) 				 add        a,[counter1]
                                        (0261) 				 
135A: 70 FB    AND   F,0xFB             (0262) 	             and        F,0xfb
135C: 6D       RRC   A                  (0263) 				 rrc        A
135D: 70 FB    AND   F,0xFB             (0264) 				 and        F,0xfb    
135F: 6D       RRC   A                  (0265) 				 rrc        A
1360: 70 FB    AND   F,0xFB             (0266) 				 and        F,0xfb
1362: 6D       RRC   A                  (0267) 				 rrc        A
1363: 70 FB    AND   F,0xFB             (0268) 				 and        F,0xfb
1365: 6D       RRC   A                  (0269) 				 rrc        A
1366: 53 32    MOV   [bTablePos+1],A    (0270) 				 mov        [counter1],a
1368: 9E A9    CALL  0x1213             (0271) 				 call       display_pegel
                                        (0272) 
136A: 7F       RET                      (0273) 				 ret	
                                        (0274) ; command for Psoc that initate 1750 hz sub tone   
                                        (0275) ;                                  Argument : none
                                        (0276) ;                                  return   : none			 
                                        (0277) _kommando_rufton:
136B: 08       PUSH  A                  (0278)                  push      a
136C: 55 31 00 MOV   [bTablePos],0x0    (0279)                  mov       [bTablePos],0
                                        (0280) 				 ;or         reg[ASC21CR0],64
136F: 41 76 7F AND   REG[0x76],0x7F     (0281)                  and        reg[ACB01CR1],0x7f
1372: 43 96 80 OR    REG[0x96],0x80     (0282)                  or         reg[ASC21CR2],0x80
1375: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0283) 				 M8C_ClearWDT
1378: 50 03    MOV   A,0x3              (0284)                  mov       a,3
137A: 7C 0D 60 LCALL _DAC8_1_Start|DAC8_1_SetPower|_DAC8_1_SetPower(0285)                  lcall     DAC8_1_Start
137D: 7C 08 A4 LCALL _Timer8_3_EnableInt(0286)                  lcall     Timer8_3_EnableInt
1380: 50 D7    MOV   A,0xD7             (0287) 				 mov       a,215
1382: 7C 08 B4 LCALL _Timer8_3_WritePeriod(0288) 				 lcall     Timer8_3_WritePeriod
1385: 7C 08 AC LCALL _Timer8_3_Start    (0289)                  lcall     Timer8_3_Start
1388: 90 0E    CALL  w3                 (0290) 				 call      w3
138A: 7C 0E 08 LCALL _DAC8_1_Stop       (0291) 				 lcall     DAC8_1_Stop
138D: 7C 08 B0 LCALL _Timer8_3_Stop     (0292) 				 lcall     Timer8_3_Stop
1390: 41 96 7F AND   REG[0x96],0x7F     (0293) 				 and       reg[ASC21CR2],0x7f
1393: 43 76 80 OR    REG[0x76],0x80     (0294) 				 or        reg[ACB01CR1],0x80
                                        (0295) 				 ;and       reg[ASC21CR0],0xbf
1396: 18       POP   A                  (0296) 				 pop       a
1397: 7F       RET                      (0297) 				 ret
1398: 08       PUSH  A                  (0298) w3:				 push       a
1399: 55 32 FF MOV   [bTablePos+1],0xFF (0299)                  mov       [counter1],255
139C: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0300) w2:				 M8C_ClearWDT
139F: 7C 14 57 LCALL _warte1ms          (0301) 				 lcall     _warte1ms
13A2: 7A 32    DEC   [bTablePos+1]      (0302) 				 dec       [counter1]
                                        (0303) 				 ;cmp       [counter1],0
13A4: BF F7    JNZ   0x139C             (0304) 				 jnz       w2
13A6: 18       POP   A                  (0305) 				 pop       a
13A7: 7F       RET                      (0306) 				 ret		
                                        (0307) ; function for write a Value from Softdds to the Dac
                                        (0308) ; argument       : variable bTablepos for index in the Sinus table
                                        (0309) ; return         : none
                                        (0310) ton_on1:  
13A8: 51 31    MOV   A,[bTablePos]      (0311)                  mov   a,[bTablePos]
13AA: 39 10    CMP   A,0x10             (0312)                  cmp   a,16
13AC: B0 05    JNZ   0x13B2             (0313)                  jnz   l1
13AE: 50 00    MOV   A,0x0              (0314)                  mov   a,0
13B0: 53 31    MOV   [bTablePos],A      (0315)                  mov   [bTablePos],a   
                                        (0316) l1:              
13B2: F0 92    INDEX 0x1446             (0317) 				 index  SINtable
13B4: 7C 0D 76 LCALL _DAC8_1_WriteBlind (0318)                  lcall  DAC8_1_WriteBlind
13B7: 76 31    INC   [bTablePos]        (0319)                  inc   [bTablePos] 
                                        (0320)                 ; mov   a,[_counter]
                                        (0321)                 ; cmp   a,00
                                        (0322)                 ; jnz   ton_on1
13B9: 7F       RET                      (0323)                  ret
13BA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0324) ; function for wait until the PTT button down
                                        (0325) ; argument: none
                                        (0326) ; return  : none
                                        (0327) _wait_ptt:       M8C_ClearWDT
13BD: 49 04 20 TST   REG[0x4],0x20      (0328)                  tst    reg[PRT1DR],0x20
13C0: AF F9    JZ    _wait_ptt          (0329)                  jz     _wait_ptt
13C2: 7F       RET                      (0330) 				 ret
                                        (0331) 				 
                                        (0332) _setgroup_response:
                                        (0333)                  
13C3: 50 0E    MOV   A,0xE              (0334)                  mov      a,14
                                        (0335) ; function  read the response from the DRA 818 Chip 
                                        (0336) ; argument : how many bytes to read in the A Register
                                        (0337) responsedata:
13C5: 53 2F    MOV   [responsebuffer+20],A(0338)                  mov      [speicher],a
13C7: 7C 07 FC LCALL _UART_1_cGetChar   (0339)                  lcall    UART_1_cGetChar 
13CA: 57 00    MOV   X,0x0              (0340) 				 mov      x,0
13CC: 7C 07 FC LCALL _UART_1_cGetChar   (0341) loop:            lcall    UART_1_cGetChar
13CF: 54 1B    MOV   [X+27],A           (0342)                  mov      [x+_responsebuffer],a
13D1: 75       INC   X                  (0343) 				 inc      x
13D2: 5B       MOV   A,X                (0344) 				 mov      a,x
13D3: 3A 2F    CMP   A,[responsebuffer+20](0345) 				 cmp      a,[speicher]
13D5: BF F6    JNZ   0x13CC             (0346) 				 jnz      loop
13D7: 7F       RET                      (0347) 				 ret				 	
                                        (0348) ;
                                        (0349) 
                                        (0350)                  
                                        (0351) 
                                        (0352) ;--------------------------------------------------------------------------------
                                        (0353) ;
                                        (0354) ; String Table
                                        (0355) ;
                                        (0356) ;--------------------------------------------------------------------------------
                                        (0357) .LITERAL 
                                        (0358) 
                                        (0359) Str_Welcome:     ds     "VHF FM Funke DL1BQF V1.01" ;welcome Message on Display at Device Start
                                        (0360)                  db     00
                                        (0361) ; do not change this area 
                                        (0362) 
                                        (0363) ;############################################################################################
                                        (0364) dmovolume:	     DS 	"AT+DMOSETVOLUME="
                                        (0365) 	             DB 	00
                                        (0366) dmofilter:		 ds     "AT+SETFILTER="
                                        (0367)                  db     00
                                        (0368) voerror:		 ds     "Vo"
                                        (0369)                  db     00
                                        (0370) filterror:       ds     "Fi"
                                        (0371)                  db     00
                                        (0372) ;batstr:          ds     " Bat:"
                                        (0373)  ;                db     00
                                        (0374) ;tailerror:		 ds     "Ta"
                                        (0375)  ;                db     00
                                        (0376) heartbeat:		 DS	    "AT+DMOCONNECT"
                                        (0377)                  db     00
                                        (0378) coerror:         ds     "Co"
                                        (0379)                  db     00
                                        (0380) ;volstr:          ds     " Vol:"
                                        (0381) ;                 db     00
                                        (0382) fil0:			 ds     "1,1,1"
                                        (0383)                  db     00
                                        (0384) fil1:            ds		"0,1,1"
                                        (0385)                  db     00
                                        (0386) fil2:            ds     "1,0,1"
                                        (0387)                  db     00
                                        (0388) fil3:            ds     "1,1,0"
                                        (0389)                  db     00
                                        (0390) rssi:            ds     "RSSI?"
                                        (0391)                  db     00
                                        (0392) ;_rufton:         ds     "AT+SETTAIL="
                                        (0393) ;                db     00
                                        (0394) ;------------------------------------------------------------------------------------------
                                        (0395) ;
                                        (0396) ;  sinus lookup Tabelle
                                        (0397) ;
                                        (0398) ;------------------------------------------------------------------------------------------
                                        (0399) 
                                        (0400) SINtable:    
                                        (0401) ;db 0,1,2,2,3,3,4,6,8,10,13,16,19,22,26,30,34,38,42,45,48,50,52,54,56,57,57,58,58,59,60,60
                                        (0402) ;db 60,59,58,58,57,57,56,54,52,50,48,45,42,38,34,30,26,22,19,16,13,10,8,6,4,3,3,2,2,1,0,0 
                                        (0403) db  0,3,6,12,24,34,48,50,50,48,36,26,16,8,4,1,0				 
                                        (0404) .ENDLITERAL FILE: F:\PSOCDE~1.4PR\fmfunke2\fmfunke2\main.c
(0001)   //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h" // PSoC API definitions for all User Module
(0007) #include <string.h>
(0008) #include <stdlib.h>
(0009) #include <stdio.h>
(0010) extern void kommando_setvol(void);
(0011) extern void kommando_setfilter(void);
(0012) extern void kommando_heartbeat(void);
(0013) extern void lcdInit(void);
(0014) extern void clear_LCD(void);
(0015) extern void kommando_rssi(void);
(0016) extern void kommando_rufton(void);
(0017) extern void setgroup_response(void);
(0018) extern void wait_ptt(void );
(0019) extern void ton_on(void);
(0020) extern void print_vol(void);
(0021) extern char responsebuffer[];
(0022) extern unsigned char filter,counter;
(0023) //extern unsigned char TXstatus2;//,TXstatus2,Squelch;
(0024) //char lptext[]="LP ",hptext[]="HP ",pretext[]="PRE";	
(0025) //char offtext[]="off",sqtext[]="SQ:",modetext[]="Mode:";
(0026) unsigned char TXstatus;// Status Bit 0=channel space 25 khz/1=channel space 12,5 khz ;Bit 1=simplex/duplex; Bit 2= hfpower low/high;bit 3 =ablage plus/minus;                    
(0027) //Bit 4= PTT is off/on ; Bit 5 Rufton on/off;Bit 6 = 0 vox off/on; Bit 7 = 0 Menustatus off/on
(0028) unsigned char TXstatus2;  //Bit 0  0=Normal/1= Aprs mode Bit 1 = 0 APRS Daten valid/ 1 Aprs Daten ready 
(0029) unsigned char direction;
(0030) int shift;
(0031) long int frequenz;
(0032) unsigned char volume,Squelch;//squelch wert 0-8
(0033) unsigned char filter;//filter 1 =Pre/DE, 2=Hihghpass, 3=Lowpass  0---> all filter off
(0034) unsigned char micgain;
(0035) 
(0036) 
(0037) /* function delay for 1 millisecond
(0038)    Argument : none
(0039)    Return   : none
(0040) #########################################################################################################################*/
(0041) void warte1ms(void)
(0042) {
(0043) 	 LCD_1_Delay50uTimes(20);
_warte1ms:
    1457: 10       PUSH  X
    1458: 50 14    MOV   A,0x14
    145A: 7C 0B B2 LCALL _LCD_1_Delay50uTimes
    145D: 20       POP   X
    145E: 7F       RET   
(0044) 	
(0045) }
(0046) /* function delay 
(0047)    Argument : how many millisecond wait
(0048)    Return   : none
(0049) #########################################################################################################################*/
(0050) void warte(unsigned int e)
(0051) {
_warte:
  i                    --> X+0
  e                    --> X-5
    145F: 10       PUSH  X
    1460: 4F       MOV   X,SP
    1461: 38 02    ADD   SP,0x2
(0052) register unsigned int i;
(0053)  for (i=1;i<e;i++)
    1463: 56 01 01 MOV   [X+1],0x1
    1466: 56 00 00 MOV   [X+0],0x0
    1469: 80 08    JMP   0x1472
(0054) 	                         {
(0055) 							  warte1ms();	
    146B: 9F EA    CALL  _warte1ms
(0056) 	                          }
    146D: 77 01    INC   [X+1]
    146F: 0F 00 00 ADC   [X+0],0x0
    1472: 52 01    MOV   A,[X+1]
    1474: 13 FC    SUB   A,[X-4]
    1476: 52 00    MOV   A,[X+0]
    1478: 1B FB    SBB   A,[X-5]
    147A: CF F0    JC    0x146B
    147C: 38 FE    ADD   SP,0xFE
    147E: 20       POP   X
    147F: 7F       RET   
(0057) }
(0058) /* function wait for menu button down
(0059)    Argument : none
(0060)    Return   : none
(0061) #########################################################################################################################*/
(0062) void    menu_taste_down(void)
(0063) {
_menu_taste_down:
    1480: 80 0E    JMP   0x148F
(0064) while 	((PRT1DR & 16)!=16){
(0065) 							warte(100);
    1482: 50 00    MOV   A,0x0
    1484: 08       PUSH  A
    1485: 50 64    MOV   A,0x64
    1487: 08       PUSH  A
    1488: 9F D5    CALL  _warte
    148A: 38 FE    ADD   SP,0xFE
(0066) 							M8C_ClearWDT;														
    148C: 62 E3 00 MOV   REG[0xE3],0x0
(0067) 					      	} 
    148F: 5D 04    MOV   A,REG[0x4]
    1491: 21 10    AND   A,0x10
    1493: 39 10    CMP   A,0x10
    1495: BF EC    JNZ   0x1482
    1497: 7F       RET   
(0068) }
(0069) /* function Print the Frequency on display and print the Frequency to the CAT USB Port
(0070)    Argument : none
(0071)    Return   : none
(0072) #########################################################################################################################*/
(0073) void Print_Frequenz (void )
(0074) {
_Print_Frequenz:
  e                    --> X+9
  c                    --> X+4
  d                    --> X+0
    1498: 10       PUSH  X
    1499: 4F       MOV   X,SP
    149A: 38 14    ADD   SP,0x14
(0075) char e[11];
(0076) char d[4];
(0077) char c[5];	
(0078) 	
(0079) 	if ((TXstatus & 18)==18){ 
    149C: 51 3F    MOV   A,[TXstatus]
    149E: 21 12    AND   A,0x12
    14A0: 39 12    CMP   A,0x12
    14A2: B0 AC    JNZ   0x154F
(0080)                            if ((TXstatus & 8)==0){
    14A4: 47 3F 08 TST   [TXstatus],0x8
    14A7: B0 54    JNZ   0x14FC
(0081) 		                                           ltoa(e,frequenz-shift,10);
    14A9: 50 00    MOV   A,0x0
    14AB: 08       PUSH  A
    14AC: 50 0A    MOV   A,0xA
    14AE: 08       PUSH  A
    14AF: 5F 07 3C MOV   [__r3],[shift+1]
    14B2: 5F 08 3B MOV   [__r2],[shift]
    14B5: 47 08 80 TST   [__r2],0x80
    14B8: A0 09    JZ    0x14C2
    14BA: 55 09 FF MOV   [__r1],0xFF
    14BD: 55 0A FF MOV   [__r0],0xFF
    14C0: 80 07    JMP   0x14C8
    14C2: 55 09 00 MOV   [__r1],0x0
    14C5: 55 0A 00 MOV   [__r0],0x0
    14C8: 51 3A    MOV   A,[frequenz+3]
    14CA: 12 07    SUB   A,[__r3]
    14CC: 53 07    MOV   [__r3],A
    14CE: 51 39    MOV   A,[frequenz+2]
    14D0: 1A 08    SBB   A,[__r2]
    14D2: 53 08    MOV   [__r2],A
    14D4: 51 38    MOV   A,[frequenz+1]
    14D6: 1A 09    SBB   A,[__r1]
    14D8: 53 09    MOV   [__r1],A
    14DA: 51 37    MOV   A,[frequenz]
    14DC: 1A 0A    SBB   A,[__r0]
    14DE: 53 0A    MOV   [__r0],A
    14E0: 08       PUSH  A
    14E1: 51 09    MOV   A,[__r1]
    14E3: 08       PUSH  A
    14E4: 51 08    MOV   A,[__r2]
    14E6: 08       PUSH  A
    14E7: 51 07    MOV   A,[__r3]
    14E9: 08       PUSH  A
    14EA: 5A 09    MOV   [__r1],X
    14EC: 06 09 09 ADD   [__r1],0x9
    14EF: 51 0A    MOV   A,[__r0]
    14F1: 08       PUSH  A
    14F2: 51 09    MOV   A,[__r1]
    14F4: 08       PUSH  A
    14F5: 7C 2F C3 LCALL _ltoa
    14F8: 38 F8    ADD   SP,0xF8
(0082) 							                       }
    14FA: 80 76    JMP   0x1571
(0083) 										else
(0084) 							                       {
(0085) 											        ltoa(e,frequenz+shift,10);
    14FC: 50 00    MOV   A,0x0
    14FE: 08       PUSH  A
    14FF: 50 0A    MOV   A,0xA
    1501: 08       PUSH  A
    1502: 5F 07 3C MOV   [__r3],[shift+1]
    1505: 5F 08 3B MOV   [__r2],[shift]
    1508: 47 08 80 TST   [__r2],0x80
    150B: A0 09    JZ    0x1515
    150D: 55 09 FF MOV   [__r1],0xFF
    1510: 55 0A FF MOV   [__r0],0xFF
    1513: 80 07    JMP   0x151B
    1515: 55 09 00 MOV   [__r1],0x0
    1518: 55 0A 00 MOV   [__r0],0x0
    151B: 51 3A    MOV   A,[frequenz+3]
    151D: 02 07    ADD   A,[__r3]
    151F: 53 07    MOV   [__r3],A
    1521: 51 39    MOV   A,[frequenz+2]
    1523: 0A 08    ADC   A,[__r2]
    1525: 53 08    MOV   [__r2],A
    1527: 51 38    MOV   A,[frequenz+1]
    1529: 0A 09    ADC   A,[__r1]
    152B: 53 09    MOV   [__r1],A
    152D: 51 37    MOV   A,[frequenz]
    152F: 0A 0A    ADC   A,[__r0]
    1531: 53 0A    MOV   [__r0],A
    1533: 08       PUSH  A
    1534: 51 09    MOV   A,[__r1]
    1536: 08       PUSH  A
    1537: 51 08    MOV   A,[__r2]
    1539: 08       PUSH  A
    153A: 51 07    MOV   A,[__r3]
    153C: 08       PUSH  A
    153D: 5A 09    MOV   [__r1],X
    153F: 06 09 09 ADD   [__r1],0x9
    1542: 51 0A    MOV   A,[__r0]
    1544: 08       PUSH  A
    1545: 51 09    MOV   A,[__r1]
    1547: 08       PUSH  A
    1548: 7C 2F C3 LCALL _ltoa
    154B: 38 F8    ADD   SP,0xF8
(0086) 													}
(0087) 	                        }
    154D: 80 23    JMP   0x1571
(0088) 	               else     
(0089)                        	{
(0090) 							ltoa(e,frequenz,10);
    154F: 50 00    MOV   A,0x0
    1551: 08       PUSH  A
    1552: 50 0A    MOV   A,0xA
    1554: 08       PUSH  A
    1555: 51 37    MOV   A,[frequenz]
    1557: 08       PUSH  A
    1558: 51 38    MOV   A,[frequenz+1]
    155A: 08       PUSH  A
    155B: 51 39    MOV   A,[frequenz+2]
    155D: 08       PUSH  A
    155E: 51 3A    MOV   A,[frequenz+3]
    1560: 08       PUSH  A
    1561: 5A 09    MOV   [__r1],X
    1563: 06 09 09 ADD   [__r1],0x9
    1566: 51 0A    MOV   A,[__r0]
    1568: 08       PUSH  A
    1569: 51 09    MOV   A,[__r1]
    156B: 08       PUSH  A
    156C: 7C 2F C3 LCALL _ltoa
    156F: 38 F8    ADD   SP,0xF8
(0091) 				          
(0092) 	                     }		
(0093)     strncpy(d,e+0,3);
    1571: 50 00    MOV   A,0x0
    1573: 08       PUSH  A
    1574: 50 03    MOV   A,0x3
    1576: 08       PUSH  A
    1577: 5A 09    MOV   [__r1],X
    1579: 06 09 09 ADD   [__r1],0x9
    157C: 51 0A    MOV   A,[__r0]
    157E: 08       PUSH  A
    157F: 51 09    MOV   A,[__r1]
    1581: 08       PUSH  A
    1582: 51 0A    MOV   A,[__r0]
    1584: 08       PUSH  A
    1585: 10       PUSH  X
    1586: 7C 36 7C LCALL _strncpy
(0094) 	d[3]='\0';
    1589: 56 03 00 MOV   [X+3],0x0
(0095) 	strncpy(c,e+3,4); 
    158C: 50 00    MOV   A,0x0
    158E: 08       PUSH  A
    158F: 50 04    MOV   A,0x4
    1591: 08       PUSH  A
    1592: 5A 09    MOV   [__r1],X
    1594: 06 09 0C ADD   [__r1],0xC
    1597: 51 0A    MOV   A,[__r0]
    1599: 08       PUSH  A
    159A: 51 09    MOV   A,[__r1]
    159C: 08       PUSH  A
    159D: 5A 09    MOV   [__r1],X
    159F: 06 09 04 ADD   [__r1],0x4
    15A2: 51 0A    MOV   A,[__r0]
    15A4: 08       PUSH  A
    15A5: 51 09    MOV   A,[__r1]
    15A7: 08       PUSH  A
    15A8: 7C 36 7C LCALL _strncpy
    15AB: 38 F4    ADD   SP,0xF4
(0096) 	c[4]='\0';						
    15AD: 56 08 00 MOV   [X+8],0x0
(0097) 						LCD_1_Position(0,0);
    15B0: 10       PUSH  X
    15B1: 50 00    MOV   A,0x0
    15B3: 57 00    MOV   X,0x0
    15B5: 7C 0B A6 LCALL _LCD_1_Position
(0098) 						LCD_1_PrCString("QRG:");
    15B8: 50 02    MOV   A,0x2
    15BA: 08       PUSH  A
    15BB: 50 2B    MOV   A,0x2B
    15BD: 5C       MOV   X,A
    15BE: 18       POP   A
    15BF: 7C 0A 35 LCALL _LCD_1_PrCString
    15C2: 20       POP   X
(0099)     					LCD_1_PrString(d);				
    15C3: 10       PUSH  X
    15C4: 51 0A    MOV   A,[__r0]
    15C6: 7C 0A 71 LCALL _LCD_1_PrString
(0100) 						LCD_1_WriteData(0x2e);
    15C9: 50 2E    MOV   A,0x2E
    15CB: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data
    15CE: 20       POP   X
(0101)     					LCD_1_PrString(c);
    15CF: 5A 09    MOV   [__r1],X
    15D1: 06 09 04 ADD   [__r1],0x4
    15D4: 10       PUSH  X
    15D5: 51 0A    MOV   A,[__r0]
    15D7: 08       PUSH  A
    15D8: 51 09    MOV   A,[__r1]
    15DA: 5C       MOV   X,A
    15DB: 18       POP   A
    15DC: 7C 0A 71 LCALL _LCD_1_PrString
(0102) 
(0103) 				        UART_2_CPutString("TRX Status:");	
    15DF: 50 02    MOV   A,0x2
    15E1: 08       PUSH  A
    15E2: 50 1F    MOV   A,0x1F
    15E4: 5C       MOV   X,A
    15E5: 18       POP   A
    15E6: 7C 06 D2 LCALL _UART_2_CPutString
    15E9: 20       POP   X
(0104) 				        UART_2_PutString(d);	
    15EA: 10       PUSH  X
    15EB: 51 0A    MOV   A,[__r0]
    15ED: 7C 06 88 LCALL _UART_2_PutString
(0105) 				        UART_2_PutChar(0x2e);					
    15F0: 50 2E    MOV   A,0x2E
    15F2: 7C 06 4B LCALL _UART_2_PutChar
    15F5: 20       POP   X
(0106) 				        UART_2_PutString(c);
    15F6: 5A 09    MOV   [__r1],X
    15F8: 06 09 04 ADD   [__r1],0x4
    15FB: 10       PUSH  X
    15FC: 51 0A    MOV   A,[__r0]
    15FE: 08       PUSH  A
    15FF: 51 09    MOV   A,[__r1]
    1601: 5C       MOV   X,A
    1602: 18       POP   A
    1603: 7C 06 88 LCALL _UART_2_PutString
(0107) 				        UART_2_PutCRLF();
    1606: 7C 06 E4 LCALL _UART_2_PutCRLF
    1609: 20       POP   X
    160A: 38 EC    ADD   SP,0xEC
    160C: 20       POP   X
    160D: 7F       RET   
(0108) }
(0109) /* function read or Write changes from the HAM to EEprom
(0110)    Argument : char 1 for Read  or 0 for Write
(0111)    Return   : none
(0112) #########################################################################################################################*/
(0113) void eprom(unsigned char x)
(0114) {
_eprom:
  status               --> X+64
  f                    --> X+0
  x                    --> X-4
    160E: 10       PUSH  X
    160F: 4F       MOV   X,SP
    1610: 38 41    ADD   SP,0x41
(0115) BYTE f[64];
(0116) unsigned char status;
(0117) E2PROM_1_Start();	
    1612: 10       PUSH  X
    1613: 7C 0D 47 LCALL _E2PROM_1_Start
    1616: 20       POP   X
(0118) if (x==1) {
    1617: 3D FC 01 CMP   [X-4],0x1
    161A: B0 88    JNZ   0x16A3
(0119) 	       
(0120)            E2PROM_1_E2Read( 0,f,64);
    161C: 10       PUSH  X
    161D: 50 00    MOV   A,0x0
    161F: 08       PUSH  A
    1620: 50 40    MOV   A,0x40
    1622: 08       PUSH  A
    1623: 51 0A    MOV   A,[__r0]
    1625: 08       PUSH  A
    1626: 10       PUSH  X
    1627: 50 00    MOV   A,0x0
    1629: 08       PUSH  A
    162A: 08       PUSH  A
    162B: 7C 0D 55 LCALL _E2PROM_1_E2Read
    162E: 38 FA    ADD   SP,0xFA
    1630: 20       POP   X
(0121)            if ((f[1]!=0x30)&&(f[2]!=0x30))
    1631: 3D 01 30 CMP   [X+1],0x30
    1634: A0 48    JZ    0x167D
    1636: 3D 02 30 CMP   [X+2],0x30
    1639: A0 43    JZ    0x167D
(0122)                                 {
(0123) 								  frequenz=atol(f);
    163B: 51 0A    MOV   A,[__r0]
    163D: 08       PUSH  A
    163E: 10       PUSH  X
    163F: 7C 2D 15 LCALL _atol
    1642: 5F 37 0A MOV   [frequenz],[__r0]
    1645: 5F 38 09 MOV   [frequenz+1],[__r1]
    1648: 5F 39 08 MOV   [frequenz+2],[__r2]
    164B: 5F 3A 07 MOV   [frequenz+3],[__r3]
(0124) 								  shift=atoi(f+8);
    164E: 5A 09    MOV   [__r1],X
    1650: 06 09 08 ADD   [__r1],0x8
    1653: 51 0A    MOV   A,[__r0]
    1655: 08       PUSH  A
    1656: 51 09    MOV   A,[__r1]
    1658: 08       PUSH  A
    1659: 7C 2C 09 LCALL _atoi
    165C: 38 FC    ADD   SP,0xFC
    165E: 5F 3C 09 MOV   [shift+1],[__r1]
    1661: 5F 3B 0A MOV   [shift],[__r0]
(0125) 	                              filter=f[12];
    1664: 52 0C    MOV   A,[X+12]
    1666: 53 40    MOV   [filter],A
(0126) 	                              Squelch=f[13];
    1668: 52 0D    MOV   A,[X+13]
    166A: 53 35    MOV   [Squelch],A
(0127) 								  volume=f[14];
    166C: 52 0E    MOV   A,[X+14]
    166E: 53 36    MOV   [volume],A
(0128) 								  TXstatus=f[15];
    1670: 52 0F    MOV   A,[X+15]
    1672: 53 3F    MOV   [TXstatus],A
(0129) 								  micgain=f[16];
    1674: 52 10    MOV   A,[X+16]
    1676: 53 34    MOV   [micgain],A
(0130) 								  TXstatus &=0x7f;
    1678: 26 3F 7F AND   [TXstatus],0x7F
(0131) 								}	
    167B: 80 8D    JMP   0x1709
(0132) 			else 
(0133) 								{
(0134) 								frequenz=1448000;
    167D: 55 37 00 MOV   [frequenz],0x0
    1680: 55 38 16 MOV   [frequenz+1],0x16
    1683: 55 39 18 MOV   [frequenz+2],0x18
    1686: 55 3A 40 MOV   [frequenz+3],0x40
(0135) 									shift=6000;
    1689: 55 3C 70 MOV   [shift+1],0x70
    168C: 55 3B 17 MOV   [shift],0x17
(0136) 									filter=3;
    168F: 55 40 03 MOV   [filter],0x3
(0137) 									Squelch=2;
    1692: 55 35 02 MOV   [Squelch],0x2
(0138) 									volume=2;
    1695: 55 36 02 MOV   [volume],0x2
(0139) 									TXstatus=5;
    1698: 55 3F 05 MOV   [TXstatus],0x5
(0140) 									TXstatus2=0;
    169B: 55 3E 00 MOV   [TXstatus2],0x0
(0141) 									micgain=5;
    169E: 55 34 05 MOV   [micgain],0x5
(0142) 								}
(0143)          }						
    16A1: 80 67    JMP   0x1709
(0144)    else 									  
(0145) 		{	
(0146) 			ltoa(f,frequenz,10);
    16A3: 50 00    MOV   A,0x0
    16A5: 08       PUSH  A
    16A6: 50 0A    MOV   A,0xA
    16A8: 08       PUSH  A
    16A9: 51 37    MOV   A,[frequenz]
    16AB: 08       PUSH  A
    16AC: 51 38    MOV   A,[frequenz+1]
    16AE: 08       PUSH  A
    16AF: 51 39    MOV   A,[frequenz+2]
    16B1: 08       PUSH  A
    16B2: 51 3A    MOV   A,[frequenz+3]
    16B4: 08       PUSH  A
    16B5: 51 0A    MOV   A,[__r0]
    16B7: 08       PUSH  A
    16B8: 10       PUSH  X
    16B9: 7C 2F C3 LCALL _ltoa
(0147) 			f[7]=32;
    16BC: 56 07 20 MOV   [X+7],0x20
(0148) 			itoa(f+8,shift,10);
    16BF: 50 00    MOV   A,0x0
    16C1: 08       PUSH  A
    16C2: 50 0A    MOV   A,0xA
    16C4: 08       PUSH  A
    16C5: 51 3B    MOV   A,[shift]
    16C7: 08       PUSH  A
    16C8: 51 3C    MOV   A,[shift+1]
    16CA: 08       PUSH  A
    16CB: 5A 09    MOV   [__r1],X
    16CD: 06 09 08 ADD   [__r1],0x8
    16D0: 51 0A    MOV   A,[__r0]
    16D2: 08       PUSH  A
    16D3: 51 09    MOV   A,[__r1]
    16D5: 08       PUSH  A
    16D6: 7C 2E 46 LCALL _itoa
    16D9: 38 F2    ADD   SP,0xF2
(0149) 			f[12]=filter;
    16DB: 51 40    MOV   A,[filter]
    16DD: 54 0C    MOV   [X+12],A
(0150) 			f[13]=Squelch;
    16DF: 51 35    MOV   A,[Squelch]
    16E1: 54 0D    MOV   [X+13],A
(0151) 			f[14]=volume;
    16E3: 51 36    MOV   A,[volume]
    16E5: 54 0E    MOV   [X+14],A
(0152) 			f[15]=TXstatus;
    16E7: 51 3F    MOV   A,[TXstatus]
    16E9: 54 0F    MOV   [X+15],A
(0153) 			f[16]=micgain;
    16EB: 51 34    MOV   A,[micgain]
    16ED: 54 10    MOV   [X+16],A
(0154) 		
(0155) 		status= E2PROM_1_bE2Write(0,f,64,25);	
    16EF: 10       PUSH  X
    16F0: 50 19    MOV   A,0x19
    16F2: 08       PUSH  A
    16F3: 50 00    MOV   A,0x0
    16F5: 08       PUSH  A
    16F6: 50 40    MOV   A,0x40
    16F8: 08       PUSH  A
    16F9: 51 0A    MOV   A,[__r0]
    16FB: 08       PUSH  A
    16FC: 10       PUSH  X
    16FD: 50 00    MOV   A,0x0
    16FF: 08       PUSH  A
    1700: 08       PUSH  A
    1701: 7C 0D 49 LCALL _E2PROM_1_bE2Write
    1704: 38 F9    ADD   SP,0xF9
    1706: 20       POP   X
    1707: 54 40    MOV   [X+64],A
(0156) 		}
(0157) 	E2PROM_1_Stop();	
    1709: 10       PUSH  X
    170A: 7C 0D 48 LCALL _E2PROM_1_Stop
    170D: 20       POP   X
    170E: 38 BF    ADD   SP,0xBF
    1710: 20       POP   X
    1711: 7F       RET   
(0158)  }
(0159) /*void get_response(unsigned char anzahl)
(0160)                            {
(0161) 						    register unsigned char i;
(0162) 							responsebuffer[0]=UART_1_cGetChar();
(0163) 							for (i=0;i<anzahl-1;i++){
(0164) 								              responsebuffer[i]=UART_1_cGetChar();
(0165)                     	                      }			
(0166) 							}
(0167) */
(0168) /* function measure the volt from the Device
(0169)    Argument : none
(0170)    Return   : float measure Value in Volt
(0171) #########################################################################################################################*/
(0172) float get_voltage(void)
(0173) {		
_get_voltage:
  sp                   --> X+4
  mess                 --> X+2
  mess1                --> X+1
  i                    --> X+0
    1712: 10       PUSH  X
    1713: 4F       MOV   X,SP
    1714: 38 08    ADD   SP,0x8
(0174) int mess;
(0175) char mess1;
(0176) float sp;	
(0177) register unsigned char i;
(0178)     mess=0;
    1716: 56 03 00 MOV   [X+3],0x0
    1719: 56 02 00 MOV   [X+2],0x0
(0179) 	PGA_1_Start(PGA_1_HIGHPOWER);
    171C: 10       PUSH  X
    171D: 50 03    MOV   A,0x3
    171F: 7C 0A 01 LCALL _PGA_1_Start|PGA_1_SetPower|PGA_1_Start|_PGA_1_SetPower
(0180) 	ADCINC_1_Start(ADCINC_1_HIGHPOWER);
    1722: 50 03    MOV   A,0x3
    1724: 7C 0E 7C LCALL _ADCINC_1_Start
(0181) 	ADCINC_1_GetSamples(0);
    1727: 50 00    MOV   A,0x0
    1729: 7C 0E A6 LCALL _ADCINC_1_GetSamples
    172C: 20       POP   X
(0182) 	warte(100);
    172D: 50 00    MOV   A,0x0
    172F: 08       PUSH  A
    1730: 50 64    MOV   A,0x64
    1732: 08       PUSH  A
    1733: 9D 2A    CALL  _warte
    1735: 38 FE    ADD   SP,0xFE
(0183) 	for (i=1;i<11;i++)
    1737: 56 00 01 MOV   [X+0],0x1
    173A: 80 23    JMP   0x175E
(0184) 	                         {
(0185) 							 while (ADCINC_1_fIsDataAvailable() == 0){
(0186) 							                                 }
    173C: 10       PUSH  X
    173D: 7C 0E CC LCALL _ADCINC_1_fIsDataAvailable
    1740: 20       POP   X
    1741: 39 00    CMP   A,0x0
    1743: AF F8    JZ    0x173C
(0187)                             mess1=ADCINC_1_bClearFlagGetData();							
    1745: 10       PUSH  X
    1746: 7C 0E DC LCALL ADCINC_1_bClearFlagGetData|ADCINC_1_cClearFlagGetData|_ADCINC_1_cClearFlagGetData|_ADCINC_1_bClearFlagGetData
    1749: 20       POP   X
    174A: 54 01    MOV   [X+1],A
(0188) 							mess=mess+mess1;
    174C: 52 01    MOV   A,[X+1]
    174E: 05 03    ADD   [X+3],A
    1750: 50 00    MOV   A,0x0
    1752: 0F 02 00 ADC   [X+2],0x0
(0189) 							mess1=ADCINC_1_fClearFlag();
    1755: 10       PUSH  X
    1756: 7C 0E EA LCALL _ADCINC_1_fClearFlag
    1759: 20       POP   X
    175A: 54 01    MOV   [X+1],A
(0190) 	                          }						
    175C: 77 00    INC   [X+0]
    175E: 3D 00 0B CMP   [X+0],0xB
    1761: CF DA    JC    0x173C
(0191) 	sp=(mess/10)*0.012890625;				
    1763: 50 00    MOV   A,0x0
    1765: 08       PUSH  A
    1766: 50 0A    MOV   A,0xA
    1768: 08       PUSH  A
    1769: 52 02    MOV   A,[X+2]
    176B: 08       PUSH  A
    176C: 52 03    MOV   A,[X+3]
    176E: 08       PUSH  A
    176F: 7C 26 41 LCALL 0x2641
    1772: 18       POP   A
    1773: 53 09    MOV   [__r1],A
    1775: 18       POP   A
    1776: 38 FE    ADD   SP,0xFE
    1778: 5F 07 09 MOV   [__r3],[__r1]
    177B: 53 08    MOV   [__r2],A
    177D: 47 08 80 TST   [__r2],0x80
    1780: A0 09    JZ    0x178A
    1782: 55 09 FF MOV   [__r1],0xFF
    1785: 55 0A FF MOV   [__r0],0xFF
    1788: 80 07    JMP   0x1790
    178A: 55 09 00 MOV   [__r1],0x0
    178D: 55 0A 00 MOV   [__r0],0x0
    1790: 51 0A    MOV   A,[__r0]
    1792: 08       PUSH  A
    1793: 51 09    MOV   A,[__r1]
    1795: 08       PUSH  A
    1796: 51 08    MOV   A,[__r2]
    1798: 08       PUSH  A
    1799: 51 07    MOV   A,[__r3]
    179B: 08       PUSH  A
    179C: 7C 2B 24 LCALL 0x2B24
    179F: 18       POP   A
    17A0: 53 07    MOV   [__r3],A
    17A2: 18       POP   A
    17A3: 53 08    MOV   [__r2],A
    17A5: 18       POP   A
    17A6: 53 09    MOV   [__r1],A
    17A8: 18       POP   A
    17A9: 08       PUSH  A
    17AA: 51 09    MOV   A,[__r1]
    17AC: 08       PUSH  A
    17AD: 51 08    MOV   A,[__r2]
    17AF: 08       PUSH  A
    17B0: 51 07    MOV   A,[__r3]
    17B2: 08       PUSH  A
    17B3: 50 3C    MOV   A,0x3C
    17B5: 08       PUSH  A
    17B6: 50 53    MOV   A,0x53
    17B8: 08       PUSH  A
    17B9: 50 33    MOV   A,0x33
    17BB: 08       PUSH  A
    17BC: 08       PUSH  A
    17BD: 7C 29 BF LCALL 0x29BF
    17C0: 18       POP   A
    17C1: 54 07    MOV   [X+7],A
    17C3: 18       POP   A
    17C4: 54 06    MOV   [X+6],A
    17C6: 18       POP   A
    17C7: 54 05    MOV   [X+5],A
    17C9: 18       POP   A
    17CA: 54 04    MOV   [X+4],A
    17CC: 38 FC    ADD   SP,0xFC
(0192) 	sp=((26.8*sp)/6.8)+0.5;	
    17CE: 52 04    MOV   A,[X+4]
    17D0: 08       PUSH  A
    17D1: 52 05    MOV   A,[X+5]
    17D3: 08       PUSH  A
    17D4: 52 06    MOV   A,[X+6]
    17D6: 08       PUSH  A
    17D7: 52 07    MOV   A,[X+7]
    17D9: 08       PUSH  A
    17DA: 50 41    MOV   A,0x41
    17DC: 08       PUSH  A
    17DD: 50 D6    MOV   A,0xD6
    17DF: 08       PUSH  A
    17E0: 50 66    MOV   A,0x66
    17E2: 08       PUSH  A
    17E3: 08       PUSH  A
    17E4: 7C 29 BF LCALL 0x29BF
    17E7: 18       POP   A
    17E8: 53 07    MOV   [__r3],A
    17EA: 18       POP   A
    17EB: 53 08    MOV   [__r2],A
    17ED: 18       POP   A
    17EE: 53 09    MOV   [__r1],A
    17F0: 18       POP   A
    17F1: 53 0A    MOV   [__r0],A
    17F3: 38 FC    ADD   SP,0xFC
    17F5: 50 40    MOV   A,0x40
    17F7: 08       PUSH  A
    17F8: 50 D9    MOV   A,0xD9
    17FA: 08       PUSH  A
    17FB: 50 99    MOV   A,0x99
    17FD: 08       PUSH  A
    17FE: 50 9A    MOV   A,0x9A
    1800: 08       PUSH  A
    1801: 51 0A    MOV   A,[__r0]
    1803: 08       PUSH  A
    1804: 51 09    MOV   A,[__r1]
    1806: 08       PUSH  A
    1807: 51 08    MOV   A,[__r2]
    1809: 08       PUSH  A
    180A: 51 07    MOV   A,[__r3]
    180C: 08       PUSH  A
    180D: 7C 28 E2 LCALL 0x28E2
    1810: 18       POP   A
    1811: 53 07    MOV   [__r3],A
    1813: 18       POP   A
    1814: 53 08    MOV   [__r2],A
    1816: 18       POP   A
    1817: 53 09    MOV   [__r1],A
    1819: 18       POP   A
    181A: 53 0A    MOV   [__r0],A
    181C: 38 FC    ADD   SP,0xFC
    181E: 50 3F    MOV   A,0x3F
    1820: 08       PUSH  A
    1821: 50 00    MOV   A,0x0
    1823: 08       PUSH  A
    1824: 08       PUSH  A
    1825: 08       PUSH  A
    1826: 51 0A    MOV   A,[__r0]
    1828: 08       PUSH  A
    1829: 51 09    MOV   A,[__r1]
    182B: 08       PUSH  A
    182C: 51 08    MOV   A,[__r2]
    182E: 08       PUSH  A
    182F: 51 07    MOV   A,[__r3]
    1831: 08       PUSH  A
    1832: 7C 27 9A LCALL 0x279A
    1835: 18       POP   A
    1836: 54 07    MOV   [X+7],A
    1838: 18       POP   A
    1839: 54 06    MOV   [X+6],A
    183B: 18       POP   A
    183C: 54 05    MOV   [X+5],A
    183E: 18       POP   A
    183F: 54 04    MOV   [X+4],A
    1841: 38 FC    ADD   SP,0xFC
(0193) 	PGA_1_Stop();
    1843: 10       PUSH  X
    1844: 7C 0A 31 LCALL _PGA_1_Stop
(0194) 	ADCINC_1_Stop();
    1847: 7C 0E 9C LCALL _ADCINC_1_Stop
    184A: 20       POP   X
(0195) return sp;							
    184B: 52 04    MOV   A,[X+4]
    184D: 53 0A    MOV   [__r0],A
    184F: 52 05    MOV   A,[X+5]
    1851: 53 09    MOV   [__r1],A
    1853: 52 06    MOV   A,[X+6]
    1855: 53 08    MOV   [__r2],A
    1857: 52 07    MOV   A,[X+7]
    1859: 53 07    MOV   [__r3],A
    185B: 38 F8    ADD   SP,0xF8
    185D: 20       POP   X
    185E: 7F       RET   
(0196) }
(0197) /* function Print the Voltage on the Display or CAT USB Port
(0198)    Argument : device=1 Print to CAT Port/ device= 0 Print to Display
(0199)    Return   : none
(0200) #########################################################################################################################*/
(0201) void  print_voltage(char device)
(0202) {
_print_voltage:
  t                    --> X+8
  Spannung             --> X+4
  help                 --> X+0
  device               --> X-4
    185F: 10       PUSH  X
    1860: 4F       MOV   X,SP
    1861: 38 0A    ADD   SP,0xA
(0203) char help[4];
(0204) int t;
(0205) float Spannung;
(0206) Spannung=get_voltage();	
    1863: 9E AD    CALL  _get_voltage
    1865: 51 0A    MOV   A,[__r0]
    1867: 54 04    MOV   [X+4],A
    1869: 51 09    MOV   A,[__r1]
    186B: 54 05    MOV   [X+5],A
    186D: 51 08    MOV   A,[__r2]
    186F: 54 06    MOV   [X+6],A
    1871: 51 07    MOV   A,[__r3]
    1873: 54 07    MOV   [X+7],A
(0207) strncpy(help,ftoa(Spannung,&t),4);
    1875: 5A 09    MOV   [__r1],X
    1877: 06 09 08 ADD   [__r1],0x8
    187A: 51 0A    MOV   A,[__r0]
    187C: 08       PUSH  A
    187D: 51 09    MOV   A,[__r1]
    187F: 08       PUSH  A
    1880: 52 04    MOV   A,[X+4]
    1882: 08       PUSH  A
    1883: 52 05    MOV   A,[X+5]
    1885: 08       PUSH  A
    1886: 52 06    MOV   A,[X+6]
    1888: 08       PUSH  A
    1889: 52 07    MOV   A,[X+7]
    188B: 08       PUSH  A
    188C: 7C 31 CC LCALL _ftoa
    188F: 50 00    MOV   A,0x0
    1891: 08       PUSH  A
    1892: 50 04    MOV   A,0x4
    1894: 08       PUSH  A
    1895: 51 0A    MOV   A,[__r0]
    1897: 08       PUSH  A
    1898: 51 09    MOV   A,[__r1]
    189A: 08       PUSH  A
    189B: 51 0A    MOV   A,[__r0]
    189D: 08       PUSH  A
    189E: 10       PUSH  X
    189F: 7C 36 7C LCALL _strncpy
    18A2: 38 F4    ADD   SP,0xF4
(0208) help[4]='\0';
    18A4: 56 04 00 MOV   [X+4],0x0
(0209) if (device==1){
    18A7: 3D FC 01 CMP   [X-4],0x1
    18AA: B0 17    JNZ   0x18C2
(0210)                UART_2_PutString(help);
    18AC: 10       PUSH  X
    18AD: 51 0A    MOV   A,[__r0]
    18AF: 7C 06 88 LCALL _UART_2_PutString
(0211)                UART_2_CPutString(" Volt");
    18B2: 50 02    MOV   A,0x2
    18B4: 08       PUSH  A
    18B5: 50 19    MOV   A,0x19
    18B7: 5C       MOV   X,A
    18B8: 18       POP   A
    18B9: 7C 06 D2 LCALL _UART_2_CPutString
(0212)                UART_2_PutCRLF();
    18BC: 7C 06 E4 LCALL _UART_2_PutCRLF
    18BF: 20       POP   X
(0213) }
    18C0: 80 1B    JMP   0x18DC
(0214) else 
(0215)    {
(0216) 	LCD_1_Position(0,14);
    18C2: 10       PUSH  X
    18C3: 57 0E    MOV   X,0xE
    18C5: 50 00    MOV   A,0x0
    18C7: 7C 0B A6 LCALL _LCD_1_Position
    18CA: 20       POP   X
(0217) 	LCD_1_PrString(help);
    18CB: 10       PUSH  X
    18CC: 51 0A    MOV   A,[__r0]
    18CE: 7C 0A 71 LCALL _LCD_1_PrString
(0218) 	LCD_1_PrCString(" V");
    18D1: 50 02    MOV   A,0x2
    18D3: 08       PUSH  A
    18D4: 50 16    MOV   A,0x16
    18D6: 5C       MOV   X,A
    18D7: 18       POP   A
    18D8: 7C 0A 35 LCALL _LCD_1_PrCString
    18DB: 20       POP   X
(0219) }
    18DC: 38 F6    ADD   SP,0xF6
    18DE: 20       POP   X
    18DF: 7F       RET   
(0220) }
(0221) /* function  Print Status 2 on the Display and Cat USB Port
(0222)    Argument : none
(0223)    Return   : none
(0224) #########################################################################################################################*/
(0225) void Print_Status2(void)
(0226) {
(0227) 	LCD_1_Position(2,0);
_Print_Status2:
    18E0: 10       PUSH  X
    18E1: 57 00    MOV   X,0x0
    18E3: 50 02    MOV   A,0x2
    18E5: 7C 0B A6 LCALL _LCD_1_Position
(0228) 	LCD_1_PrCString("Mic:");
    18E8: 50 02    MOV   A,0x2
    18EA: 08       PUSH  A
    18EB: 50 11    MOV   A,0x11
    18ED: 5C       MOV   X,A
    18EE: 18       POP   A
    18EF: 7C 0A 35 LCALL _LCD_1_PrCString
    18F2: 20       POP   X
(0229)     LCD_1_Write_Data(micgain+48);
    18F3: 51 34    MOV   A,[micgain]
    18F5: 01 30    ADD   A,0x30
    18F7: 10       PUSH  X
    18F8: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data
(0230) 	UART_2_CPutString("Mic:");
    18FB: 50 02    MOV   A,0x2
    18FD: 08       PUSH  A
    18FE: 50 11    MOV   A,0x11
    1900: 5C       MOV   X,A
    1901: 18       POP   A
    1902: 7C 06 D2 LCALL _UART_2_CPutString
    1905: 20       POP   X
(0231) 	UART_2_PutChar(micgain+48);
    1906: 51 34    MOV   A,[micgain]
    1908: 01 30    ADD   A,0x30
    190A: 10       PUSH  X
    190B: 7C 06 4B LCALL _UART_2_PutChar
(0232) 	UART_2_PutChar(0x20);
    190E: 50 20    MOV   A,0x20
    1910: 7C 06 4B LCALL _UART_2_PutChar
(0233) 	LCD_1_WriteData(0x20);
    1913: 50 20    MOV   A,0x20
    1915: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data
(0234) 	/*LCD_1_PrCString("Func:");
(0235) 	UART_2_CPutString("Func:");
(0236) 	if ((TXstatus2 & 1)==0){
(0237) 		                   LCD_1_PrCString("Norm");
(0238) 		                   UART_2_CPutString("Norm");
(0239) 	                     }
(0240) 	      else     
(0241)                        	{
(0242) 				           LCD_1_PrCString("APRS");
(0243)      						UART_2_CPutString("APRS");
(0244) 	                     }	*/
(0245) 	UART_2_PutChar(0x20);
    1918: 50 20    MOV   A,0x20
    191A: 7C 06 4B LCALL _UART_2_PutChar
(0246) 	LCD_1_PrCString("Vox:");
    191D: 50 02    MOV   A,0x2
    191F: 08       PUSH  A
    1920: 50 0C    MOV   A,0xC
    1922: 5C       MOV   X,A
    1923: 18       POP   A
    1924: 7C 0A 35 LCALL _LCD_1_PrCString
(0247) 	UART_2_CPutString("Vox:");	
    1927: 50 02    MOV   A,0x2
    1929: 08       PUSH  A
    192A: 50 0C    MOV   A,0xC
    192C: 5C       MOV   X,A
    192D: 18       POP   A
    192E: 7C 06 D2 LCALL _UART_2_CPutString
    1931: 20       POP   X
(0248) 	if ((TXstatus & 64)==0){
    1932: 47 3F 40 TST   [TXstatus],0x40
    1935: B0 19    JNZ   0x194F
(0249) 		                   LCD_1_PrCString("off");
    1937: 10       PUSH  X
    1938: 50 02    MOV   A,0x2
    193A: 08       PUSH  A
    193B: 50 08    MOV   A,0x8
    193D: 5C       MOV   X,A
    193E: 18       POP   A
    193F: 7C 0A 35 LCALL _LCD_1_PrCString
(0250) 		                   UART_2_CPutString("off");
    1942: 50 02    MOV   A,0x2
    1944: 08       PUSH  A
    1945: 50 08    MOV   A,0x8
    1947: 5C       MOV   X,A
    1948: 18       POP   A
    1949: 7C 06 D2 LCALL _UART_2_CPutString
    194C: 20       POP   X
(0251) 	                     }
    194D: 80 17    JMP   0x1965
(0252) 	      else     
(0253)                        	{
(0254) 				           LCD_1_PrCString("on ");
    194F: 10       PUSH  X
    1950: 50 02    MOV   A,0x2
    1952: 08       PUSH  A
    1953: 50 04    MOV   A,0x4
    1955: 5C       MOV   X,A
    1956: 18       POP   A
    1957: 7C 0A 35 LCALL _LCD_1_PrCString
(0255)      						UART_2_CPutString("on ");
    195A: 50 02    MOV   A,0x2
    195C: 08       PUSH  A
    195D: 50 04    MOV   A,0x4
    195F: 5C       MOV   X,A
    1960: 18       POP   A
    1961: 7C 06 D2 LCALL _UART_2_CPutString
    1964: 20       POP   X
(0256) 	                     }						
(0257) 	UART_2_PutCRLF();					
    1965: 10       PUSH  X
    1966: 7C 06 E4 LCALL _UART_2_PutCRLF
    1969: 20       POP   X
    196A: 7F       RET   
(0258) }
(0259) /* function  Print Status 1 on the Display and Cat USB Port
(0260)    Argument : none
(0261)    Return   : none
(0262) #########################################################################################################################*/
(0263) void Print_status(void)
(0264) {	
(0265) 	LCD_1_Position(3,0);
_Print_status:
    196B: 10       PUSH  X
    196C: 57 00    MOV   X,0x0
    196E: 50 03    MOV   A,0x3
    1970: 7C 0B A6 LCALL _LCD_1_Position
(0266) 	LCD_1_PrCString("SQ:");
    1973: 50 02    MOV   A,0x2
    1975: 08       PUSH  A
    1976: 50 00    MOV   A,0x0
    1978: 5C       MOV   X,A
    1979: 18       POP   A
    197A: 7C 0A 35 LCALL _LCD_1_PrCString
    197D: 20       POP   X
(0267) 	LCD_1_WriteData(Squelch+48);
    197E: 51 35    MOV   A,[Squelch]
    1980: 01 30    ADD   A,0x30
    1982: 10       PUSH  X
    1983: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data
(0268) 	UART_2_CPutString("SQ:");
    1986: 50 02    MOV   A,0x2
    1988: 08       PUSH  A
    1989: 50 00    MOV   A,0x0
    198B: 5C       MOV   X,A
    198C: 18       POP   A
    198D: 7C 06 D2 LCALL _UART_2_CPutString
    1990: 20       POP   X
(0269) 	UART_2_PutChar(Squelch+48);
    1991: 51 35    MOV   A,[Squelch]
    1993: 01 30    ADD   A,0x30
    1995: 10       PUSH  X
    1996: 7C 06 4B LCALL _UART_2_PutChar
(0270) 	UART_2_PutChar(0x20);
    1999: 50 20    MOV   A,0x20
    199B: 7C 06 4B LCALL _UART_2_PutChar
(0271) 	LCD_1_WriteData(0x20);
    199E: 50 20    MOV   A,0x20
    19A0: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data
(0272) 	UART_2_CPutString("Mode:");
    19A3: 50 01    MOV   A,0x1
    19A5: 08       PUSH  A
    19A6: 50 FA    MOV   A,0xFA
    19A8: 5C       MOV   X,A
    19A9: 18       POP   A
    19AA: 7C 06 D2 LCALL _UART_2_CPutString
    19AD: 20       POP   X
(0273) 	if ((TXstatus & 2)==0){
    19AE: 47 3F 02 TST   [TXstatus],0x2
    19B1: B0 19    JNZ   0x19CB
(0274) 		                   LCD_1_PrCString("Sim");
    19B3: 10       PUSH  X
    19B4: 50 01    MOV   A,0x1
    19B6: 08       PUSH  A
    19B7: 50 F6    MOV   A,0xF6
    19B9: 5C       MOV   X,A
    19BA: 18       POP   A
    19BB: 7C 0A 35 LCALL _LCD_1_PrCString
(0275) 		                   UART_2_CPutString("Simplex");
    19BE: 50 01    MOV   A,0x1
    19C0: 08       PUSH  A
    19C1: 50 EE    MOV   A,0xEE
    19C3: 5C       MOV   X,A
    19C4: 18       POP   A
    19C5: 7C 06 D2 LCALL _UART_2_CPutString
    19C8: 20       POP   X
(0276) 	                     }
    19C9: 80 17    JMP   0x19E1
(0277) 	      else     
(0278)                        	{
(0279) 				           LCD_1_PrCString("Dup");
    19CB: 10       PUSH  X
    19CC: 50 01    MOV   A,0x1
    19CE: 08       PUSH  A
    19CF: 50 EA    MOV   A,0xEA
    19D1: 5C       MOV   X,A
    19D2: 18       POP   A
    19D3: 7C 0A 35 LCALL _LCD_1_PrCString
(0280)      						UART_2_CPutString("Duplex");
    19D6: 50 01    MOV   A,0x1
    19D8: 08       PUSH  A
    19D9: 50 E3    MOV   A,0xE3
    19DB: 5C       MOV   X,A
    19DC: 18       POP   A
    19DD: 7C 06 D2 LCALL _UART_2_CPutString
    19E0: 20       POP   X
(0281) 	                     }		
(0282) 	UART_2_PutChar(0x20);					
    19E1: 10       PUSH  X
    19E2: 50 20    MOV   A,0x20
    19E4: 7C 06 4B LCALL _UART_2_PutChar
(0283) 	LCD_1_WriteData(0x20);
    19E7: 50 20    MOV   A,0x20
    19E9: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data
(0284) 	
(0285) 	LCD_1_PrCString("Fil:");
    19EC: 50 01    MOV   A,0x1
    19EE: 08       PUSH  A
    19EF: 50 DE    MOV   A,0xDE
    19F1: 5C       MOV   X,A
    19F2: 18       POP   A
    19F3: 7C 0A 35 LCALL _LCD_1_PrCString
(0286) 	UART_2_CPutString("Filter:");			
    19F6: 50 01    MOV   A,0x1
    19F8: 08       PUSH  A
    19F9: 50 D6    MOV   A,0xD6
    19FB: 5C       MOV   X,A
    19FC: 18       POP   A
    19FD: 7C 06 D2 LCALL _UART_2_CPutString
    1A00: 20       POP   X
(0287) 	if (filter==0){
    1A01: 3C 40 00 CMP   [filter],0x0
    1A04: B0 17    JNZ   0x1A1C
(0288) 		           LCD_1_PrCString("off");
    1A06: 10       PUSH  X
    1A07: 50 02    MOV   A,0x2
    1A09: 08       PUSH  A
    1A0A: 50 08    MOV   A,0x8
    1A0C: 5C       MOV   X,A
    1A0D: 18       POP   A
    1A0E: 7C 0A 35 LCALL _LCD_1_PrCString
(0289) 			       UART_2_CPutString("off");
    1A11: 50 02    MOV   A,0x2
    1A13: 08       PUSH  A
    1A14: 50 08    MOV   A,0x8
    1A16: 5C       MOV   X,A
    1A17: 18       POP   A
    1A18: 7C 06 D2 LCALL _UART_2_CPutString
    1A1B: 20       POP   X
(0290)                  	}
(0291) 	if (filter==1){
    1A1C: 3C 40 01 CMP   [filter],0x1
    1A1F: B0 17    JNZ   0x1A37
(0292) 		           LCD_1_PrCString("PRE");
    1A21: 10       PUSH  X
    1A22: 50 01    MOV   A,0x1
    1A24: 08       PUSH  A
    1A25: 50 D2    MOV   A,0xD2
    1A27: 5C       MOV   X,A
    1A28: 18       POP   A
    1A29: 7C 0A 35 LCALL _LCD_1_PrCString
(0293) 			       UART_2_CPutString("PRE");
    1A2C: 50 01    MOV   A,0x1
    1A2E: 08       PUSH  A
    1A2F: 50 D2    MOV   A,0xD2
    1A31: 5C       MOV   X,A
    1A32: 18       POP   A
    1A33: 7C 06 D2 LCALL _UART_2_CPutString
    1A36: 20       POP   X
(0294)                  	}
(0295)     if (filter==2){
    1A37: 3C 40 02 CMP   [filter],0x2
    1A3A: B0 17    JNZ   0x1A52
(0296) 		            LCD_1_PrCString("HP ");
    1A3C: 10       PUSH  X
    1A3D: 50 01    MOV   A,0x1
    1A3F: 08       PUSH  A
    1A40: 50 CE    MOV   A,0xCE
    1A42: 5C       MOV   X,A
    1A43: 18       POP   A
    1A44: 7C 0A 35 LCALL _LCD_1_PrCString
(0297) 			              UART_2_CPutString("HP");
    1A47: 50 01    MOV   A,0x1
    1A49: 08       PUSH  A
    1A4A: 50 CB    MOV   A,0xCB
    1A4C: 5C       MOV   X,A
    1A4D: 18       POP   A
    1A4E: 7C 06 D2 LCALL _UART_2_CPutString
    1A51: 20       POP   X
(0298)                 	}
(0299)     if (filter==3){
    1A52: 3C 40 03 CMP   [filter],0x3
    1A55: B0 17    JNZ   0x1A6D
(0300) 		            LCD_1_PrCString("LP ");
    1A57: 10       PUSH  X
    1A58: 50 01    MOV   A,0x1
    1A5A: 08       PUSH  A
    1A5B: 50 C7    MOV   A,0xC7
    1A5D: 5C       MOV   X,A
    1A5E: 18       POP   A
    1A5F: 7C 0A 35 LCALL _LCD_1_PrCString
(0301) 			        UART_2_CPutString("LP"); 
    1A62: 50 01    MOV   A,0x1
    1A64: 08       PUSH  A
    1A65: 50 C4    MOV   A,0xC4
    1A67: 5C       MOV   X,A
    1A68: 18       POP   A
    1A69: 7C 06 D2 LCALL _UART_2_CPutString
    1A6C: 20       POP   X
(0302)               	}
(0303) 	UART_2_PutChar(0x20);
    1A6D: 10       PUSH  X
    1A6E: 50 20    MOV   A,0x20
    1A70: 7C 06 4B LCALL _UART_2_PutChar
(0304) 	LCD_1_Position(2,0);
    1A73: 57 00    MOV   X,0x0
    1A75: 50 02    MOV   A,0x2
    1A77: 7C 0B A6 LCALL _LCD_1_Position
(0305) 	LCD_1_PrCString("Bw:");
    1A7A: 50 01    MOV   A,0x1
    1A7C: 08       PUSH  A
    1A7D: 50 C0    MOV   A,0xC0
    1A7F: 5C       MOV   X,A
    1A80: 18       POP   A
    1A81: 7C 0A 35 LCALL _LCD_1_PrCString
(0306) 	UART_2_CPutString("Bw:");
    1A84: 50 01    MOV   A,0x1
    1A86: 08       PUSH  A
    1A87: 50 C0    MOV   A,0xC0
    1A89: 5C       MOV   X,A
    1A8A: 18       POP   A
    1A8B: 7C 06 D2 LCALL _UART_2_CPutString
    1A8E: 20       POP   X
(0307) 	if ((TXstatus & 1)==0){
    1A8F: 47 3F 01 TST   [TXstatus],0x1
    1A92: B0 19    JNZ   0x1AAC
(0308) 		                   LCD_1_PrCString("12,5 Khz");
    1A94: 10       PUSH  X
    1A95: 50 01    MOV   A,0x1
    1A97: 08       PUSH  A
    1A98: 50 B7    MOV   A,0xB7
    1A9A: 5C       MOV   X,A
    1A9B: 18       POP   A
    1A9C: 7C 0A 35 LCALL _LCD_1_PrCString
(0309) 		                   UART_2_CPutString("12,5 Khz");
    1A9F: 50 01    MOV   A,0x1
    1AA1: 08       PUSH  A
    1AA2: 50 B7    MOV   A,0xB7
    1AA4: 5C       MOV   X,A
    1AA5: 18       POP   A
    1AA6: 7C 06 D2 LCALL _UART_2_CPutString
    1AA9: 20       POP   X
(0310) 	                     }
    1AAA: 80 17    JMP   0x1AC2
(0311) 	      else     
(0312)                        	{
(0313) 				           LCD_1_PrCString("25,0 Khz");
    1AAC: 10       PUSH  X
    1AAD: 50 01    MOV   A,0x1
    1AAF: 08       PUSH  A
    1AB0: 50 AE    MOV   A,0xAE
    1AB2: 5C       MOV   X,A
    1AB3: 18       POP   A
    1AB4: 7C 0A 35 LCALL _LCD_1_PrCString
(0314) 						   UART_2_CPutString("25,0 Khz");
    1AB7: 50 01    MOV   A,0x1
    1AB9: 08       PUSH  A
    1ABA: 50 AE    MOV   A,0xAE
    1ABC: 5C       MOV   X,A
    1ABD: 18       POP   A
    1ABE: 7C 06 D2 LCALL _UART_2_CPutString
    1AC1: 20       POP   X
(0315) 	                     }	
(0316) 	UART_2_PutChar(0x20);					
    1AC2: 10       PUSH  X
    1AC3: 50 20    MOV   A,0x20
    1AC5: 7C 06 4B LCALL _UART_2_PutChar
(0317) 	LCD_1_WriteData(0x20);
    1AC8: 50 20    MOV   A,0x20
    1ACA: 7C 0A 7B LCALL _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data
(0318) 	LCD_1_PrCString("Pwr:");
    1ACD: 50 01    MOV   A,0x1
    1ACF: 08       PUSH  A
    1AD0: 50 A9    MOV   A,0xA9
    1AD2: 5C       MOV   X,A
    1AD3: 18       POP   A
    1AD4: 7C 0A 35 LCALL _LCD_1_PrCString
(0319) 	UART_2_CPutString("Pwr:");					
    1AD7: 50 01    MOV   A,0x1
    1AD9: 08       PUSH  A
    1ADA: 50 A9    MOV   A,0xA9
    1ADC: 5C       MOV   X,A
    1ADD: 18       POP   A
    1ADE: 7C 06 D2 LCALL _UART_2_CPutString
    1AE1: 20       POP   X
(0320) 	if ((TXstatus & 4)==0){
    1AE2: 47 3F 04 TST   [TXstatus],0x4
    1AE5: B0 19    JNZ   0x1AFF
(0321) 		                   LCD_1_PrCString(" low");
    1AE7: 10       PUSH  X
    1AE8: 50 01    MOV   A,0x1
    1AEA: 08       PUSH  A
    1AEB: 50 A4    MOV   A,0xA4
    1AED: 5C       MOV   X,A
    1AEE: 18       POP   A
    1AEF: 7C 0A 35 LCALL _LCD_1_PrCString
(0322) 		                   UART_2_CPutString("low");
    1AF2: 50 01    MOV   A,0x1
    1AF4: 08       PUSH  A
    1AF5: 50 A0    MOV   A,0xA0
    1AF7: 5C       MOV   X,A
    1AF8: 18       POP   A
    1AF9: 7C 06 D2 LCALL _UART_2_CPutString
    1AFC: 20       POP   X
(0323) 	                     }
    1AFD: 80 17    JMP   0x1B15
(0324) 	      else     
(0325)                        	{
(0326) 				           LCD_1_PrCString("high");
    1AFF: 10       PUSH  X
    1B00: 50 01    MOV   A,0x1
    1B02: 08       PUSH  A
    1B03: 50 9B    MOV   A,0x9B
    1B05: 5C       MOV   X,A
    1B06: 18       POP   A
    1B07: 7C 0A 35 LCALL _LCD_1_PrCString
(0327) 	    					UART_2_CPutString("high");
    1B0A: 50 01    MOV   A,0x1
    1B0C: 08       PUSH  A
    1B0D: 50 9B    MOV   A,0x9B
    1B0F: 5C       MOV   X,A
    1B10: 18       POP   A
    1B11: 7C 06 D2 LCALL _UART_2_CPutString
    1B14: 20       POP   X
(0328) 	                     }
(0329) 	UART_2_PutChar(0x20);
    1B15: 10       PUSH  X
    1B16: 50 20    MOV   A,0x20
    1B18: 7C 06 4B LCALL _UART_2_PutChar
    1B1B: 20       POP   X
(0330) 	print_voltage(1);									
    1B1C: 50 01    MOV   A,0x1
    1B1E: 08       PUSH  A
    1B1F: 9D 3E    CALL  _print_voltage
    1B21: 38 FF    ADD   SP,0xFF
    1B23: 7F       RET   
(0331) //					
(0332) }	
(0333) /* function for setGroup from DRA818
(0334)    Argument : none
(0335)    Return   : response from DRA 818 Chip in the responsebuffer 1 -> 14
(0336) #########################################################################################################################*/
(0337) void komando_setgroup(void)
(0338) { 	
_komando_setgroup:
  y                    --> X+54
  x                    --> X+52
  s                    --> X+51
  z                    --> X+49
  ctss                 --> X+44
  f                    --> X+33
  komma                --> X+31
  setgroup             --> X+0
    1B24: 10       PUSH  X
    1B25: 4F       MOV   X,SP
    1B26: 38 38    ADD   SP,0x38
(0339) char setgroup[31],komma[]=",";
    1B28: 55 09 50 MOV   [__r1],0x50
    1B2B: 55 0A 01 MOV   [__r0],0x1
    1B2E: 5A 07    MOV   [__r3],X
    1B30: 06 07 1F ADD   [__r3],0x1F
    1B33: 10       PUSH  X
    1B34: 55 02 00 MOV   [__rX],0x0
    1B37: 51 0A    MOV   A,[__r0]
    1B39: 58 09    MOV   X,[__r1]
    1B3B: 08       PUSH  A
    1B3C: 28       ROMX  
    1B3D: 3F 07    MVI   [__r3],A
    1B3F: 18       POP   A
    1B40: 75       INC   X
    1B41: 09 00    ADC   A,0x0
    1B43: 76 02    INC   [__rX]
    1B45: 3C 02 02 CMP   [__rX],0x2
    1B48: BF F2    JNZ   0x1B3B
    1B4A: 20       POP   X
(0340) char ctss[]="0000";	
    1B4B: 55 09 52 MOV   [__r1],0x52
    1B4E: 55 0A 01 MOV   [__r0],0x1
    1B51: 5A 07    MOV   [__r3],X
    1B53: 06 07 2C ADD   [__r3],0x2C
    1B56: 10       PUSH  X
    1B57: 55 02 00 MOV   [__rX],0x0
    1B5A: 51 0A    MOV   A,[__r0]
    1B5C: 58 09    MOV   X,[__r1]
    1B5E: 08       PUSH  A
    1B5F: 28       ROMX  
    1B60: 3F 07    MVI   [__r3],A
    1B62: 18       POP   A
    1B63: 75       INC   X
    1B64: 09 00    ADC   A,0x0
    1B66: 76 02    INC   [__rX]
    1B68: 3C 02 05 CMP   [__rX],0x5
    1B6B: BF F2    JNZ   0x1B5E
    1B6D: 20       POP   X
(0341) char f[11],s[1];
(0342) char x[]="0";
    1B6E: 55 09 57 MOV   [__r1],0x57
    1B71: 55 0A 01 MOV   [__r0],0x1
    1B74: 5A 07    MOV   [__r3],X
    1B76: 06 07 34 ADD   [__r3],0x34
    1B79: 10       PUSH  X
    1B7A: 55 02 00 MOV   [__rX],0x0
    1B7D: 51 0A    MOV   A,[__r0]
    1B7F: 58 09    MOV   X,[__r1]
    1B81: 08       PUSH  A
    1B82: 28       ROMX  
    1B83: 3F 07    MVI   [__r3],A
    1B85: 18       POP   A
    1B86: 75       INC   X
    1B87: 09 00    ADC   A,0x0
    1B89: 76 02    INC   [__rX]
    1B8B: 3C 02 02 CMP   [__rX],0x2
    1B8E: BF F2    JNZ   0x1B81
    1B90: 20       POP   X
(0343) char z[]=".";
    1B91: 55 09 59 MOV   [__r1],0x59
    1B94: 55 0A 01 MOV   [__r0],0x1
    1B97: 5A 07    MOV   [__r3],X
    1B99: 06 07 31 ADD   [__r3],0x31
    1B9C: 10       PUSH  X
    1B9D: 55 02 00 MOV   [__rX],0x0
    1BA0: 51 0A    MOV   A,[__r0]
    1BA2: 58 09    MOV   X,[__r1]
    1BA4: 08       PUSH  A
    1BA5: 28       ROMX  
    1BA6: 3F 07    MVI   [__r3],A
    1BA8: 18       POP   A
    1BA9: 75       INC   X
    1BAA: 09 00    ADC   A,0x0
    1BAC: 76 02    INC   [__rX]
    1BAE: 3C 02 02 CMP   [__rX],0x2
    1BB1: BF F2    JNZ   0x1BA4
    1BB3: 20       POP   X
(0344) char y[]="1";	
    1BB4: 55 09 5B MOV   [__r1],0x5B
    1BB7: 55 0A 01 MOV   [__r0],0x1
    1BBA: 5A 07    MOV   [__r3],X
    1BBC: 06 07 36 ADD   [__r3],0x36
    1BBF: 10       PUSH  X
    1BC0: 55 02 00 MOV   [__rX],0x0
    1BC3: 51 0A    MOV   A,[__r0]
    1BC5: 58 09    MOV   X,[__r1]
    1BC7: 08       PUSH  A
    1BC8: 28       ROMX  
    1BC9: 3F 07    MVI   [__r3],A
    1BCB: 18       POP   A
    1BCC: 75       INC   X
    1BCD: 09 00    ADC   A,0x0
    1BCF: 76 02    INC   [__rX]
    1BD1: 3C 02 02 CMP   [__rX],0x2
    1BD4: BF F2    JNZ   0x1BC7
    1BD6: 20       POP   X
(0345)                PRT1IE &=0x7f; //drehgeber Interupt sperren
    1BD7: 41 05 7F AND   REG[0x5],0x7F
(0346) 	           if ((TXstatus & 1) ==0){
    1BDA: 47 3F 01 TST   [TXstatus],0x1
    1BDD: B0 17    JNZ   0x1BF5
(0347) 				                   strcpy(setgroup,x);
    1BDF: 5A 09    MOV   [__r1],X
    1BE1: 06 09 34 ADD   [__r1],0x34
    1BE4: 51 0A    MOV   A,[__r0]
    1BE6: 08       PUSH  A
    1BE7: 51 09    MOV   A,[__r1]
    1BE9: 08       PUSH  A
    1BEA: 51 0A    MOV   A,[__r0]
    1BEC: 08       PUSH  A
    1BED: 10       PUSH  X
    1BEE: 7C 2B CF LCALL _strcpy
    1BF1: 38 FC    ADD   SP,0xFC
(0348) 		                        	}
    1BF3: 80 15    JMP   0x1C09
(0349) 			    else
(0350) 			                       {
(0351) 									strcpy(setgroup,y);
    1BF5: 5A 09    MOV   [__r1],X
    1BF7: 06 09 36 ADD   [__r1],0x36
    1BFA: 51 0A    MOV   A,[__r0]
    1BFC: 08       PUSH  A
    1BFD: 51 09    MOV   A,[__r1]
    1BFF: 08       PUSH  A
    1C00: 51 0A    MOV   A,[__r0]
    1C02: 08       PUSH  A
    1C03: 10       PUSH  X
    1C04: 7C 2B CF LCALL _strcpy
    1C07: 38 FC    ADD   SP,0xFC
(0352) 								}	
(0353) 							
(0354) 	            strcat(setgroup,komma); 
    1C09: 5A 09    MOV   [__r1],X
    1C0B: 06 09 1F ADD   [__r1],0x1F
    1C0E: 51 0A    MOV   A,[__r0]
    1C10: 08       PUSH  A
    1C11: 51 09    MOV   A,[__r1]
    1C13: 08       PUSH  A
    1C14: 51 0A    MOV   A,[__r0]
    1C16: 08       PUSH  A
    1C17: 10       PUSH  X
    1C18: 7C 2B E9 LCALL _strcat
    1C1B: 38 FC    ADD   SP,0xFC
(0355) 						
(0356) 				if ((TXstatus & 2)==0){
    1C1D: 47 3F 02 TST   [TXstatus],0x2
    1C20: B0 C1    JNZ   0x1CE2
(0357) 					                 ltoa(f,frequenz,10);
    1C22: 50 00    MOV   A,0x0
    1C24: 08       PUSH  A
    1C25: 50 0A    MOV   A,0xA
    1C27: 08       PUSH  A
    1C28: 51 37    MOV   A,[frequenz]
    1C2A: 08       PUSH  A
    1C2B: 51 38    MOV   A,[frequenz+1]
    1C2D: 08       PUSH  A
    1C2E: 51 39    MOV   A,[frequenz+2]
    1C30: 08       PUSH  A
    1C31: 51 3A    MOV   A,[frequenz+3]
    1C33: 08       PUSH  A
    1C34: 5A 09    MOV   [__r1],X
    1C36: 06 09 21 ADD   [__r1],0x21
    1C39: 51 0A    MOV   A,[__r0]
    1C3B: 08       PUSH  A
    1C3C: 51 09    MOV   A,[__r1]
    1C3E: 08       PUSH  A
    1C3F: 7C 2F C3 LCALL _ltoa
(0358) 					                 strncat(setgroup,f,3);
    1C42: 50 00    MOV   A,0x0
    1C44: 08       PUSH  A
    1C45: 50 03    MOV   A,0x3
    1C47: 08       PUSH  A
    1C48: 5A 09    MOV   [__r1],X
    1C4A: 06 09 21 ADD   [__r1],0x21
    1C4D: 51 0A    MOV   A,[__r0]
    1C4F: 08       PUSH  A
    1C50: 51 09    MOV   A,[__r1]
    1C52: 08       PUSH  A
    1C53: 51 0A    MOV   A,[__r0]
    1C55: 08       PUSH  A
    1C56: 10       PUSH  X
    1C57: 7C 35 FB LCALL _strncat
    1C5A: 38 F2    ADD   SP,0xF2
(0359) 					                 strcat(setgroup,z);
    1C5C: 5A 09    MOV   [__r1],X
    1C5E: 06 09 31 ADD   [__r1],0x31
    1C61: 51 0A    MOV   A,[__r0]
    1C63: 08       PUSH  A
    1C64: 51 09    MOV   A,[__r1]
    1C66: 08       PUSH  A
    1C67: 51 0A    MOV   A,[__r0]
    1C69: 08       PUSH  A
    1C6A: 10       PUSH  X
    1C6B: 7C 2B E9 LCALL _strcat
(0360) 					                
(0361) 					                 strncat(setgroup,f+3,4); 
    1C6E: 50 00    MOV   A,0x0
    1C70: 08       PUSH  A
    1C71: 50 04    MOV   A,0x4
    1C73: 08       PUSH  A
    1C74: 5A 09    MOV   [__r1],X
    1C76: 06 09 24 ADD   [__r1],0x24
    1C79: 51 0A    MOV   A,[__r0]
    1C7B: 08       PUSH  A
    1C7C: 51 09    MOV   A,[__r1]
    1C7E: 08       PUSH  A
    1C7F: 51 0A    MOV   A,[__r0]
    1C81: 08       PUSH  A
    1C82: 10       PUSH  X
    1C83: 7C 35 FB LCALL _strncat
    1C86: 38 F6    ADD   SP,0xF6
(0362) 	                                 strcat(setgroup,komma); 
    1C88: 5A 09    MOV   [__r1],X
    1C8A: 06 09 1F ADD   [__r1],0x1F
    1C8D: 51 0A    MOV   A,[__r0]
    1C8F: 08       PUSH  A
    1C90: 51 09    MOV   A,[__r1]
    1C92: 08       PUSH  A
    1C93: 51 0A    MOV   A,[__r0]
    1C95: 08       PUSH  A
    1C96: 10       PUSH  X
    1C97: 7C 2B E9 LCALL _strcat
(0363) 					                 strncat(setgroup,f,3);
    1C9A: 50 00    MOV   A,0x0
    1C9C: 08       PUSH  A
    1C9D: 50 03    MOV   A,0x3
    1C9F: 08       PUSH  A
    1CA0: 5A 09    MOV   [__r1],X
    1CA2: 06 09 21 ADD   [__r1],0x21
    1CA5: 51 0A    MOV   A,[__r0]
    1CA7: 08       PUSH  A
    1CA8: 51 09    MOV   A,[__r1]
    1CAA: 08       PUSH  A
    1CAB: 51 0A    MOV   A,[__r0]
    1CAD: 08       PUSH  A
    1CAE: 10       PUSH  X
    1CAF: 7C 35 FB LCALL _strncat
    1CB2: 38 F6    ADD   SP,0xF6
(0364) 					                 strcat(setgroup,z);
    1CB4: 5A 09    MOV   [__r1],X
    1CB6: 06 09 31 ADD   [__r1],0x31
    1CB9: 51 0A    MOV   A,[__r0]
    1CBB: 08       PUSH  A
    1CBC: 51 09    MOV   A,[__r1]
    1CBE: 08       PUSH  A
    1CBF: 51 0A    MOV   A,[__r0]
    1CC1: 08       PUSH  A
    1CC2: 10       PUSH  X
    1CC3: 7C 2B E9 LCALL _strcat
(0365) 					                 strncat(setgroup,f+3,4); 
    1CC6: 50 00    MOV   A,0x0
    1CC8: 08       PUSH  A
    1CC9: 50 04    MOV   A,0x4
    1CCB: 08       PUSH  A
    1CCC: 5A 09    MOV   [__r1],X
    1CCE: 06 09 24 ADD   [__r1],0x24
    1CD1: 51 0A    MOV   A,[__r0]
    1CD3: 08       PUSH  A
    1CD4: 51 09    MOV   A,[__r1]
    1CD6: 08       PUSH  A
    1CD7: 51 0A    MOV   A,[__r0]
    1CD9: 08       PUSH  A
    1CDA: 10       PUSH  X
    1CDB: 7C 35 FB LCALL _strncat
    1CDE: 38 F6    ADD   SP,0xF6
(0366) 				                  
(0367) 					               
(0368) 			                       	}
    1CE0: 81 10    JMP   0x1DF1
(0369) 				else 
(0370) 			                     	{
(0371) 								    
(0372) 									ltoa(f,frequenz-shift,10);
    1CE2: 50 00    MOV   A,0x0
    1CE4: 08       PUSH  A
    1CE5: 50 0A    MOV   A,0xA
    1CE7: 08       PUSH  A
    1CE8: 5F 07 3C MOV   [__r3],[shift+1]
    1CEB: 5F 08 3B MOV   [__r2],[shift]
    1CEE: 47 08 80 TST   [__r2],0x80
    1CF1: A0 09    JZ    0x1CFB
    1CF3: 55 09 FF MOV   [__r1],0xFF
    1CF6: 55 0A FF MOV   [__r0],0xFF
    1CF9: 80 07    JMP   0x1D01
    1CFB: 55 09 00 MOV   [__r1],0x0
    1CFE: 55 0A 00 MOV   [__r0],0x0
    1D01: 51 3A    MOV   A,[frequenz+3]
    1D03: 12 07    SUB   A,[__r3]
    1D05: 53 07    MOV   [__r3],A
    1D07: 51 39    MOV   A,[frequenz+2]
    1D09: 1A 08    SBB   A,[__r2]
    1D0B: 53 08    MOV   [__r2],A
    1D0D: 51 38    MOV   A,[frequenz+1]
    1D0F: 1A 09    SBB   A,[__r1]
    1D11: 53 09    MOV   [__r1],A
    1D13: 51 37    MOV   A,[frequenz]
    1D15: 1A 0A    SBB   A,[__r0]
    1D17: 53 0A    MOV   [__r0],A
    1D19: 08       PUSH  A
    1D1A: 51 09    MOV   A,[__r1]
    1D1C: 08       PUSH  A
    1D1D: 51 08    MOV   A,[__r2]
    1D1F: 08       PUSH  A
    1D20: 51 07    MOV   A,[__r3]
    1D22: 08       PUSH  A
    1D23: 5A 09    MOV   [__r1],X
    1D25: 06 09 21 ADD   [__r1],0x21
    1D28: 51 0A    MOV   A,[__r0]
    1D2A: 08       PUSH  A
    1D2B: 51 09    MOV   A,[__r1]
    1D2D: 08       PUSH  A
    1D2E: 7C 2F C3 LCALL _ltoa
    1D31: 38 F8    ADD   SP,0xF8
(0373) 								     strncat(setgroup,f,3);
    1D33: 50 00    MOV   A,0x0
    1D35: 08       PUSH  A
    1D36: 50 03    MOV   A,0x3
    1D38: 08       PUSH  A
    1D39: 5A 09    MOV   [__r1],X
    1D3B: 06 09 21 ADD   [__r1],0x21
    1D3E: 51 0A    MOV   A,[__r0]
    1D40: 08       PUSH  A
    1D41: 51 09    MOV   A,[__r1]
    1D43: 08       PUSH  A
    1D44: 51 0A    MOV   A,[__r0]
    1D46: 08       PUSH  A
    1D47: 10       PUSH  X
    1D48: 7C 35 FB LCALL _strncat
(0374) 					                 strcat(setgroup,z);
    1D4B: 5A 09    MOV   [__r1],X
    1D4D: 06 09 31 ADD   [__r1],0x31
    1D50: 51 0A    MOV   A,[__r0]
    1D52: 08       PUSH  A
    1D53: 51 09    MOV   A,[__r1]
    1D55: 08       PUSH  A
    1D56: 51 0A    MOV   A,[__r0]
    1D58: 08       PUSH  A
    1D59: 10       PUSH  X
    1D5A: 7C 2B E9 LCALL _strcat
    1D5D: 38 F6    ADD   SP,0xF6
(0375) 					                 strncat(setgroup,f+3,4); 
    1D5F: 50 00    MOV   A,0x0
    1D61: 08       PUSH  A
    1D62: 50 04    MOV   A,0x4
    1D64: 08       PUSH  A
    1D65: 5A 09    MOV   [__r1],X
    1D67: 06 09 24 ADD   [__r1],0x24
    1D6A: 51 0A    MOV   A,[__r0]
    1D6C: 08       PUSH  A
    1D6D: 51 09    MOV   A,[__r1]
    1D6F: 08       PUSH  A
    1D70: 51 0A    MOV   A,[__r0]
    1D72: 08       PUSH  A
    1D73: 10       PUSH  X
    1D74: 7C 35 FB LCALL _strncat
(0376) 	                                strcat(setgroup,komma);    
    1D77: 5A 09    MOV   [__r1],X
    1D79: 06 09 1F ADD   [__r1],0x1F
    1D7C: 51 0A    MOV   A,[__r0]
    1D7E: 08       PUSH  A
    1D7F: 51 09    MOV   A,[__r1]
    1D81: 08       PUSH  A
    1D82: 51 0A    MOV   A,[__r0]
    1D84: 08       PUSH  A
    1D85: 10       PUSH  X
    1D86: 7C 2B E9 LCALL _strcat
    1D89: 38 F6    ADD   SP,0xF6
(0377) 									ltoa(f,frequenz,10);
    1D8B: 50 00    MOV   A,0x0
    1D8D: 08       PUSH  A
    1D8E: 50 0A    MOV   A,0xA
    1D90: 08       PUSH  A
    1D91: 51 37    MOV   A,[frequenz]
    1D93: 08       PUSH  A
    1D94: 51 38    MOV   A,[frequenz+1]
    1D96: 08       PUSH  A
    1D97: 51 39    MOV   A,[frequenz+2]
    1D99: 08       PUSH  A
    1D9A: 51 3A    MOV   A,[frequenz+3]
    1D9C: 08       PUSH  A
    1D9D: 5A 09    MOV   [__r1],X
    1D9F: 06 09 21 ADD   [__r1],0x21
    1DA2: 51 0A    MOV   A,[__r0]
    1DA4: 08       PUSH  A
    1DA5: 51 09    MOV   A,[__r1]
    1DA7: 08       PUSH  A
    1DA8: 7C 2F C3 LCALL _ltoa
(0378) 					                  strncat(setgroup,f,3);
    1DAB: 50 00    MOV   A,0x0
    1DAD: 08       PUSH  A
    1DAE: 50 03    MOV   A,0x3
    1DB0: 08       PUSH  A
    1DB1: 5A 09    MOV   [__r1],X
    1DB3: 06 09 21 ADD   [__r1],0x21
    1DB6: 51 0A    MOV   A,[__r0]
    1DB8: 08       PUSH  A
    1DB9: 51 09    MOV   A,[__r1]
    1DBB: 08       PUSH  A
    1DBC: 51 0A    MOV   A,[__r0]
    1DBE: 08       PUSH  A
    1DBF: 10       PUSH  X
    1DC0: 7C 35 FB LCALL _strncat
    1DC3: 38 F2    ADD   SP,0xF2
(0379) 					                 strcat(setgroup,z);
    1DC5: 5A 09    MOV   [__r1],X
    1DC7: 06 09 31 ADD   [__r1],0x31
    1DCA: 51 0A    MOV   A,[__r0]
    1DCC: 08       PUSH  A
    1DCD: 51 09    MOV   A,[__r1]
    1DCF: 08       PUSH  A
    1DD0: 51 0A    MOV   A,[__r0]
    1DD2: 08       PUSH  A
    1DD3: 10       PUSH  X
    1DD4: 7C 2B E9 LCALL _strcat
(0380) 					                 strncat(setgroup,f+3,4); 
    1DD7: 50 00    MOV   A,0x0
    1DD9: 08       PUSH  A
    1DDA: 50 04    MOV   A,0x4
    1DDC: 08       PUSH  A
    1DDD: 5A 09    MOV   [__r1],X
    1DDF: 06 09 24 ADD   [__r1],0x24
    1DE2: 51 0A    MOV   A,[__r0]
    1DE4: 08       PUSH  A
    1DE5: 51 09    MOV   A,[__r1]
    1DE7: 08       PUSH  A
    1DE8: 51 0A    MOV   A,[__r0]
    1DEA: 08       PUSH  A
    1DEB: 10       PUSH  X
    1DEC: 7C 35 FB LCALL _strncat
    1DEF: 38 F6    ADD   SP,0xF6
(0381) 									}
(0382) 				strcat(setgroup,komma);
    1DF1: 5A 09    MOV   [__r1],X
    1DF3: 06 09 1F ADD   [__r1],0x1F
    1DF6: 51 0A    MOV   A,[__r0]
    1DF8: 08       PUSH  A
    1DF9: 51 09    MOV   A,[__r1]
    1DFB: 08       PUSH  A
    1DFC: 51 0A    MOV   A,[__r0]
    1DFE: 08       PUSH  A
    1DFF: 10       PUSH  X
    1E00: 7C 2B E9 LCALL _strcat
    1E03: 38 FC    ADD   SP,0xFC
(0383) 			    strcat(setgroup,ctss);
    1E05: 5A 09    MOV   [__r1],X
    1E07: 06 09 2C ADD   [__r1],0x2C
    1E0A: 51 0A    MOV   A,[__r0]
    1E0C: 08       PUSH  A
    1E0D: 51 09    MOV   A,[__r1]
    1E0F: 08       PUSH  A
    1E10: 51 0A    MOV   A,[__r0]
    1E12: 08       PUSH  A
    1E13: 10       PUSH  X
    1E14: 7C 2B E9 LCALL _strcat
(0384) 		        strcat(setgroup,komma);
    1E17: 5A 09    MOV   [__r1],X
    1E19: 06 09 1F ADD   [__r1],0x1F
    1E1C: 51 0A    MOV   A,[__r0]
    1E1E: 08       PUSH  A
    1E1F: 51 09    MOV   A,[__r1]
    1E21: 08       PUSH  A
    1E22: 51 0A    MOV   A,[__r0]
    1E24: 08       PUSH  A
    1E25: 10       PUSH  X
    1E26: 7C 2B E9 LCALL _strcat
    1E29: 38 F8    ADD   SP,0xF8
(0385) 				itoa(s,Squelch,10);					
    1E2B: 50 00    MOV   A,0x0
    1E2D: 08       PUSH  A
    1E2E: 50 0A    MOV   A,0xA
    1E30: 08       PUSH  A
    1E31: 5F 09 35 MOV   [__r1],[Squelch]
    1E34: 50 00    MOV   A,0x0
    1E36: 08       PUSH  A
    1E37: 51 09    MOV   A,[__r1]
    1E39: 08       PUSH  A
    1E3A: 5A 09    MOV   [__r1],X
    1E3C: 06 09 33 ADD   [__r1],0x33
    1E3F: 50 00    MOV   A,0x0
    1E41: 08       PUSH  A
    1E42: 51 09    MOV   A,[__r1]
    1E44: 08       PUSH  A
    1E45: 7C 2E 46 LCALL _itoa
(0386) 			    strcat(setgroup,s);
    1E48: 5A 09    MOV   [__r1],X
    1E4A: 06 09 33 ADD   [__r1],0x33
    1E4D: 51 0A    MOV   A,[__r0]
    1E4F: 08       PUSH  A
    1E50: 51 09    MOV   A,[__r1]
    1E52: 08       PUSH  A
    1E53: 51 0A    MOV   A,[__r0]
    1E55: 08       PUSH  A
    1E56: 10       PUSH  X
    1E57: 7C 2B E9 LCALL _strcat
    1E5A: 38 F6    ADD   SP,0xF6
(0387) 				strcat(setgroup,komma);
    1E5C: 5A 09    MOV   [__r1],X
    1E5E: 06 09 1F ADD   [__r1],0x1F
    1E61: 51 0A    MOV   A,[__r0]
    1E63: 08       PUSH  A
    1E64: 51 09    MOV   A,[__r1]
    1E66: 08       PUSH  A
    1E67: 51 0A    MOV   A,[__r0]
    1E69: 08       PUSH  A
    1E6A: 10       PUSH  X
    1E6B: 7C 2B E9 LCALL _strcat
(0388) 			    strcat(setgroup,ctss);						
    1E6E: 5A 09    MOV   [__r1],X
    1E70: 06 09 2C ADD   [__r1],0x2C
    1E73: 51 0A    MOV   A,[__r0]
    1E75: 08       PUSH  A
    1E76: 51 09    MOV   A,[__r1]
    1E78: 08       PUSH  A
    1E79: 51 0A    MOV   A,[__r0]
    1E7B: 08       PUSH  A
    1E7C: 10       PUSH  X
    1E7D: 7C 2B E9 LCALL _strcat
    1E80: 38 F8    ADD   SP,0xF8
(0389)     UART_1_CPutString("AT+DMOSETGROUP=");
    1E82: 10       PUSH  X
    1E83: 50 01    MOV   A,0x1
    1E85: 08       PUSH  A
    1E86: 50 8B    MOV   A,0x8B
    1E88: 5C       MOV   X,A
    1E89: 18       POP   A
    1E8A: 7C 08 7B LCALL _UART_1_CPutString
    1E8D: 20       POP   X
(0390) 	UART_1_PutString(setgroup);				
    1E8E: 10       PUSH  X
    1E8F: 51 0A    MOV   A,[__r0]
    1E91: 7C 08 31 LCALL _UART_1_PutString
(0391) 	UART_1_PutCRLF();								
    1E94: 7C 08 8D LCALL _UART_1_PutCRLF
    1E97: 20       POP   X
(0392) 	setgroup_response();
    1E98: 7C 13 C3 LCALL _setgroup_response
(0393) 	//get_response(15);							
(0394) 	if (responsebuffer[12]!=0x3a || responsebuffer[13]!=0x30){
    1E9B: 3C 27 3A CMP   [responsebuffer+12],0x3A
    1E9E: B0 06    JNZ   0x1EA5
    1EA0: 3C 28 30 CMP   [responsebuffer+13],0x30
    1EA3: A0 16    JZ    0x1EBA
(0395) 		                        LCD_1_Position(1,0);
    1EA5: 10       PUSH  X
    1EA6: 57 00    MOV   X,0x0
    1EA8: 50 01    MOV   A,0x1
    1EAA: 7C 0B A6 LCALL _LCD_1_Position
(0396) 								LCD_1_PrCString("GR");
    1EAD: 50 01    MOV   A,0x1
    1EAF: 08       PUSH  A
    1EB0: 50 88    MOV   A,0x88
    1EB2: 5C       MOV   X,A
    1EB3: 18       POP   A
    1EB4: 7C 0A 35 LCALL _LCD_1_PrCString
    1EB7: 20       POP   X
(0397) 		                      
(0398) 	                           }
    1EB8: 80 04    JMP   0x1EBD
(0399) 	                else  
(0400) 							{
(0401) 		                      Print_Frequenz();
    1EBA: 7C 14 98 LCALL _Print_Frequenz
(0402) 							}		
(0403) 	warte(10);
    1EBD: 50 00    MOV   A,0x0
    1EBF: 08       PUSH  A
    1EC0: 50 0A    MOV   A,0xA
    1EC2: 08       PUSH  A
    1EC3: 7C 14 5F LCALL _warte
    1EC6: 38 FE    ADD   SP,0xFE
(0404) 	PRT1IE |= 0x80; //drehgeber Interupt erlauben
    1EC8: 43 05 80 OR    REG[0x5],0x80
    1ECB: 38 C8    ADD   SP,0xC8
    1ECD: 20       POP   X
    1ECE: 7F       RET   
(0405) 							
(0406) }
(0407) /*void kommando_setfilter(unsigned char z)
(0408) {
(0409) char str[]="+DMOSETFILTER:0";
(0410)     UART_1_CPutString("AT+SETFILTER=");
(0411) 	 switch (z){
(0412) 		         case 0: UART_1_CPutString("0,0,0");
(0413) 			             break;
(0414) 		         case 1: UART_1_CPutString("1,0,0");
(0415) 			             break;
(0416) 		         case 2: UART_1_CPutString("0,1,0");
(0417) 						break;
(0418) 		         case 3: UART_1_CPutString("0,0,1");
(0419) 		                break;
(0420) 	}
(0421) 		          
(0422)     UART_1_PutCRLF();
(0423) 	get_response(16);
(0424) 	if (strncmp(responsebuffer,str,15)){
(0425) 		                        LCD_1_Position(0,17);
(0426) 								LCD_1_PrCString("FI");	                       
(0427) 						}	
(0428) 	warte(100);
(0429) 	}*/
(0430) 
(0431) void main(void)
(0432) {
_main:
  count                --> X+2
  strPtr               --> X+0
    1ECF: 10       PUSH  X
    1ED0: 4F       MOV   X,SP
    1ED1: 38 04    ADD   SP,0x4
(0433) 
(0434) char *strPtr;
(0435) int  count;		
(0436)     
(0437) if(CPU_SCR0 & CPU_SCR0_WDRS_MASK)
    1ED3: 5D FF    MOV   A,REG[0xFF]
    1ED5: 53 0A    MOV   [__r0],A
    1ED7: 47 0A 20 TST   [__r0],0x20
    1EDA: A0 13    JZ    0x1EEE
(0438)                                     {
(0439)                                      // Reset kommt von der Watchdog der SRam wird gesichert
(0440) 									LCD_1_Start();
    1EDC: 10       PUSH  X
    1EDD: 7C 0B 36 LCALL _LCD_1_Start|LCD_1_Init|LCD_1_Start|_LCD_1_Init
(0441) 								    LCD_1_Control(1);
    1EE0: 50 01    MOV   A,0x1
    1EE2: 7C 0A 8F LCALL _LCD_1_Control
    1EE5: 20       POP   X
(0442) 									count=15;	
    1EE6: 56 03 0F MOV   [X+3],0xF
    1EE9: 56 02 00 MOV   [X+2],0x0
(0443)                                     }
    1EEC: 80 12    JMP   0x1EFF
(0444)              else 
(0445) 									{	
(0446) 									lcdInit();	
    1EEE: 7C 12 00 LCALL _lcdInit
(0447) 									warte(1000);
    1EF1: 50 03    MOV   A,0x3
    1EF3: 08       PUSH  A
    1EF4: 50 E8    MOV   A,0xE8
    1EF6: 08       PUSH  A
    1EF7: 7C 14 5F LCALL _warte
    1EFA: 38 FE    ADD   SP,0xFE
(0448) 	                                clear_LCD()	;
    1EFC: 7C 11 F6 LCALL _clear_LCD
(0449) 									// reset ist por ,xres 	
(0450) 									
(0451) 									}
(0452) 									
(0453)     eprom(1);
    1EFF: 50 01    MOV   A,0x1
    1F01: 08       PUSH  A
    1F02: 7C 16 0E LCALL _eprom
    1F05: 38 FF    ADD   SP,0xFF
(0454) 									
(0455) 	M8C_EnableGInt;
    1F07: 71 01    OR    F,0x1
(0456) 	PTT_Start();
    1F09: 10       PUSH  X
    1F0A: 7C 09 DD LCALL _PTT_Stop|_PTT_Off|PTT_Off|PTT_Stop|PTT_Start|_PTT_Start
(0457) 	HF_power_Start();								
    1F0D: 7C 0C EF LCALL HF_power_Start|_HF_power_Off|HF_power_Stop|_HF_power_Stop|_HF_power_Start|HF_power_Off
(0458) 	PTT_On();
    1F10: 7C 09 D9 LCALL _PTT_On
(0459) 	HF_power_On();
    1F13: 7C 0C EB LCALL _HF_power_On
(0460) 	Timer8_1_EnableInt();
    1F16: 7C 09 74 LCALL _Timer8_1_EnableInt
(0461)     Timer8_1_Start();	
    1F19: 7C 09 7C LCALL _Timer8_1_Start
(0462) 	UART_1_Start(UART_1_PARITY_NONE);
    1F1C: 50 00    MOV   A,0x0
    1F1E: 7C 07 82 LCALL _UART_1_Start
(0463) 	UART_1_EnableInt();
    1F21: 7C 07 62 LCALL _UART_1_EnableInt
(0464) 	UART_1_IntCntl(UART_1_ENABLE_RX_INT);
    1F24: 50 01    MOV   A,0x1
    1F26: 7C 07 AF LCALL _UART_1_IntCntl
    1F29: 20       POP   X
(0465)     counter=1;
    1F2A: 55 33 01 MOV   [counter],0x1
(0466)     UART_2_Start(UART_2_PARITY_NONE);
    1F2D: 10       PUSH  X
    1F2E: 50 00    MOV   A,0x0
    1F30: 7C 05 D7 LCALL _UART_2_Start
(0467)     UART_2_EnableInt();
    1F33: 7C 05 B7 LCALL _UART_2_EnableInt
(0468)  	//UART_2_IntCntl(UART_2_ENABLE_RX_INT);
(0469) 	UART_2_CmdReset();									
    1F36: 7C 06 ED LCALL _UART_2_CmdReset
    1F39: 20       POP   X
(0470) 	kommando_heartbeat();	
    1F3A: 7C 12 CC LCALL _kommando_heartbeat
(0471) 	warte(200);
    1F3D: 50 00    MOV   A,0x0
    1F3F: 08       PUSH  A
    1F40: 50 C8    MOV   A,0xC8
    1F42: 08       PUSH  A
    1F43: 7C 14 5F LCALL _warte
(0472) 	komando_setgroup();
    1F46: 9B DC    CALL  _komando_setgroup
(0473) 	warte(10);
    1F48: 50 00    MOV   A,0x0
    1F4A: 08       PUSH  A
    1F4B: 50 0A    MOV   A,0xA
    1F4D: 08       PUSH  A
    1F4E: 7C 14 5F LCALL _warte
    1F51: 38 FC    ADD   SP,0xFC
(0474)     kommando_setvol();
    1F53: 7C 12 9E LCALL _kommando_setvol
(0475) 	warte(200);
    1F56: 50 00    MOV   A,0x0
    1F58: 08       PUSH  A
    1F59: 50 C8    MOV   A,0xC8
    1F5B: 08       PUSH  A
    1F5C: 7C 14 5F LCALL _warte
(0476) 	kommando_setfilter();
    1F5F: 7C 12 3F LCALL _kommando_setfilter
(0477) 	warte(100);
    1F62: 50 00    MOV   A,0x0
    1F64: 08       PUSH  A
    1F65: 50 64    MOV   A,0x64
    1F67: 08       PUSH  A
    1F68: 7C 14 5F LCALL _warte
    1F6B: 38 FC    ADD   SP,0xFC
(0478) 	Print_status();
    1F6D: 99 FC    CALL  _Print_status
(0479) 	direction=0;
    1F6F: 55 3D 00 MOV   [direction],0x0
(0480) 	Eingangsamp_Start(Eingangsamp_HIGHPOWER);
    1F72: 10       PUSH  X
    1F73: 50 03    MOV   A,0x3
    1F75: 7C 0D 13 LCALL _Eingangsamp_Start|Eingangsamp_SetPower|Eingangsamp_Start|_Eingangsamp_SetPower
    1F78: 20       POP   X
(0481) 	Eingangsamp_SetGain(0x98-(micgain*16));
    1F79: 51 34    MOV   A,[micgain]
    1F7B: 64       ASL   A
    1F7C: 64       ASL   A
    1F7D: 64       ASL   A
    1F7E: 64       ASL   A
    1F7F: 53 0A    MOV   [__r0],A
    1F81: 50 98    MOV   A,0x98
    1F83: 12 0A    SUB   A,[__r0]
    1F85: 10       PUSH  X
    1F86: 7C 0D 21 LCALL _Eingangsamp_SetGain
(0482) 	RefMux_1_Start(RefMux_1_LOWPOWER);							
    1F89: 50 01    MOV   A,0x1
    1F8B: 7C 09 B9 LCALL RefMux_1_SetPower|_RefMux_1_Start|RefMux_1_Start|_RefMux_1_SetPower
    1F8E: 20       POP   X
(0483)     M8C_EnableWatchDog;
    1F8F: 41 FF EF AND   REG[0xFF],0xEF
(0484) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);	
    1F92: 43 E0 20 OR    REG[0xE0],0x20
    1F95: 86 48    JMP   0x25DE
(0485) 	while (1)
(0486) 		{
(0487) 		M8C_ClearWDT;	
    1F97: 62 E3 00 MOV   REG[0xE3],0x0
(0488) 	    print_voltage(0);
    1F9A: 50 00    MOV   A,0x0
    1F9C: 08       PUSH  A
    1F9D: 98 C0    CALL  _print_voltage
    1F9F: 38 FF    ADD   SP,0xFF
(0489) 	    kommando_rssi();
    1FA1: 7C 12 F3 LCALL _kommando_rssi
(0490) 		 if (UART_2_bCmdCheck()>0) { 
    1FA4: 10       PUSH  X
    1FA5: 7C 06 FA LCALL _UART_2_bCmdCheck
    1FA8: 20       POP   X
    1FA9: 53 0A    MOV   [__r0],A
    1FAB: 50 00    MOV   A,0x0
    1FAD: 3A 0A    CMP   A,[__r0]
    1FAF: D2 14    JNC   0x21C4
(0491) 			                       M8C_DisableIntMask(INT_MSK0, INT_MSK0_GPIO);
    1FB1: 41 E0 DF AND   REG[0xE0],0xDF
(0492) 			                       // command list for the CAT Port USB
(0493) 			                     // > 10 liefert den Herzschlag des Moduls
(0494) 		                         // > 11 liefert die Aktuelle Frequenz aus
(0495) 		                         // > 12 get Status 2 
(0496) 		                         // > 13 get Status 
(0497) 			                     // > 14 increment Frequency for 1 channel independend from channel Value (12,5 khz/25 Khz)  
(0498) 			                      //> 15 decrement Frequency for 1 Channel
(0499) 			                      //> 16 Display off
(0500) 			                     // > 17 Display on
(0501) 			                      // > 18 get voltage from the device
(0502) 			                      // > 19 increment squelch value for 1
(0503) 			                      // > 20 decrement squelch value for 1
(0504) 			                      // > 21 change Simplex/Duplex mode
(0505) 			                       //> 22 change Power high/low
(0506) 			                       //> 23 trx 1750hz tone for opening the FM Relais
(0507) 			                       //> 24 change next Filter  
(0508) 			                       //> 25 change channel value (12,5 khz/25 khz)
(0509) 		                           strPtr=UART_2_szGetParam();
    1FB4: 10       PUSH  X
    1FB5: 7C 07 0A LCALL _UART_2_szGetParam
    1FB8: 53 0A    MOV   [__r0],A
    1FBA: 5A 09    MOV   [__r1],X
    1FBC: 20       POP   X
    1FBD: 51 09    MOV   A,[__r1]
    1FBF: 54 01    MOV   [X+1],A
    1FC1: 51 0A    MOV   A,[__r0]
    1FC3: 54 00    MOV   [X+0],A
(0510)                                    if(strchr(strPtr,'>')!=0) 
    1FC5: 50 00    MOV   A,0x0
    1FC7: 08       PUSH  A
    1FC8: 50 3E    MOV   A,0x3E
    1FCA: 08       PUSH  A
    1FCB: 52 00    MOV   A,[X+0]
    1FCD: 08       PUSH  A
    1FCE: 52 01    MOV   A,[X+1]
    1FD0: 08       PUSH  A
    1FD1: 7C 35 AC LCALL _strchr
    1FD4: 38 FC    ADD   SP,0xFC
    1FD6: 3C 0A 00 CMP   [__r0],0x0
    1FD9: B0 06    JNZ   0x1FE0
    1FDB: 3C 09 00 CMP   [__r1],0x0
    1FDE: A1 DD    JZ    0x21BC
(0511) 						                              {      
(0512) 														   
(0513)                                                        while(strPtr = UART_2_szGetParam()) 
    1FE0: 81 C0    JMP   0x21A1
(0514) 													                                    {    
(0515) 																		                count=atoi(strPtr);
    1FE2: 52 00    MOV   A,[X+0]
    1FE4: 08       PUSH  A
    1FE5: 52 01    MOV   A,[X+1]
    1FE7: 08       PUSH  A
    1FE8: 7C 2C 09 LCALL _atoi
    1FEB: 38 FE    ADD   SP,0xFE
    1FED: 51 09    MOV   A,[__r1]
    1FEF: 54 03    MOV   [X+3],A
    1FF1: 51 0A    MOV   A,[__r0]
    1FF3: 54 02    MOV   [X+2],A
(0516) 																						switch (count){
    1FF5: 52 03    MOV   A,[X+3]
    1FF7: 11 0A    SUB   A,0xA
    1FF9: 52 02    MOV   A,[X+2]
    1FFB: 31 80    XOR   A,0x80
    1FFD: 19 80    SBB   A,0x80
    1FFF: C1 94    JC    0x2194
    2001: 50 19    MOV   A,0x19
    2003: 13 03    SUB   A,[X+3]
    2005: 52 02    MOV   A,[X+2]
    2007: 31 80    XOR   A,0x80
    2009: 53 02    MOV   [__rX],A
    200B: 50 80    MOV   A,0x80
    200D: 1A 02    SBB   A,[__rX]
    200F: C1 84    JC    0x2194
    2011: 52 03    MOV   A,[X+3]
    2013: 11 0A    SUB   A,0xA
    2015: 53 09    MOV   [__r1],A
    2017: 52 02    MOV   A,[X+2]
    2019: 19 00    SBB   A,0x0
    201B: 53 0A    MOV   [__r0],A
    201D: 65 09    ASL   [__r1]
    201F: 6B 0A    RLC   [__r0]
    2021: 06 09 17 ADD   [__r1],0x17
    2024: 0E 0A 04 ADC   [__r0],0x4
    2027: 51 0A    MOV   A,[__r0]
    2029: 10       PUSH  X
    202A: 58 09    MOV   X,[__r1]
    202C: 08       PUSH  A
    202D: 28       ROMX  
    202E: 53 0A    MOV   [__r0],A
    2030: 18       POP   A
    2031: 75       INC   X
    2032: 09 00    ADC   A,0x0
    2034: 28       ROMX  
    2035: 53 09    MOV   [__r1],A
    2037: 20       POP   X
    2038: 51 0A    MOV   A,[__r0]
    203A: 08       PUSH  A
    203B: 51 09    MOV   A,[__r1]
    203D: 08       PUSH  A
    203E: 7F       RET   
(0517) 																							           case 10:
(0518)                                                                                                                UART_2_CPutString("Heartbeat");
    203F: 10       PUSH  X
    2040: 50 01    MOV   A,0x1
    2042: 08       PUSH  A
    2043: 50 7E    MOV   A,0x7E
    2045: 5C       MOV   X,A
    2046: 18       POP   A
    2047: 7C 06 D2 LCALL _UART_2_CPutString
    204A: 20       POP   X
(0519) 																								                break;
    204B: 81 48    JMP   0x2194
(0520) 																										case 11:
(0521) 																							           			Print_Frequenz();
    204D: 7C 14 98 LCALL _Print_Frequenz
(0522) 																												break;
    2050: 81 43    JMP   0x2194
(0523) 																							            case 12:
(0524) 																								                Print_Status2();
    2052: 98 8C    CALL  _Print_Status2
(0525) 																							           // case 13:
(0526) 																								         //       Print_status();
(0527) 																								           //     break;
(0528) 																							            case 14:
(0529) 																								                if (((TXstatus & 1)==0)&&(frequenz<1459999)){
    2054: 47 3F 01 TST   [TXstatus],0x1
    2057: B0 23    JNZ   0x207B
    2059: 51 3A    MOV   A,[frequenz+3]
    205B: 11 1F    SUB   A,0x1F
    205D: 51 39    MOV   A,[frequenz+2]
    205F: 19 47    SBB   A,0x47
    2061: 51 38    MOV   A,[frequenz+1]
    2063: 19 16    SBB   A,0x16
    2065: 51 37    MOV   A,[frequenz]
    2067: 31 80    XOR   A,0x80
    2069: 19 80    SBB   A,0x80
    206B: D0 0F    JNC   0x207B
(0530) 																													                                         frequenz=frequenz+125;
    206D: 06 3A 7D ADD   [frequenz+3],0x7D
    2070: 0E 39 00 ADC   [frequenz+2],0x0
    2073: 0E 38 00 ADC   [frequenz+1],0x0
    2076: 0E 37 00 ADC   [frequenz],0x0
(0531) 																													                                      
(0532) 																																							}
    2079: 81 1A    JMP   0x2194
(0533) 																												else 
(0534) 																																							{
(0535) 																																							 frequenz=frequenz+250;							
    207B: 06 3A FA ADD   [frequenz+3],0xFA
    207E: 0E 39 00 ADC   [frequenz+2],0x0
    2081: 0E 38 00 ADC   [frequenz+1],0x0
    2084: 0E 37 00 ADC   [frequenz],0x0
(0536) 																																							}
(0537) 																												//komando_setgroup();  											
(0538) 																												break;
    2087: 81 0C    JMP   0x2194
(0539) 																										case 15:	
(0540) 																												if (((TXstatus & 1)==0)&&(frequenz>1440001)){
    2089: 47 3F 01 TST   [TXstatus],0x1
    208C: B0 27    JNZ   0x20B4
    208E: 50 01    MOV   A,0x1
    2090: 12 3A    SUB   A,[frequenz+3]
    2092: 50 F9    MOV   A,0xF9
    2094: 1A 39    SBB   A,[frequenz+2]
    2096: 50 15    MOV   A,0x15
    2098: 1A 38    SBB   A,[frequenz+1]
    209A: 51 37    MOV   A,[frequenz]
    209C: 31 80    XOR   A,0x80
    209E: 53 02    MOV   [__rX],A
    20A0: 50 80    MOV   A,0x80
    20A2: 1A 02    SBB   A,[__rX]
    20A4: D0 0F    JNC   0x20B4
(0541) 																													                                         frequenz=frequenz-125;  
    20A6: 16 3A 7D SUB   [frequenz+3],0x7D
    20A9: 1E 39 00 SBB   [frequenz+2],0x0
    20AC: 1E 38 00 SBB   [frequenz+1],0x0
    20AF: 1E 37 00 SBB   [frequenz],0x0
(0542) 																																							}
    20B2: 80 E1    JMP   0x2194
(0543) 																												else 
(0544) 																																							{
(0545) 																																							 frequenz=frequenz-250;							
    20B4: 16 3A FA SUB   [frequenz+3],0xFA
    20B7: 1E 39 00 SBB   [frequenz+2],0x0
    20BA: 1E 38 00 SBB   [frequenz+1],0x0
    20BD: 1E 37 00 SBB   [frequenz],0x0
(0546) 																													                                         }
(0547) 																												//komando_setgroup();  											
(0548) 																												break;
    20C0: 80 D3    JMP   0x2194
(0549) 																										case 16:	
(0550) 																												LCD_1_Control(8);
    20C2: 10       PUSH  X
    20C3: 50 08    MOV   A,0x8
    20C5: 7C 0A 8F LCALL _LCD_1_Control
    20C8: 20       POP   X
(0551) 																								                  break;
    20C9: 80 CA    JMP   0x2194
(0552) 																							            case 17:
(0553) 																												LCD_1_Control(12);
    20CB: 10       PUSH  X
    20CC: 50 0C    MOV   A,0xC
    20CE: 7C 0A 8F LCALL _LCD_1_Control
    20D1: 20       POP   X
(0554) 																								                break;
    20D2: 80 C1    JMP   0x2194
(0555) 																										case 18:
(0556) 																								                //get_voltage();
(0557) 																								                print_voltage(1);
    20D4: 50 01    MOV   A,0x1
    20D6: 08       PUSH  A
    20D7: 7C 18 5F LCALL _print_voltage
    20DA: 38 FF    ADD   SP,0xFF
(0558) 																								                break;
    20DC: 80 B7    JMP   0x2194
(0559) 																							            case 19:
(0560) 																								                if (Squelch<8){
    20DE: 3C 35 08 CMP   [Squelch],0x8
    20E1: D0 B2    JNC   0x2194
(0561) 																													           Squelch++;
    20E3: 76 35    INC   [Squelch]
(0562) 																												
(0563) 																											                	}
(0564) 																												break;
    20E5: 80 AE    JMP   0x2194
(0565) 																							            case 20:
(0566) 																								                if (Squelch>0){
    20E7: 50 00    MOV   A,0x0
    20E9: 3A 35    CMP   A,[Squelch]
    20EB: D0 A8    JNC   0x2194
(0567) 																													           Squelch--;
    20ED: 7A 35    DEC   [Squelch]
(0568) 																												
(0569) 																											                	}
(0570) 																												break;
    20EF: 80 A4    JMP   0x2194
(0571) 																							             case 21:
(0572) 																								                TXstatus^= 0x02;
    20F1: 36 3F 02 XOR   [TXstatus],0x2
(0573) 																								                break;
    20F4: 80 9F    JMP   0x2194
(0574) 																							             case 22:
(0575) 																								                TXstatus^= 0x04;
    20F6: 36 3F 04 XOR   [TXstatus],0x4
(0576) 															                									HF_power_Invert(); 
    20F9: 10       PUSH  X
    20FA: 7C 0D 02 LCALL _HF_power_Invert
    20FD: 20       POP   X
(0577) 																								                break;
    20FE: 80 95    JMP   0x2194
(0578) 																							             case 24:
(0579) 																								                filter++;
    2100: 76 40    INC   [filter]
(0580) 															                               						if (filter>3){
    2102: 50 03    MOV   A,0x3
    2104: 3A 40    CMP   A,[filter]
    2106: D0 04    JNC   0x210B
(0581) 																           													filter=0;
    2108: 55 40 00 MOV   [filter],0x0
(0582) 							       						              														}
(0583) 																															kommando_setfilter();
    210B: 7C 12 3F LCALL _kommando_setfilter
(0584) 																															//Print_status();
(0585) 																								                break;
    210E: 80 85    JMP   0x2194
(0586) 																							             case 25:
(0587) 																												TXstatus^= 0x01;
    2110: 36 3F 01 XOR   [TXstatus],0x1
(0588) 																								                if (((frequenz & 1)==1)&&((TXstatus & 1)==1)){
    2113: 51 3A    MOV   A,[frequenz+3]
    2115: 21 01    AND   A,0x1
    2117: 55 08 00 MOV   [__r2],0x0
    211A: 55 09 00 MOV   [__r1],0x0
    211D: 55 0A 00 MOV   [__r0],0x0
    2120: 3C 0A 00 CMP   [__r0],0x0
    2123: B0 70    JNZ   0x2194
    2125: 3C 09 00 CMP   [__r1],0x0
    2128: B0 6B    JNZ   0x2194
    212A: 3C 08 00 CMP   [__r2],0x0
    212D: B0 66    JNZ   0x2194
    212F: 39 01    CMP   A,0x1
    2131: B0 62    JNZ   0x2194
    2133: 51 3F    MOV   A,[TXstatus]
    2135: 21 01    AND   A,0x1
    2137: 39 01    CMP   A,0x1
    2139: B0 5A    JNZ   0x2194
(0589) 																							    					                                          frequenz=(float)frequenz+125;
    213B: 51 37    MOV   A,[frequenz]
    213D: 08       PUSH  A
    213E: 51 38    MOV   A,[frequenz+1]
    2140: 08       PUSH  A
    2141: 51 39    MOV   A,[frequenz+2]
    2143: 08       PUSH  A
    2144: 51 3A    MOV   A,[frequenz+3]
    2146: 08       PUSH  A
    2147: 7C 2B 24 LCALL 0x2B24
    214A: 18       POP   A
    214B: 53 07    MOV   [__r3],A
    214D: 18       POP   A
    214E: 53 08    MOV   [__r2],A
    2150: 18       POP   A
    2151: 53 09    MOV   [__r1],A
    2153: 18       POP   A
    2154: 53 0A    MOV   [__r0],A
    2156: 50 42    MOV   A,0x42
    2158: 08       PUSH  A
    2159: 50 FA    MOV   A,0xFA
    215B: 08       PUSH  A
    215C: 50 00    MOV   A,0x0
    215E: 08       PUSH  A
    215F: 08       PUSH  A
    2160: 51 0A    MOV   A,[__r0]
    2162: 08       PUSH  A
    2163: 51 09    MOV   A,[__r1]
    2165: 08       PUSH  A
    2166: 51 08    MOV   A,[__r2]
    2168: 08       PUSH  A
    2169: 51 07    MOV   A,[__r3]
    216B: 08       PUSH  A
    216C: 7C 27 9A LCALL 0x279A
    216F: 18       POP   A
    2170: 53 07    MOV   [__r3],A
    2172: 18       POP   A
    2173: 53 08    MOV   [__r2],A
    2175: 18       POP   A
    2176: 53 09    MOV   [__r1],A
    2178: 18       POP   A
    2179: 38 FC    ADD   SP,0xFC
    217B: 08       PUSH  A
    217C: 51 09    MOV   A,[__r1]
    217E: 08       PUSH  A
    217F: 51 08    MOV   A,[__r2]
    2181: 08       PUSH  A
    2182: 51 07    MOV   A,[__r3]
    2184: 08       PUSH  A
    2185: 7C 26 9D LCALL 0x269D
    2188: 18       POP   A
    2189: 53 3A    MOV   [frequenz+3],A
    218B: 18       POP   A
    218C: 53 39    MOV   [frequenz+2],A
    218E: 18       POP   A
    218F: 53 38    MOV   [frequenz+1],A
    2191: 18       POP   A
    2192: 53 37    MOV   [frequenz],A
(0590) 																													                                      
(0591) 																													                                         }
(0592) 																												break;					
(0593) 																					                           		
(0594) 																						              } 
(0595) 																						               komando_setgroup();
    2194: 99 8E    CALL  _komando_setgroup
(0596) 																						               eprom(0);
    2196: 50 00    MOV   A,0x0
    2198: 08       PUSH  A
    2199: 7C 16 0E LCALL _eprom
    219C: 38 FF    ADD   SP,0xFF
(0597) 																						               Print_status();
    219E: 7C 19 6B LCALL _Print_status
(0598) 																						}
    21A1: 10       PUSH  X
    21A2: 7C 07 0A LCALL _UART_2_szGetParam
    21A5: 53 0A    MOV   [__r0],A
    21A7: 5A 09    MOV   [__r1],X
    21A9: 20       POP   X
    21AA: 51 09    MOV   A,[__r1]
    21AC: 54 01    MOV   [X+1],A
    21AE: 51 0A    MOV   A,[__r0]
    21B0: 54 00    MOV   [X+0],A
    21B2: 3C 0A 00 CMP   [__r0],0x0
    21B5: BE 2C    JNZ   0x1FE2
    21B7: 3C 09 00 CMP   [__r1],0x0
    21BA: BE 27    JNZ   0x1FE2
(0599) 																						
(0600) 													}
(0601) 								                    UART_2_CmdReset();
    21BC: 10       PUSH  X
    21BD: 7C 06 ED LCALL _UART_2_CmdReset
    21C0: 20       POP   X
(0602) 													M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
    21C1: 43 E0 20 OR    REG[0xE0],0x20
(0603) 	                              	}
(0604) 		if ((TXstatus & 16)==16){
    21C4: 51 3F    MOV   A,[TXstatus]
    21C6: 21 10    AND   A,0x10
    21C8: 39 10    CMP   A,0x10
    21CA: B0 27    JNZ   0x21F2
(0605) 			      M8C_DisableIntMask(INT_MSK0, INT_MSK0_GPIO);
    21CC: 41 E0 DF AND   REG[0xE0],0xDF
(0606) 	              if ((TXstatus & 32)==32){
    21CF: 51 3F    MOV   A,[TXstatus]
    21D1: 21 20    AND   A,0x20
    21D3: 39 20    CMP   A,0x20
    21D5: B0 06    JNZ   0x21DC
(0607) 			                              kommando_rufton();
    21D7: 7C 13 6B LCALL _kommando_rufton
(0608) 	                          	          }
    21DA: 80 09    JMP   0x21E4
(0609) 				  else
(0610) 				                          {
(0611) 			                                wait_ptt();
    21DC: 7C 13 BA LCALL _wait_ptt
(0612) 					                         Eingangsamp_Stop();
    21DF: 10       PUSH  X
    21E0: 7C 0D 43 LCALL _Eingangsamp_Stop
    21E3: 20       POP   X
(0613) 		                                    }
(0614) 		          PTT_Invert();
    21E4: 10       PUSH  X
    21E5: 7C 09 F0 LCALL _PTT_Invert
    21E8: 20       POP   X
(0615) 	              TXstatus &=207;
    21E9: 26 3F CF AND   [TXstatus],0xCF
(0616) 	              Print_Frequenz();
    21EC: 7C 14 98 LCALL _Print_Frequenz
(0617) 			      M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
    21EF: 43 E0 20 OR    REG[0xE0],0x20
(0618) 	      }
(0619) 		/*if (((TXstatus2 & 3)==3)&&((TXstatus & 128)==0)){
(0620) 			                                             //clear_LCD();
(0621) 			                                             Print_Frequenz();
(0622) 			                                             line();
(0623) 			                                            
(0624) 	                          	}*/
(0625) 	    if (direction >=128){
    21F2: 3C 3D 80 CMP   [direction],0x80
    21F5: C0 C4    JC    0x22BA
(0626) 			                    
(0627) 			                 if ((direction==129)&& ((TXstatus & 1)==0)){
    21F7: 3C 3D 81 CMP   [direction],0x81
    21FA: B0 26    JNZ   0x2221
    21FC: 47 3F 01 TST   [TXstatus],0x1
    21FF: B0 21    JNZ   0x2221
(0628) 								                                        if (frequenz<1459999){
    2201: 51 3A    MOV   A,[frequenz+3]
    2203: 11 1F    SUB   A,0x1F
    2205: 51 39    MOV   A,[frequenz+2]
    2207: 19 47    SBB   A,0x47
    2209: 51 38    MOV   A,[frequenz+1]
    220B: 19 16    SBB   A,0x16
    220D: 51 37    MOV   A,[frequenz]
    220F: 31 80    XOR   A,0x80
    2211: 19 80    SBB   A,0x80
    2213: D0 0D    JNC   0x2221
(0629) 								                                                           frequenz=frequenz+125;
    2215: 06 3A 7D ADD   [frequenz+3],0x7D
    2218: 0E 39 00 ADC   [frequenz+2],0x0
    221B: 0E 38 00 ADC   [frequenz+1],0x0
    221E: 0E 37 00 ADC   [frequenz],0x0
(0630) 																		                  }
(0631) 																		}
(0632) 							 if ((direction==128)&& ((TXstatus & 1)==0)){
    2221: 3C 3D 80 CMP   [direction],0x80
    2224: B0 2A    JNZ   0x224F
    2226: 47 3F 01 TST   [TXstatus],0x1
    2229: B0 25    JNZ   0x224F
(0633) 								                    				    if (frequenz>1440001){
    222B: 50 01    MOV   A,0x1
    222D: 12 3A    SUB   A,[frequenz+3]
    222F: 50 F9    MOV   A,0xF9
    2231: 1A 39    SBB   A,[frequenz+2]
    2233: 50 15    MOV   A,0x15
    2235: 1A 38    SBB   A,[frequenz+1]
    2237: 51 37    MOV   A,[frequenz]
    2239: 31 80    XOR   A,0x80
    223B: 53 02    MOV   [__rX],A
    223D: 50 80    MOV   A,0x80
    223F: 1A 02    SBB   A,[__rX]
    2241: D0 0D    JNC   0x224F
(0634) 								                                                            frequenz=frequenz-125;
    2243: 16 3A 7D SUB   [frequenz+3],0x7D
    2246: 1E 39 00 SBB   [frequenz+2],0x0
    2249: 1E 38 00 SBB   [frequenz+1],0x0
    224C: 1E 37 00 SBB   [frequenz],0x0
(0635) 						                                                           			}
(0636) 																		}
(0637) 							if ((direction==129)&& ((TXstatus & 1)==1)){
    224F: 3C 3D 81 CMP   [direction],0x81
    2252: B0 29    JNZ   0x227C
    2254: 51 3F    MOV   A,[TXstatus]
    2256: 21 01    AND   A,0x1
    2258: 39 01    CMP   A,0x1
    225A: B0 21    JNZ   0x227C
(0638) 								 										if (frequenz<1459999){
    225C: 51 3A    MOV   A,[frequenz+3]
    225E: 11 1F    SUB   A,0x1F
    2260: 51 39    MOV   A,[frequenz+2]
    2262: 19 47    SBB   A,0x47
    2264: 51 38    MOV   A,[frequenz+1]
    2266: 19 16    SBB   A,0x16
    2268: 51 37    MOV   A,[frequenz]
    226A: 31 80    XOR   A,0x80
    226C: 19 80    SBB   A,0x80
    226E: D0 0D    JNC   0x227C
(0639) 																							frequenz=frequenz+250;
    2270: 06 3A FA ADD   [frequenz+3],0xFA
    2273: 0E 39 00 ADC   [frequenz+2],0x0
    2276: 0E 38 00 ADC   [frequenz+1],0x0
    2279: 0E 37 00 ADC   [frequenz],0x0
(0640) 																							}
(0641) 																			}
(0642) 							 if ((direction==128)&& ((TXstatus & 1)==1)){
    227C: 3C 3D 80 CMP   [direction],0x80
    227F: B0 2D    JNZ   0x22AD
    2281: 51 3F    MOV   A,[TXstatus]
    2283: 21 01    AND   A,0x1
    2285: 39 01    CMP   A,0x1
    2287: B0 25    JNZ   0x22AD
(0643) 								                    					if (frequenz>1440001){
    2289: 50 01    MOV   A,0x1
    228B: 12 3A    SUB   A,[frequenz+3]
    228D: 50 F9    MOV   A,0xF9
    228F: 1A 39    SBB   A,[frequenz+2]
    2291: 50 15    MOV   A,0x15
    2293: 1A 38    SBB   A,[frequenz+1]
    2295: 51 37    MOV   A,[frequenz]
    2297: 31 80    XOR   A,0x80
    2299: 53 02    MOV   [__rX],A
    229B: 50 80    MOV   A,0x80
    229D: 1A 02    SBB   A,[__rX]
    229F: D0 0D    JNC   0x22AD
(0644) 																	                        frequenz=frequenz-250;
    22A1: 16 3A FA SUB   [frequenz+3],0xFA
    22A4: 1E 39 00 SBB   [frequenz+2],0x0
    22A7: 1E 38 00 SBB   [frequenz+1],0x0
    22AA: 1E 37 00 SBB   [frequenz],0x0
(0645) 						                                         							}
(0646) 							                    						}	
(0647) 							
(0648) 							    
(0649) 								direction=0;						
    22AD: 55 3D 00 MOV   [direction],0x0
(0650) 								komando_setgroup();
    22B0: 98 72    CALL  _komando_setgroup
(0651) 							    eprom(0);
    22B2: 50 00    MOV   A,0x0
    22B4: 08       PUSH  A
    22B5: 7C 16 0E LCALL _eprom
    22B8: 38 FF    ADD   SP,0xFF
(0652)                          		}
(0653) 		//Menue abfrage
(0654) 	    if (((PRT1DR & 16)!=16) &&((TXstatus & 32)==0)){ //Menutaste gedrückt und Sender aus 
    22BA: 5D 04    MOV   A,REG[0x4]
    22BC: 21 10    AND   A,0x10
    22BE: 39 10    CMP   A,0x10
    22C0: A3 1D    JZ    0x25DE
    22C2: 47 3F 20 TST   [TXstatus],0x20
    22C5: B3 18    JNZ   0x25DE
(0655) 			                 PRT1IE &=0xdf; //Tx on sperren solange Menu aktiv
    22C7: 41 05 DF AND   REG[0x5],0xDF
(0656) 			                 PRT0IE &=0xF7; // drehgeber 2 Interupt sperren solange Menu aktiv
    22CA: 41 01 F7 AND   REG[0x1],0xF7
(0657) 			                  TXstatus |=0x80;
    22CD: 2E 3F 80 OR    [TXstatus],0x80
(0658) 			                 Timer8_2_DisableInt(); 
    22D0: 10       PUSH  X
    22D1: 7C 09 32 LCALL _Timer8_2_DisableInt
    22D4: 20       POP   X
    22D5: 82 BE    JMP   0x2594
(0659) 			              
(0660) 			                while (((TXstatus & 128)==128)&&((PRT1DR & 16)!=16)){
(0661) 								                                                M8C_ClearWDT;	
    22D7: 62 E3 00 MOV   REG[0xE3],0x0
(0662) 							                                    				LCD_1_Position(0,0);
    22DA: 10       PUSH  X
    22DB: 50 00    MOV   A,0x0
    22DD: 57 00    MOV   X,0x0
    22DF: 7C 0B A6 LCALL _LCD_1_Position
(0663) 							 													LCD_1_PrCString("     Menue          ");
    22E2: 50 01    MOV   A,0x1
    22E4: 08       PUSH  A
    22E5: 50 69    MOV   A,0x69
    22E7: 5C       MOV   X,A
    22E8: 18       POP   A
    22E9: 7C 0A 35 LCALL _LCD_1_PrCString
(0664) 							 													LCD_1_Control(15);														
    22EC: 50 0F    MOV   A,0xF
    22EE: 7C 0A 8F LCALL _LCD_1_Control
    22F1: 20       POP   X
(0665) 								                                                menu_taste_down();
    22F2: 7C 14 80 LCALL _menu_taste_down
(0666) 																				LCD_1_Position(2,2);
    22F5: 10       PUSH  X
    22F6: 50 02    MOV   A,0x2
    22F8: 57 02    MOV   X,0x2
    22FA: 7C 0B A6 LCALL _LCD_1_Position
    22FD: 20       POP   X
    22FE: 80 9C    JMP   0x239B
(0667) 						      													while ((PRT1DR & 16)==16){
(0668) 								           																	if (direction>=128){
    2300: 3C 3D 80 CMP   [direction],0x80
    2303: C0 94    JC    0x2398
(0669) 																            													direction=0;
    2305: 55 3D 00 MOV   [direction],0x0
(0670) 																												                TXstatus^= 0x01;
    2308: 36 3F 01 XOR   [TXstatus],0x1
(0671) 																								                                if (((frequenz & 1)==1)&&((TXstatus & 1)==1)){
    230B: 51 3A    MOV   A,[frequenz+3]
    230D: 21 01    AND   A,0x1
    230F: 55 08 00 MOV   [__r2],0x0
    2312: 55 09 00 MOV   [__r1],0x0
    2315: 55 0A 00 MOV   [__r0],0x0
    2318: 3C 0A 00 CMP   [__r0],0x0
    231B: B0 70    JNZ   0x238C
    231D: 3C 09 00 CMP   [__r1],0x0
    2320: B0 6B    JNZ   0x238C
    2322: 3C 08 00 CMP   [__r2],0x0
    2325: B0 66    JNZ   0x238C
    2327: 39 01    CMP   A,0x1
    2329: B0 62    JNZ   0x238C
    232B: 51 3F    MOV   A,[TXstatus]
    232D: 21 01    AND   A,0x1
    232F: 39 01    CMP   A,0x1
    2331: B0 5A    JNZ   0x238C
(0672) 																							    					                                          frequenz=(float)frequenz+125;
    2333: 51 37    MOV   A,[frequenz]
    2335: 08       PUSH  A
    2336: 51 38    MOV   A,[frequenz+1]
    2338: 08       PUSH  A
    2339: 51 39    MOV   A,[frequenz+2]
    233B: 08       PUSH  A
    233C: 51 3A    MOV   A,[frequenz+3]
    233E: 08       PUSH  A
    233F: 7C 2B 24 LCALL 0x2B24
    2342: 18       POP   A
    2343: 53 07    MOV   [__r3],A
    2345: 18       POP   A
    2346: 53 08    MOV   [__r2],A
    2348: 18       POP   A
    2349: 53 09    MOV   [__r1],A
    234B: 18       POP   A
    234C: 53 0A    MOV   [__r0],A
    234E: 50 42    MOV   A,0x42
    2350: 08       PUSH  A
    2351: 50 FA    MOV   A,0xFA
    2353: 08       PUSH  A
    2354: 50 00    MOV   A,0x0
    2356: 08       PUSH  A
    2357: 08       PUSH  A
    2358: 51 0A    MOV   A,[__r0]
    235A: 08       PUSH  A
    235B: 51 09    MOV   A,[__r1]
    235D: 08       PUSH  A
    235E: 51 08    MOV   A,[__r2]
    2360: 08       PUSH  A
    2361: 51 07    MOV   A,[__r3]
    2363: 08       PUSH  A
    2364: 7C 27 9A LCALL 0x279A
    2367: 18       POP   A
    2368: 53 07    MOV   [__r3],A
    236A: 18       POP   A
    236B: 53 08    MOV   [__r2],A
    236D: 18       POP   A
    236E: 53 09    MOV   [__r1],A
    2370: 18       POP   A
    2371: 38 FC    ADD   SP,0xFC
    2373: 08       PUSH  A
    2374: 51 09    MOV   A,[__r1]
    2376: 08       PUSH  A
    2377: 51 08    MOV   A,[__r2]
    2379: 08       PUSH  A
    237A: 51 07    MOV   A,[__r3]
    237C: 08       PUSH  A
    237D: 7C 26 9D LCALL 0x269D
    2380: 18       POP   A
    2381: 53 3A    MOV   [frequenz+3],A
    2383: 18       POP   A
    2384: 53 39    MOV   [frequenz+2],A
    2386: 18       POP   A
    2387: 53 38    MOV   [frequenz+1],A
    2389: 18       POP   A
    238A: 53 37    MOV   [frequenz],A
(0673) 																															                                 	}
(0674) 																            													Print_status();
    238C: 7C 19 6B LCALL _Print_status
(0675) 																																
(0676) 																																LCD_1_Position(2,2);
    238F: 10       PUSH  X
    2390: 50 02    MOV   A,0x2
    2392: 57 02    MOV   X,0x2
    2394: 7C 0B A6 LCALL _LCD_1_Position
    2397: 20       POP   X
(0677) 																																}
(0678) 																											M8C_ClearWDT;	
    2398: 62 E3 00 MOV   REG[0xE3],0x0
(0679) 							                         													 }
    239B: 5D 04    MOV   A,REG[0x4]
    239D: 21 10    AND   A,0x10
    239F: 39 10    CMP   A,0x10
    23A1: AF 5E    JZ    0x2300
(0680) 																			
(0681) 																				menu_taste_down();
    23A3: 7C 14 80 LCALL _menu_taste_down
(0682) 																				LCD_1_Position(2,15);
    23A6: 10       PUSH  X
    23A7: 57 0F    MOV   X,0xF
    23A9: 50 02    MOV   A,0x2
    23AB: 7C 0B A6 LCALL _LCD_1_Position
    23AE: 20       POP   X
    23AF: 80 1E    JMP   0x23CE
(0683) 																				//Auswahl HF Power
(0684)                             													while 	((PRT1DR & 16)==16){
(0685) 								                         													if (direction>=128){
    23B1: 3C 3D 80 CMP   [direction],0x80
    23B4: C0 16    JC    0x23CB
(0686) 																            													direction=0;
    23B6: 55 3D 00 MOV   [direction],0x0
(0687) 															                													TXstatus^= 0x04;
    23B9: 36 3F 04 XOR   [TXstatus],0x4
(0688) 															                													Print_status();
    23BC: 7C 19 6B LCALL _Print_status
(0689) 															                													HF_power_Invert();
    23BF: 10       PUSH  X
    23C0: 7C 0D 02 LCALL _HF_power_Invert
(0690) 																																LCD_1_Position(2,15);					
    23C3: 57 0F    MOV   X,0xF
    23C5: 50 02    MOV   A,0x2
    23C7: 7C 0B A6 LCALL _LCD_1_Position
    23CA: 20       POP   X
(0691) 												                      															}
(0692) 																											M8C_ClearWDT;	
    23CB: 62 E3 00 MOV   REG[0xE3],0x0
(0693) 					                          																} 
    23CE: 5D 04    MOV   A,REG[0x4]
    23D0: 21 10    AND   A,0x10
    23D2: 39 10    CMP   A,0x10
    23D4: AF DC    JZ    0x23B1
(0694) 																				menu_taste_down();
    23D6: 7C 14 80 LCALL _menu_taste_down
(0695) 																				LCD_1_Position(3,2);
    23D9: 10       PUSH  X
    23DA: 57 02    MOV   X,0x2
    23DC: 50 03    MOV   A,0x3
    23DE: 7C 0B A6 LCALL _LCD_1_Position
    23E1: 20       POP   X
    23E2: 80 44    JMP   0x2427
(0696) 																				//Auswahl Squelch level
(0697) 																				while 	((PRT1DR & 16)==16){
(0698) 								                         								   					if((direction==128)&&(Squelch<=8)){
    23E4: 3C 3D 80 CMP   [direction],0x80
    23E7: B0 18    JNZ   0x2400
    23E9: 50 08    MOV   A,0x8
    23EB: 3A 35    CMP   A,[Squelch]
    23ED: C0 12    JC    0x2400
(0699) 															               
(0700) 																                            													direction=0;
    23EF: 55 3D 00 MOV   [direction],0x0
(0701) 															                                													Squelch++;
    23F2: 76 35    INC   [Squelch]
(0702) 															                               													    if (Squelch>8){
    23F4: 50 08    MOV   A,0x8
    23F6: 3A 35    CMP   A,[Squelch]
    23F8: D0 04    JNC   0x23FD
(0703) 																								            												Squelch=8;
    23FA: 55 35 08 MOV   [Squelch],0x8
(0704) 																						                 													}
(0705) 															                                													Print_status();
    23FD: 7C 19 6B LCALL _Print_status
(0706) 															                                													//LCD_1_Position(1,22);
(0707) 																		                														}
(0708) 														  													if ((direction==129)&&(Squelch>=0)){
    2400: 3C 3D 81 CMP   [direction],0x81
    2403: B0 17    JNZ   0x241B
    2405: 3C 35 00 CMP   [Squelch],0x0
    2408: C0 12    JC    0x241B
(0709) 															                                													direction=0;
    240A: 55 3D 00 MOV   [direction],0x0
(0710) 															                               														 Squelch--; 
    240D: 7A 35    DEC   [Squelch]
(0711) 															                                													if (Squelch>20){
    240F: 50 14    MOV   A,0x14
    2411: 3A 35    CMP   A,[Squelch]
    2413: D0 04    JNC   0x2418
(0712) 																								           														Squelch=0;
    2415: 55 35 00 MOV   [Squelch],0x0
(0713) 																						                  														}
(0714) 															                                													Print_status();
    2418: 7C 19 6B LCALL _Print_status
(0715) 															                                													//LCD_1_Position(1,22);
(0716) 														                                     													}
(0717) 												                                                			//	warte(100);
(0718) 																											LCD_1_Position(3,2);
    241B: 10       PUSH  X
    241C: 57 02    MOV   X,0x2
    241E: 50 03    MOV   A,0x3
    2420: 7C 0B A6 LCALL _LCD_1_Position
    2423: 20       POP   X
(0719) 																											M8C_ClearWDT;	
    2424: 62 E3 00 MOV   REG[0xE3],0x0
(0720) 																											}	                
    2427: 5D 04    MOV   A,REG[0x4]
    2429: 21 10    AND   A,0x10
    242B: 39 10    CMP   A,0x10
    242D: AF B6    JZ    0x23E4
(0721) 																			
(0722) 																				menu_taste_down();
    242F: 7C 14 80 LCALL _menu_taste_down
(0723) 																				LCD_1_Position(3,6);
    2432: 10       PUSH  X
    2433: 57 06    MOV   X,0x6
    2435: 50 03    MOV   A,0x3
    2437: 7C 0B A6 LCALL _LCD_1_Position
    243A: 20       POP   X
    243B: 80 1B    JMP   0x2457
(0724) 																				// Auswahl    simplex /Duplex
(0725) 																				while 	((PRT1DR & 16)==16){
(0726) 								                       														 if (direction>=128){
    243D: 3C 3D 80 CMP   [direction],0x80
    2440: C0 13    JC    0x2454
(0727) 															                													direction=0;
    2442: 55 3D 00 MOV   [direction],0x0
(0728) 															                													TXstatus^= 0x02;
    2445: 36 3F 02 XOR   [TXstatus],0x2
(0729) 															                													Print_status();
    2448: 7C 19 6B LCALL _Print_status
(0730) 															                 													LCD_1_Position(3,6);
    244B: 10       PUSH  X
    244C: 57 06    MOV   X,0x6
    244E: 50 03    MOV   A,0x3
    2450: 7C 0B A6 LCALL _LCD_1_Position
    2453: 20       POP   X
(0731) 														                   														}
(0732) 																											M8C_ClearWDT;	
    2454: 62 E3 00 MOV   REG[0xE3],0x0
(0733) 																											
(0734) 							                           														}  
    2457: 5D 04    MOV   A,REG[0x4]
    2459: 21 10    AND   A,0x10
    245B: 39 10    CMP   A,0x10
    245D: AF DF    JZ    0x243D
(0735) 																				
(0736) 																				menu_taste_down();
    245F: 7C 14 80 LCALL _menu_taste_down
(0737) 																				LCD_1_Position(3,12);
    2462: 10       PUSH  X
    2463: 57 0C    MOV   X,0xC
    2465: 50 03    MOV   A,0x3
    2467: 7C 0B A6 LCALL _LCD_1_Position
    246A: 20       POP   X
    246B: 80 4A    JMP   0x24B6
(0738) 																				while 	((PRT1DR & 16)==16){
(0739) 								                         													if ((direction==128)&&(filter<=3)){
    246D: 3C 3D 80 CMP   [direction],0x80
    2470: B0 1B    JNZ   0x248C
    2472: 50 03    MOV   A,0x3
    2474: 3A 40    CMP   A,[filter]
    2476: C0 15    JC    0x248C
(0740) 															                                													filter++;
    2478: 76 40    INC   [filter]
(0741) 																																				direction=0;
    247A: 55 3D 00 MOV   [direction],0x0
(0742) 															                                													if (filter>3){
    247D: 50 03    MOV   A,0x3
    247F: 3A 40    CMP   A,[filter]
    2481: D0 04    JNC   0x2486
(0743) 																								           													filter=3;
    2483: 55 40 03 MOV   [filter],0x3
(0744) 																						              														}
(0745) 																																				kommando_setfilter();
    2486: 7C 12 3F LCALL _kommando_setfilter
(0746) 																																				Print_status();
    2489: 7C 19 6B LCALL _Print_status
(0747) 													    																						//LCD_1_Position(1,32);
(0748) 																							                                               
(0749) 													                                													     	}
(0750) 														  													if ((direction==129)&&(filter>=0)){
    248C: 3C 3D 81 CMP   [direction],0x81
    248F: B0 1A    JNZ   0x24AA
    2491: 3C 40 00 CMP   [filter],0x0
    2494: C0 15    JC    0x24AA
(0751) 															                                													filter--; 
    2496: 7A 40    DEC   [filter]
(0752) 																																				direction=0;
    2498: 55 3D 00 MOV   [direction],0x0
(0753) 															                                													if (filter>20){
    249B: 50 14    MOV   A,0x14
    249D: 3A 40    CMP   A,[filter]
    249F: D0 04    JNC   0x24A4
(0754) 																								            												filter=0;
    24A1: 55 40 00 MOV   [filter],0x0
(0755) 																						             														 	}
(0756) 																																				kommando_setfilter();
    24A4: 7C 12 3F LCALL _kommando_setfilter
(0757) 																																				Print_status();
    24A7: 7C 19 6B LCALL _Print_status
(0758) 													    																						//LCD_1_Position(1,32);
(0759) 														                                     													}	
(0760) 														
(0761) 																											//warte(100);
(0762) 																											LCD_1_Position(3,12);
    24AA: 10       PUSH  X
    24AB: 57 0C    MOV   X,0xC
    24AD: 50 03    MOV   A,0x3
    24AF: 7C 0B A6 LCALL _LCD_1_Position
    24B2: 20       POP   X
(0763) 																											M8C_ClearWDT;	
    24B3: 62 E3 00 MOV   REG[0xE3],0x0
(0764) 																											}	 
    24B6: 5D 04    MOV   A,REG[0x4]
    24B8: 21 10    AND   A,0x10
    24BA: 39 10    CMP   A,0x10
    24BC: AF B0    JZ    0x246D
(0765) 																				
(0766) 																				menu_taste_down();
    24BE: 7C 14 80 LCALL _menu_taste_down
(0767) 																				clear_LCD();
    24C1: 7C 11 F6 LCALL _clear_LCD
(0768) 																				Print_Status2();
    24C4: 7C 18 E0 LCALL _Print_Status2
(0769) 																				LCD_1_Position(0,5);
    24C7: 10       PUSH  X
    24C8: 57 05    MOV   X,0x5
    24CA: 50 00    MOV   A,0x0
    24CC: 7C 0B A6 LCALL _LCD_1_Position
(0770) 																				LCD_1_PrCString("Menue");
    24CF: 50 01    MOV   A,0x1
    24D1: 08       PUSH  A
    24D2: 50 63    MOV   A,0x63
    24D4: 5C       MOV   X,A
    24D5: 18       POP   A
    24D6: 7C 0A 35 LCALL _LCD_1_PrCString
    24D9: 20       POP   X
    24DA: 80 54    JMP   0x252F
(0771) 																				while 	((PRT1DR & 16)==16){
(0772) 																											
(0773) 																											
(0774) 																					
(0775) 																											LCD_1_Position(2,3);
    24DC: 10       PUSH  X
    24DD: 57 03    MOV   X,0x3
    24DF: 50 02    MOV   A,0x2
    24E1: 7C 0B A6 LCALL _LCD_1_Position
    24E4: 20       POP   X
(0776) 																					                        if ((direction==128)&&(micgain<9)){
    24E5: 3C 3D 80 CMP   [direction],0x80
    24E8: B0 1F    JNZ   0x2508
    24EA: 3C 34 09 CMP   [micgain],0x9
    24ED: D0 1A    JNC   0x2508
(0777) 																												                                micgain++;
    24EF: 76 34    INC   [micgain]
(0778) 																												                                direction=0;
    24F1: 55 3D 00 MOV   [direction],0x0
(0779) 																																				Print_Status2();
    24F4: 7C 18 E0 LCALL _Print_Status2
(0780) 																																				//LCD_1_Position(0,23);
(0781) 																																			    Eingangsamp_SetGain(0x98-(micgain*16));
    24F7: 51 34    MOV   A,[micgain]
    24F9: 64       ASL   A
    24FA: 64       ASL   A
    24FB: 64       ASL   A
    24FC: 64       ASL   A
    24FD: 53 0A    MOV   [__r0],A
    24FF: 50 98    MOV   A,0x98
    2501: 12 0A    SUB   A,[__r0]
    2503: 10       PUSH  X
    2504: 7C 0D 21 LCALL _Eingangsamp_SetGain
    2507: 20       POP   X
(0782) 																																				
(0783) 																										  										}
(0784) 																											
(0785) 																											if ((direction==129)&&(micgain>1)){
    2508: 3C 3D 81 CMP   [direction],0x81
    250B: B0 20    JNZ   0x252C
    250D: 50 01    MOV   A,0x1
    250F: 3A 34    CMP   A,[micgain]
    2511: D0 1A    JNC   0x252C
(0786) 																																				 micgain--;
    2513: 7A 34    DEC   [micgain]
(0787) 																												                                direction=0;
    2515: 55 3D 00 MOV   [direction],0x0
(0788) 																																				Print_Status2();
    2518: 7C 18 E0 LCALL _Print_Status2
(0789) 																																				//LCD_1_Position(0,23);
(0790) 																																				Eingangsamp_SetGain(0x98-(micgain*16));
    251B: 51 34    MOV   A,[micgain]
    251D: 64       ASL   A
    251E: 64       ASL   A
    251F: 64       ASL   A
    2520: 64       ASL   A
    2521: 53 0A    MOV   [__r0],A
    2523: 50 98    MOV   A,0x98
    2525: 12 0A    SUB   A,[__r0]
    2527: 10       PUSH  X
    2528: 7C 0D 21 LCALL _Eingangsamp_SetGain
    252B: 20       POP   X
(0791) 										
(0792) 																																				}
(0793) 																											M8C_ClearWDT;							
    252C: 62 E3 00 MOV   REG[0xE3],0x0
(0794) 																											}
    252F: 5D 04    MOV   A,REG[0x4]
    2531: 21 10    AND   A,0x10
    2533: 39 10    CMP   A,0x10
    2535: AF A6    JZ    0x24DC
(0795) 																			
(0796) 																				/*menu_taste_down();
(0797) 																				while 	((PRT1DR & 16)==16){
(0798) 																					                         LCD_1_Position(0,30);
(0799) 																					                          if (direction>=128){
(0800) 															                													direction=0;
(0801) 															                													TXstatus2 ^=1;
(0802) 															                													Print_Status2();
(0803) 																												                if ((TXstatus2 & 1)==1){
(0804) 										
(0805) 																																	                     frequenz=1448000;		
(0806) 																																	                     Timer8_2_Start();
(0807) 																																	                     Timer8_2_EnableInt();
(0808) 																																	                     bit_counter =0;
(0809) 																																	                     bit_buffer=0;
(0810) 																																                          
(0811) 																																                        }
(0812) 																																else 
(0813) 																															                          	{
(0814) 																																						 Timer8_2_DisableInt();
(0815) 																																						 Timer8_2_Stop();
(0816) 																																						}
(0817) 															                 													//LCD_1_Position(0,26);
(0818) 														                   														}
(0819) 																											M8C_ClearWDT;	
(0820) 																				                            }
(0821) 	          																
(0822) 																				menu_taste_down();
(0823) 																				
(0824) 																				// vox on/off
(0825) 																				/*while ((PRT1DR & 16)==16){
(0826) 																					      				  LCD_1_Position(0,29);
(0827) 																					                      if (direction>=128){
(0828) 															                													direction=0;
(0829) 															                													TXstatus ^=64;
(0830) 															                													Print_Status2();
(0831) 																											                    if ((TXstatus & 64)==0){
(0832) 																																	                    // COMP_1_Stop();
(0833) 																																                       }
(0834) 																											                    else 
(0835) 																															                     	{
(0836) 																																						//COMP_1_EnableInt();
(0837) 																																						//COMP_1_Start(COMP_1_LOWPOWER);
(0838) 																																					}
(0839) 																										                       }
(0840) 																										 M8C_ClearWDT;
(0841) 																			                           	}*/
(0842) 																				menu_taste_down();
    2537: 7C 14 80 LCALL _menu_taste_down
(0843) 																				Print_status();
    253A: 7C 19 6B LCALL _Print_status
(0844) 																				LCD_1_Position(0,5);
    253D: 10       PUSH  X
    253E: 57 05    MOV   X,0x5
    2540: 50 00    MOV   A,0x0
    2542: 7C 0B A6 LCALL _LCD_1_Position
    2545: 20       POP   X
    2546: 80 45    JMP   0x258C
(0845) 							 													while ((PRT1DR & 16)==16){ //exit Menu
(0846) 								           																if (direction>=128){
    2548: 3C 3D 80 CMP   [direction],0x80
    254B: C0 32    JC    0x257E
(0847) 																            												direction=0;
    254D: 55 3D 00 MOV   [direction],0x0
(0848) 																            												TXstatus ^=128;
    2550: 36 3F 80 XOR   [TXstatus],0x80
(0849) 																             												if ((TXstatus & 128)==128){
    2553: 51 3F    MOV   A,[TXstatus]
    2555: 21 80    AND   A,0x80
    2557: 39 80    CMP   A,0x80
    2559: B0 0F    JNZ   0x2569
(0850) 																                                      												LCD_1_PrCString("Menue");
    255B: 10       PUSH  X
    255C: 50 01    MOV   A,0x1
    255E: 08       PUSH  A
    255F: 50 63    MOV   A,0x63
    2561: 5C       MOV   X,A
    2562: 18       POP   A
    2563: 7C 0A 35 LCALL _LCD_1_PrCString
    2566: 20       POP   X
(0851) 																																                    
(0852) 																			    																	}
    2567: 80 0D    JMP   0x2575
(0853) 																									                        else 
(0854) 																			          									                   			{
(0855) 																																					LCD_1_PrCString("Exit ");
    2569: 10       PUSH  X
    256A: 50 01    MOV   A,0x1
    256C: 08       PUSH  A
    256D: 50 5D    MOV   A,0x5D
    256F: 5C       MOV   X,A
    2570: 18       POP   A
    2571: 7C 0A 35 LCALL _LCD_1_PrCString
    2574: 20       POP   X
(0856) 																																					}
(0857) 																             												LCD_1_Position(0,5);
    2575: 10       PUSH  X
    2576: 57 05    MOV   X,0x5
    2578: 50 00    MOV   A,0x0
    257A: 7C 0B A6 LCALL _LCD_1_Position
    257D: 20       POP   X
(0858) 																            											   }
(0859) 																										warte(100);	
    257E: 50 00    MOV   A,0x0
    2580: 08       PUSH  A
    2581: 50 64    MOV   A,0x64
    2583: 08       PUSH  A
    2584: 7C 14 5F LCALL _warte
    2587: 38 FE    ADD   SP,0xFE
(0860) 																										M8C_ClearWDT;	
    2589: 62 E3 00 MOV   REG[0xE3],0x0
(0861) 							                         					 								}
    258C: 5D 04    MOV   A,REG[0x4]
    258E: 21 10    AND   A,0x10
    2590: 39 10    CMP   A,0x10
    2592: AF B5    JZ    0x2548
(0862)                                													}
    2594: 51 3F    MOV   A,[TXstatus]
    2596: 21 80    AND   A,0x80
    2598: 39 80    CMP   A,0x80
    259A: B0 09    JNZ   0x25A4
    259C: 5D 04    MOV   A,REG[0x4]
    259E: 21 10    AND   A,0x10
    25A0: 39 10    CMP   A,0x10
    25A2: BD 34    JNZ   0x22D7
(0863) 							//übertragen der Daten zum RDA chip
(0864) 								M8C_DisableIntMask(INT_MSK0, INT_MSK0_GPIO);
    25A4: 41 E0 DF AND   REG[0xE0],0xDF
(0865) 								komando_setgroup();
    25A7: 7C 1B 24 LCALL _komando_setgroup
(0866) 							    eprom(0);
    25AA: 50 00    MOV   A,0x0
    25AC: 08       PUSH  A
    25AD: 7C 16 0E LCALL _eprom
(0867) 								warte (100);
    25B0: 50 00    MOV   A,0x0
    25B2: 08       PUSH  A
    25B3: 50 64    MOV   A,0x64
    25B5: 08       PUSH  A
    25B6: 7C 14 5F LCALL _warte
    25B9: 38 FD    ADD   SP,0xFD
(0868) 		                        LCD_1_Control(12);
    25BB: 10       PUSH  X
    25BC: 50 0C    MOV   A,0xC
    25BE: 7C 0A 8F LCALL _LCD_1_Control
    25C1: 20       POP   X
(0869) 								PRT1IE |=0x20;  //TX interupt wieder zulassen
    25C2: 43 05 20 OR    REG[0x5],0x20
(0870) 							    PRT0IE |=0x08; //drehgeber2 Interupt wieder zulassen
    25C5: 43 01 08 OR    REG[0x1],0x8
(0871) 								TXstatus &=0x7f;
    25C8: 26 3F 7F AND   [TXstatus],0x7F
(0872) 								warte(200);
    25CB: 50 00    MOV   A,0x0
    25CD: 08       PUSH  A
    25CE: 50 C8    MOV   A,0xC8
    25D0: 08       PUSH  A
    25D1: 7C 14 5F LCALL _warte
    25D4: 38 FE    ADD   SP,0xFE
(0873) 								M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
    25D6: 43 E0 20 OR    REG[0xE0],0x20
(0874) 							    Timer8_2_EnableInt();
    25D9: 10       PUSH  X
    25DA: 7C 09 2E LCALL _Timer8_2_EnableInt
    25DD: 20       POP   X
(0875) 	              				}
(0876) 		}
    25DE: 89 B8    JMP   0x1F97
(0877) 
(0878) }FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038)   
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
                                        (0059)   
25E5: 08       PUSH  A                  (0060)    push    a 
25E6: 10       PUSH  X                  (0061)    push    x
25E7: 41 E0 DF AND   REG[0xE0],0xDF     
                                        (0062)    M8C_DisableIntMask INT_MSK0, INT_MSK0_GPIO
                                        (0063)    ;mov    a,reg[PRT0DR]
                                        (0064)    ;and    a,24
                                        (0065)    ;cmp    a,[lastPrt0]
                                        (0066)    ;jnz     Lautstaerke
25EA: 49 04 20 TST   REG[0x4],0x20      (0067)    tst    reg[PRT1DR],0x20
25ED: A0 1D    JZ    0x260B             (0068)    jz       l1
25EF: 5D 04    MOV   A,REG[0x4]         (0069)    mov     a,reg[PRT1DR]
25F1: 21 C0    AND   A,0xC0             (0070)    and     a,192
25F3: 3A 30    CMP   A,[lastPrt1]       (0071)    cmp     a,[lastPrt1]
25F5: A0 42    JZ    0x2638             (0072)    jz      isrende
25F7: 53 30    MOV   [lastPrt1],A       (0073)    mov     [lastPrt1],a
25F9: 39 40    CMP   A,0x40             (0074)    cmp     a,0x40
25FB: A0 0A    JZ    0x2606             (0075)    jz      links   
25FD: 39 00    CMP   A,0x0              (0076)    cmp     a,0
25FF: B0 38    JNZ   0x2638             (0077)    jnz     isrende
2601: 55 3D 80 MOV   [direction],0x80   (0078)    mov    [_direction],128
2604: 80 33    JMP   0x2638             (0079)    jmp    isrende
                                        (0080) links:
2606: 55 3D 81 MOV   [direction],0x81   (0081)     mov   [_direction],129   
2609: 80 2E    JMP   0x2638             (0082) 	jmp    isrende
                                        (0083) l1:  
260B: 2E 3F 10 OR    [TXstatus],0x10    (0084)    or     [_TXstatus],16
260E: 7C 14 98 LCALL _Print_Frequenz    (0085)    lcall  _Print_Frequenz
2611: 7C 13 98 LCALL w3                 (0086)    lcall   w3
2614: 7C 09 F0 LCALL _PTT_Invert        (0087)    lcall  PTT_Invert
2617: 49 04 20 TST   REG[0x4],0x20      (0088)    tst    reg[PRT1DR],0x20
261A: A0 06    JZ    0x2621             (0089)    jz     l3
261C: 2E 3F 20 OR    [TXstatus],0x20    (0090)    or     [_TXstatus],32
261F: 80 18    JMP   0x2638             (0091)    jmp    isrende
                                        (0092) l3: 
2621: 50 03    MOV   A,0x3              (0093)    mov    a,3
2623: 7C 0D 13 LCALL _Eingangsamp_Start|Eingangsamp_SetPower|Eingangsamp_Start|_Eingangsamp_SetPower(0094)    lcall Eingangsamp_Start
2626: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0095) l2:M8C_ClearWDT
                                        (0096)   ; lcall  _warte1ms
                                        (0097)   ; tst    reg[PRT1DR],0x20
                                        (0098)   ; jz    l2    
                                        (0099)   ; lcall Eingangsamp_Stop
                                        (0100) l9:   
                                        (0101)   ; lcall PTT_Invert 
                                        (0102)   ; and    [_TXstatus],0xef
                                        (0103)   ; lcall   _Print_Frequenz
2629: 55 3D 00 MOV   [direction],0x0    (0104)    mov    [_direction],0
262C: 80 0B    JMP   0x2638             (0105)    jmp    isrende
                                        (0106) ;Lautstaerke:
                                        (0107)    ;mov     [lastPrt0],a
                                        (0108)    ;cmp     a,0
                                        (0109)    ;jz       l4
                                        (0110)    ;cmp      a,0x10
                                        (0111)    ;jnz     isrende
                                        (0112)    ;cmp     [_volume],1
                                        (0113)    ;jz      isrende
                                        (0114)    ;dec     [_volume]
                                        (0115)    ;lcall   _kommando_setvol
                                        (0116)    ;jmp isrende
                                        (0117) l4: 
262E: 3C 36 08 CMP   [volume],0x8       (0118)    cmp     [_volume],8
2631: A0 06    JZ    0x2638             (0119)    jz      isrende
2633: 76 36    INC   [volume]           (0120)    inc     [_volume]
2635: 7C 12 9E LCALL _kommando_setvol   (0121)    lcall   _kommando_setvol
                                        (0122) 
                                        (0123) isrende:
2638: 41 DA DF AND   REG[0xDA],0xDF     (0124)    and     reg[INT_CLR0],223
263B: 43 E0 20 OR    REG[0xE0],0x20     
                                        (0125)    
                                        (0126)    
                                        (0127)    
                                        (0128)    M8C_EnableIntMask INT_MSK0,INT_MSK0_GPIO
263E: 20       POP   X                  (0129)    pop  x
263F: 18       POP   A                  (0130)    pop  a
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert your custom code above this banner
                                        (0134)    ;---------------------------------------------------
                                        (0135)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0136) 
2640: 7E       RETI                     (0137)    reti
                                        (0138) 
                                        (0139) 
                                        (0140) ; end of file PSoCGPIOINT.asm
_strcpyLMM:
    2BC0: 62 D0 00 MOV   REG[0xD0],0x0
    2BC3: 10       PUSH  X
    2BC4: 4F       MOV   X,SP
    2BC5: 52 FB    MOV   A,[X-5]
    2BC7: 60 D5    MOV   REG[0xD5],A
    2BC9: 52 F9    MOV   A,[X-7]
    2BCB: 60 D4    MOV   REG[0xD4],A
    2BCD: 80 03    JMP   0x2BD1
_strcpy:
    2BCF: 10       PUSH  X
    2BD0: 4F       MOV   X,SP
    2BD1: 52 FC    MOV   A,[X-4]
    2BD3: 53 09    MOV   [__r1],A
    2BD5: 53 08    MOV   [__r2],A
    2BD7: 52 FB    MOV   A,[X-5]
    2BD9: 53 0A    MOV   [__r0],A
    2BDB: 52 FA    MOV   A,[X-6]
    2BDD: 53 07    MOV   [__r3],A
    2BDF: 3E 07    MVI   A,[__r3]
    2BE1: 3F 08    MVI   [__r2],A
    2BE3: 39 00    CMP   A,0x0
    2BE5: BF F9    JNZ   0x2BDF
    2BE7: 20       POP   X
    2BE8: 7F       RET   
_strcat:
    2BE9: 10       PUSH  X
    2BEA: 4F       MOV   X,SP
    2BEB: 52 FC    MOV   A,[X-4]
    2BED: 53 09    MOV   [__r1],A
    2BEF: 53 08    MOV   [__r2],A
    2BF1: 52 FB    MOV   A,[X-5]
    2BF3: 53 0A    MOV   [__r0],A
    2BF5: 52 FA    MOV   A,[X-6]
    2BF7: 53 07    MOV   [__r3],A
    2BF9: 3E 08    MVI   A,[__r2]
    2BFB: BF FD    JNZ   0x2BF9
    2BFD: 7A 08    DEC   [__r2]
    2BFF: 3E 07    MVI   A,[__r3]
    2C01: 3F 08    MVI   [__r2],A
    2C03: 39 00    CMP   A,0x0
    2C05: BF F9    JNZ   0x2BFF
    2C07: 20       POP   X
    2C08: 7F       RET   
_atoi:
    2C09: 10       PUSH  X
    2C0A: 4F       MOV   X,SP
    2C0B: 38 04    ADD   SP,0x4
    2C0D: 80 06    JMP   0x2C14
    2C0F: 77 FC    INC   [X-4]
    2C11: 0F FB 00 ADC   [X-5],0x0
    2C14: 52 FC    MOV   A,[X-4]
    2C16: 53 09    MOV   [__r1],A
    2C18: 3E 09    MVI   A,[__r1]
    2C1A: 53 09    MOV   [__r1],A
    2C1C: 50 00    MOV   A,0x0
    2C1E: 08       PUSH  A
    2C1F: 51 09    MOV   A,[__r1]
    2C21: 08       PUSH  A
    2C22: 7C 35 8E LCALL _isspace
    2C25: 38 FE    ADD   SP,0xFE
    2C27: 3C 0A 00 CMP   [__r0],0x0
    2C2A: BF E4    JNZ   0x2C0F
    2C2C: 3C 09 00 CMP   [__r1],0x0
    2C2F: BF DF    JNZ   0x2C0F
    2C31: 56 03 00 MOV   [X+3],0x0
    2C34: 56 02 00 MOV   [X+2],0x0
    2C37: 52 FC    MOV   A,[X-4]
    2C39: 53 09    MOV   [__r1],A
    2C3B: 3E 09    MVI   A,[__r1]
    2C3D: 39 2D    CMP   A,0x2D
    2C3F: B0 0E    JNZ   0x2C4E
    2C41: 56 03 01 MOV   [X+3],0x1
    2C44: 56 02 00 MOV   [X+2],0x0
    2C47: 77 FC    INC   [X-4]
    2C49: 0F FB 00 ADC   [X-5],0x0
    2C4C: 80 10    JMP   0x2C5D
    2C4E: 52 FC    MOV   A,[X-4]
    2C50: 53 09    MOV   [__r1],A
    2C52: 3E 09    MVI   A,[__r1]
    2C54: 39 2B    CMP   A,0x2B
    2C56: B0 06    JNZ   0x2C5D
    2C58: 77 FC    INC   [X-4]
    2C5A: 0F FB 00 ADC   [X-5],0x0
    2C5D: 56 01 00 MOV   [X+1],0x0
    2C60: 56 00 00 MOV   [X+0],0x0
    2C63: 80 6E    JMP   0x2CD2
    2C65: 52 FC    MOV   A,[X-4]
    2C67: 53 09    MOV   [__r1],A
    2C69: 52 FB    MOV   A,[X-5]
    2C6B: 53 0A    MOV   [__r0],A
    2C6D: 51 09    MOV   A,[__r1]
    2C6F: 01 01    ADD   A,0x1
    2C71: 54 FC    MOV   [X-4],A
    2C73: 51 0A    MOV   A,[__r0]
    2C75: 09 00    ADC   A,0x0
    2C77: 54 FB    MOV   [X-5],A
    2C79: 52 01    MOV   A,[X+1]
    2C7B: 53 07    MOV   [__r3],A
    2C7D: 52 00    MOV   A,[X+0]
    2C7F: 53 08    MOV   [__r2],A
    2C81: 55 05 0A MOV   [__r5],0xA
    2C84: 55 06 00 MOV   [__r4],0x0
    2C87: 55 02 00 MOV   [__rX],0x0
    2C8A: 55 01 00 MOV   [__rY],0x0
    2C8D: 3C 06 00 CMP   [__r4],0x0
    2C90: B0 06    JNZ   0x2C97
    2C92: 3C 05 00 CMP   [__r5],0x0
    2C95: A0 17    JZ    0x2CAD
    2C97: 70 FB    AND   F,0xFB
    2C99: 6E 06    RRC   [__r4]
    2C9B: 6E 05    RRC   [__r5]
    2C9D: D0 09    JNC   0x2CA7
    2C9F: 51 07    MOV   A,[__r3]
    2CA1: 04 02    ADD   [__rX],A
    2CA3: 51 08    MOV   A,[__r2]
    2CA5: 0C 01    ADC   [__rY],A
    2CA7: 65 07    ASL   [__r3]
    2CA9: 6B 08    RLC   [__r2]
    2CAB: 8F E1    JMP   0x2C8D
    2CAD: 5F 07 02 MOV   [__r3],[__rX]
    2CB0: 5F 08 01 MOV   [__r2],[__rY]
    2CB3: 3E 09    MVI   A,[__r1]
    2CB5: 53 09    MOV   [__r1],A
    2CB7: 55 0A 00 MOV   [__r0],0x0
    2CBA: 51 07    MOV   A,[__r3]
    2CBC: 02 09    ADD   A,[__r1]
    2CBE: 53 09    MOV   [__r1],A
    2CC0: 51 08    MOV   A,[__r2]
    2CC2: 0A 0A    ADC   A,[__r0]
    2CC4: 53 0A    MOV   [__r0],A
    2CC6: 51 09    MOV   A,[__r1]
    2CC8: 11 30    SUB   A,0x30
    2CCA: 54 01    MOV   [X+1],A
    2CCC: 51 0A    MOV   A,[__r0]
    2CCE: 19 00    SBB   A,0x0
    2CD0: 54 00    MOV   [X+0],A
    2CD2: 52 FC    MOV   A,[X-4]
    2CD4: 53 09    MOV   [__r1],A
    2CD6: 3E 09    MVI   A,[__r1]
    2CD8: 53 09    MOV   [__r1],A
    2CDA: 50 00    MOV   A,0x0
    2CDC: 08       PUSH  A
    2CDD: 51 09    MOV   A,[__r1]
    2CDF: 08       PUSH  A
    2CE0: 7C 35 70 LCALL _isdigit
    2CE3: 38 FE    ADD   SP,0xFE
    2CE5: 3C 0A 00 CMP   [__r0],0x0
    2CE8: BF 7C    JNZ   0x2C65
    2CEA: 3C 09 00 CMP   [__r1],0x0
    2CED: BF 77    JNZ   0x2C65
    2CEF: 3D 02 00 CMP   [X+2],0x0
    2CF2: B0 06    JNZ   0x2CF9
    2CF4: 3D 03 00 CMP   [X+3],0x0
    2CF7: A0 11    JZ    0x2D09
    2CF9: 52 01    MOV   A,[X+1]
    2CFB: 73       CPL   A
    2CFC: 11 FF    SUB   A,0xFF
    2CFE: 53 09    MOV   [__r1],A
    2D00: 52 00    MOV   A,[X+0]
    2D02: 73       CPL   A
    2D03: 19 FF    SBB   A,0xFF
    2D05: 53 0A    MOV   [__r0],A
    2D07: 80 09    JMP   0x2D11
    2D09: 52 01    MOV   A,[X+1]
    2D0B: 53 09    MOV   [__r1],A
    2D0D: 52 00    MOV   A,[X+0]
    2D0F: 53 0A    MOV   [__r0],A
    2D11: 38 FC    ADD   SP,0xFC
    2D13: 20       POP   X
    2D14: 7F       RET   
_atol:
    2D15: 10       PUSH  X
    2D16: 4F       MOV   X,SP
    2D17: 38 06    ADD   SP,0x6
    2D19: 80 06    JMP   0x2D20
    2D1B: 77 FC    INC   [X-4]
    2D1D: 0F FB 00 ADC   [X-5],0x0
    2D20: 52 FC    MOV   A,[X-4]
    2D22: 53 09    MOV   [__r1],A
    2D24: 3E 09    MVI   A,[__r1]
    2D26: 53 09    MOV   [__r1],A
    2D28: 50 00    MOV   A,0x0
    2D2A: 08       PUSH  A
    2D2B: 51 09    MOV   A,[__r1]
    2D2D: 08       PUSH  A
    2D2E: 7C 35 8E LCALL _isspace
    2D31: 38 FE    ADD   SP,0xFE
    2D33: 3C 0A 00 CMP   [__r0],0x0
    2D36: BF E4    JNZ   0x2D1B
    2D38: 3C 09 00 CMP   [__r1],0x0
    2D3B: BF DF    JNZ   0x2D1B
    2D3D: 56 05 00 MOV   [X+5],0x0
    2D40: 56 04 00 MOV   [X+4],0x0
    2D43: 52 FC    MOV   A,[X-4]
    2D45: 53 09    MOV   [__r1],A
    2D47: 3E 09    MVI   A,[__r1]
    2D49: 39 2D    CMP   A,0x2D
    2D4B: B0 0E    JNZ   0x2D5A
    2D4D: 56 05 01 MOV   [X+5],0x1
    2D50: 56 04 00 MOV   [X+4],0x0
    2D53: 77 FC    INC   [X-4]
    2D55: 0F FB 00 ADC   [X-5],0x0
    2D58: 80 10    JMP   0x2D69
    2D5A: 52 FC    MOV   A,[X-4]
    2D5C: 53 09    MOV   [__r1],A
    2D5E: 3E 09    MVI   A,[__r1]
    2D60: 39 2B    CMP   A,0x2B
    2D62: B0 06    JNZ   0x2D69
    2D64: 77 FC    INC   [X-4]
    2D66: 0F FB 00 ADC   [X-5],0x0
    2D69: 56 00 00 MOV   [X+0],0x0
    2D6C: 56 01 00 MOV   [X+1],0x0
    2D6F: 56 02 00 MOV   [X+2],0x0
    2D72: 56 03 00 MOV   [X+3],0x0
    2D75: 80 77    JMP   0x2DED
    2D77: 52 FC    MOV   A,[X-4]
    2D79: 53 09    MOV   [__r1],A
    2D7B: 52 FB    MOV   A,[X-5]
    2D7D: 53 0A    MOV   [__r0],A
    2D7F: 51 09    MOV   A,[__r1]
    2D81: 01 01    ADD   A,0x1
    2D83: 54 FC    MOV   [X-4],A
    2D85: 51 0A    MOV   A,[__r0]
    2D87: 09 00    ADC   A,0x0
    2D89: 54 FB    MOV   [X-5],A
    2D8B: 3E 09    MVI   A,[__r1]
    2D8D: 53 07    MOV   [__r3],A
    2D8F: 55 08 00 MOV   [__r2],0x0
    2D92: 55 09 00 MOV   [__r1],0x0
    2D95: 55 0A 00 MOV   [__r0],0x0
    2D98: 52 00    MOV   A,[X+0]
    2D9A: 08       PUSH  A
    2D9B: 52 01    MOV   A,[X+1]
    2D9D: 08       PUSH  A
    2D9E: 52 02    MOV   A,[X+2]
    2DA0: 08       PUSH  A
    2DA1: 52 03    MOV   A,[X+3]
    2DA3: 08       PUSH  A
    2DA4: 50 00    MOV   A,0x0
    2DA6: 08       PUSH  A
    2DA7: 08       PUSH  A
    2DA8: 08       PUSH  A
    2DA9: 50 0A    MOV   A,0xA
    2DAB: 08       PUSH  A
    2DAC: 7C 2B 82 LCALL 0x2B82
    2DAF: 38 FC    ADD   SP,0xFC
    2DB1: 18       POP   A
    2DB2: 53 03    MOV   [__r7],A
    2DB4: 18       POP   A
    2DB5: 53 04    MOV   [__r6],A
    2DB7: 18       POP   A
    2DB8: 53 05    MOV   [__r5],A
    2DBA: 18       POP   A
    2DBB: 53 06    MOV   [__r4],A
    2DBD: 51 03    MOV   A,[__r7]
    2DBF: 02 07    ADD   A,[__r3]
    2DC1: 53 07    MOV   [__r3],A
    2DC3: 51 04    MOV   A,[__r6]
    2DC5: 0A 08    ADC   A,[__r2]
    2DC7: 53 08    MOV   [__r2],A
    2DC9: 51 05    MOV   A,[__r5]
    2DCB: 0A 09    ADC   A,[__r1]
    2DCD: 53 09    MOV   [__r1],A
    2DCF: 51 06    MOV   A,[__r4]
    2DD1: 0A 0A    ADC   A,[__r0]
    2DD3: 53 0A    MOV   [__r0],A
    2DD5: 51 07    MOV   A,[__r3]
    2DD7: 11 30    SUB   A,0x30
    2DD9: 54 03    MOV   [X+3],A
    2DDB: 51 08    MOV   A,[__r2]
    2DDD: 19 00    SBB   A,0x0
    2DDF: 54 02    MOV   [X+2],A
    2DE1: 51 09    MOV   A,[__r1]
    2DE3: 19 00    SBB   A,0x0
    2DE5: 54 01    MOV   [X+1],A
    2DE7: 51 0A    MOV   A,[__r0]
    2DE9: 19 00    SBB   A,0x0
    2DEB: 54 00    MOV   [X+0],A
    2DED: 52 FC    MOV   A,[X-4]
    2DEF: 53 09    MOV   [__r1],A
    2DF1: 3E 09    MVI   A,[__r1]
    2DF3: 53 09    MOV   [__r1],A
    2DF5: 50 00    MOV   A,0x0
    2DF7: 08       PUSH  A
    2DF8: 51 09    MOV   A,[__r1]
    2DFA: 08       PUSH  A
    2DFB: 7C 35 70 LCALL _isdigit
    2DFE: 38 FE    ADD   SP,0xFE
    2E00: 3C 0A 00 CMP   [__r0],0x0
    2E03: BF 73    JNZ   0x2D77
    2E05: 3C 09 00 CMP   [__r1],0x0
    2E08: BF 6E    JNZ   0x2D77
    2E0A: 3D 04 00 CMP   [X+4],0x0
    2E0D: B0 06    JNZ   0x2E14
    2E0F: 3D 05 00 CMP   [X+5],0x0
    2E12: A0 1F    JZ    0x2E32
    2E14: 52 03    MOV   A,[X+3]
    2E16: 73       CPL   A
    2E17: 11 FF    SUB   A,0xFF
    2E19: 53 07    MOV   [__r3],A
    2E1B: 52 02    MOV   A,[X+2]
    2E1D: 73       CPL   A
    2E1E: 19 FF    SBB   A,0xFF
    2E20: 53 08    MOV   [__r2],A
    2E22: 52 01    MOV   A,[X+1]
    2E24: 73       CPL   A
    2E25: 19 FF    SBB   A,0xFF
    2E27: 53 09    MOV   [__r1],A
    2E29: 52 00    MOV   A,[X+0]
    2E2B: 73       CPL   A
    2E2C: 19 FF    SBB   A,0xFF
    2E2E: 53 0A    MOV   [__r0],A
    2E30: 80 11    JMP   0x2E42
    2E32: 52 00    MOV   A,[X+0]
    2E34: 53 0A    MOV   [__r0],A
    2E36: 52 01    MOV   A,[X+1]
    2E38: 53 09    MOV   [__r1],A
    2E3A: 52 02    MOV   A,[X+2]
    2E3C: 53 08    MOV   [__r2],A
    2E3E: 52 03    MOV   A,[X+3]
    2E40: 53 07    MOV   [__r3],A
    2E42: 38 FA    ADD   SP,0xFA
    2E44: 20       POP   X
    2E45: 7F       RET   
_itoa:
    2E46: 10       PUSH  X
    2E47: 4F       MOV   X,SP
    2E48: 38 09    ADD   SP,0x9
    2E4A: 52 FA    MOV   A,[X-6]
    2E4C: 54 03    MOV   [X+3],A
    2E4E: 52 F9    MOV   A,[X-7]
    2E50: 54 02    MOV   [X+2],A
    2E52: 3D F9 00 CMP   [X-7],0x0
    2E55: B0 22    JNZ   0x2E78
    2E57: 3D FA 00 CMP   [X-6],0x0
    2E5A: B0 1D    JNZ   0x2E78
    2E5C: 52 FC    MOV   A,[X-4]
    2E5E: 53 09    MOV   [__r1],A
    2E60: 50 30    MOV   A,0x30
    2E62: 3F 09    MVI   [__r1],A
    2E64: 52 FC    MOV   A,[X-4]
    2E66: 01 01    ADD   A,0x1
    2E68: 53 09    MOV   [__r1],A
    2E6A: 50 00    MOV   A,0x0
    2E6C: 3F 09    MVI   [__r1],A
    2E6E: 52 FC    MOV   A,[X-4]
    2E70: 53 09    MOV   [__r1],A
    2E72: 52 FB    MOV   A,[X-5]
    2E74: 53 0A    MOV   [__r0],A
    2E76: 81 48    JMP   0x2FBF
    2E78: 52 FA    MOV   A,[X-6]
    2E7A: 11 00    SUB   A,0x0
    2E7C: 52 F9    MOV   A,[X-7]
    2E7E: 31 80    XOR   A,0x80
    2E80: 19 80    SBB   A,0x80
    2E82: D0 26    JNC   0x2EA9
    2E84: 3D F7 00 CMP   [X-9],0x0
    2E87: B0 21    JNZ   0x2EA9
    2E89: 3D F8 0A CMP   [X-8],0xA
    2E8C: B0 1C    JNZ   0x2EA9
    2E8E: 56 06 01 MOV   [X+6],0x1
    2E91: 52 03    MOV   A,[X+3]
    2E93: 73       CPL   A
    2E94: 53 09    MOV   [__r1],A
    2E96: 52 02    MOV   A,[X+2]
    2E98: 73       CPL   A
    2E99: 53 0A    MOV   [__r0],A
    2E9B: 51 09    MOV   A,[__r1]
    2E9D: 01 01    ADD   A,0x1
    2E9F: 54 03    MOV   [X+3],A
    2EA1: 51 0A    MOV   A,[__r0]
    2EA3: 09 00    ADC   A,0x0
    2EA5: 54 02    MOV   [X+2],A
    2EA7: 80 04    JMP   0x2EAC
    2EA9: 56 06 00 MOV   [X+6],0x0
    2EAC: 52 FC    MOV   A,[X-4]
    2EAE: 54 01    MOV   [X+1],A
    2EB0: 52 F7    MOV   A,[X-9]
    2EB2: 08       PUSH  A
    2EB3: 52 F8    MOV   A,[X-8]
    2EB5: 08       PUSH  A
    2EB6: 52 02    MOV   A,[X+2]
    2EB8: 08       PUSH  A
    2EB9: 52 03    MOV   A,[X+3]
    2EBB: 08       PUSH  A
    2EBC: 7C 26 8B LCALL 0x268B
    2EBF: 38 FE    ADD   SP,0xFE
    2EC1: 18       POP   A
    2EC2: 53 09    MOV   [__r1],A
    2EC4: 18       POP   A
    2EC5: 53 0A    MOV   [__r0],A
    2EC7: 51 09    MOV   A,[__r1]
    2EC9: 54 08    MOV   [X+8],A
    2ECB: 51 0A    MOV   A,[__r0]
    2ECD: 54 07    MOV   [X+7],A
    2ECF: 50 09    MOV   A,0x9
    2ED1: 13 08    SUB   A,[X+8]
    2ED3: 52 07    MOV   A,[X+7]
    2ED5: 31 80    XOR   A,0x80
    2ED7: 53 02    MOV   [__rX],A
    2ED9: 50 80    MOV   A,0x80
    2EDB: 1A 02    SBB   A,[__rX]
    2EDD: C0 1D    JC    0x2EFB
    2EDF: 52 01    MOV   A,[X+1]
    2EE1: 53 09    MOV   [__r1],A
    2EE3: 52 00    MOV   A,[X+0]
    2EE5: 53 0A    MOV   [__r0],A
    2EE7: 51 09    MOV   A,[__r1]
    2EE9: 01 01    ADD   A,0x1
    2EEB: 54 01    MOV   [X+1],A
    2EED: 51 0A    MOV   A,[__r0]
    2EEF: 09 00    ADC   A,0x0
    2EF1: 54 00    MOV   [X+0],A
    2EF3: 52 08    MOV   A,[X+8]
    2EF5: 01 30    ADD   A,0x30
    2EF7: 3F 09    MVI   [__r1],A
    2EF9: 80 1B    JMP   0x2F15
    2EFB: 52 01    MOV   A,[X+1]
    2EFD: 53 09    MOV   [__r1],A
    2EFF: 52 00    MOV   A,[X+0]
    2F01: 53 0A    MOV   [__r0],A
    2F03: 51 09    MOV   A,[__r1]
    2F05: 01 01    ADD   A,0x1
    2F07: 54 01    MOV   [X+1],A
    2F09: 51 0A    MOV   A,[__r0]
    2F0B: 09 00    ADC   A,0x0
    2F0D: 54 00    MOV   [X+0],A
    2F0F: 52 08    MOV   A,[X+8]
    2F11: 01 57    ADD   A,0x57
    2F13: 3F 09    MVI   [__r1],A
    2F15: 52 F7    MOV   A,[X-9]
    2F17: 08       PUSH  A
    2F18: 52 F8    MOV   A,[X-8]
    2F1A: 08       PUSH  A
    2F1B: 52 02    MOV   A,[X+2]
    2F1D: 08       PUSH  A
    2F1E: 52 03    MOV   A,[X+3]
    2F20: 08       PUSH  A
    2F21: 7C 26 8B LCALL 0x268B
    2F24: 18       POP   A
    2F25: 54 03    MOV   [X+3],A
    2F27: 18       POP   A
    2F28: 54 02    MOV   [X+2],A
    2F2A: 38 FE    ADD   SP,0xFE
    2F2C: 3D 02 00 CMP   [X+2],0x0
    2F2F: BF 80    JNZ   0x2EB0
    2F31: 3D 03 00 CMP   [X+3],0x0
    2F34: BF 7B    JNZ   0x2EB0
    2F36: 3D 06 00 CMP   [X+6],0x0
    2F39: A0 19    JZ    0x2F53
    2F3B: 52 01    MOV   A,[X+1]
    2F3D: 53 09    MOV   [__r1],A
    2F3F: 52 00    MOV   A,[X+0]
    2F41: 53 0A    MOV   [__r0],A
    2F43: 51 09    MOV   A,[__r1]
    2F45: 01 01    ADD   A,0x1
    2F47: 54 01    MOV   [X+1],A
    2F49: 51 0A    MOV   A,[__r0]
    2F4B: 09 00    ADC   A,0x0
    2F4D: 54 00    MOV   [X+0],A
    2F4F: 50 2D    MOV   A,0x2D
    2F51: 3F 09    MVI   [__r1],A
    2F53: 52 01    MOV   A,[X+1]
    2F55: 53 09    MOV   [__r1],A
    2F57: 52 00    MOV   A,[X+0]
    2F59: 53 0A    MOV   [__r0],A
    2F5B: 51 09    MOV   A,[__r1]
    2F5D: 01 FF    ADD   A,0xFF
    2F5F: 54 01    MOV   [X+1],A
    2F61: 51 0A    MOV   A,[__r0]
    2F63: 09 FF    ADC   A,0xFF
    2F65: 54 00    MOV   [X+0],A
    2F67: 50 00    MOV   A,0x0
    2F69: 3F 09    MVI   [__r1],A
    2F6B: 52 FC    MOV   A,[X-4]
    2F6D: 54 05    MOV   [X+5],A
    2F6F: 80 3D    JMP   0x2FAD
    2F71: 52 05    MOV   A,[X+5]
    2F73: 53 09    MOV   [__r1],A
    2F75: 3E 09    MVI   A,[__r1]
    2F77: 54 06    MOV   [X+6],A
    2F79: 52 05    MOV   A,[X+5]
    2F7B: 53 09    MOV   [__r1],A
    2F7D: 52 04    MOV   A,[X+4]
    2F7F: 53 0A    MOV   [__r0],A
    2F81: 51 09    MOV   A,[__r1]
    2F83: 01 01    ADD   A,0x1
    2F85: 54 05    MOV   [X+5],A
    2F87: 51 0A    MOV   A,[__r0]
    2F89: 09 00    ADC   A,0x0
    2F8B: 54 04    MOV   [X+4],A
    2F8D: 52 01    MOV   A,[X+1]
    2F8F: 53 07    MOV   [__r3],A
    2F91: 3E 07    MVI   A,[__r3]
    2F93: 3F 09    MVI   [__r1],A
    2F95: 52 01    MOV   A,[X+1]
    2F97: 53 09    MOV   [__r1],A
    2F99: 52 00    MOV   A,[X+0]
    2F9B: 53 0A    MOV   [__r0],A
    2F9D: 51 09    MOV   A,[__r1]
    2F9F: 01 FF    ADD   A,0xFF
    2FA1: 54 01    MOV   [X+1],A
    2FA3: 51 0A    MOV   A,[__r0]
    2FA5: 09 FF    ADC   A,0xFF
    2FA7: 54 00    MOV   [X+0],A
    2FA9: 52 06    MOV   A,[X+6]
    2FAB: 3F 09    MVI   [__r1],A
    2FAD: 52 01    MOV   A,[X+1]
    2FAF: 53 0A    MOV   [__r0],A
    2FB1: 52 05    MOV   A,[X+5]
    2FB3: 3A 0A    CMP   A,[__r0]
    2FB5: CF BB    JC    0x2F71
    2FB7: 52 FC    MOV   A,[X-4]
    2FB9: 53 09    MOV   [__r1],A
    2FBB: 52 FB    MOV   A,[X-5]
    2FBD: 53 0A    MOV   [__r0],A
    2FBF: 38 F7    ADD   SP,0xF7
    2FC1: 20       POP   X
    2FC2: 7F       RET   
_ltoa:
    2FC3: 10       PUSH  X
    2FC4: 4F       MOV   X,SP
    2FC5: 38 0B    ADD   SP,0xB
    2FC7: 52 F7    MOV   A,[X-9]
    2FC9: 54 02    MOV   [X+2],A
    2FCB: 52 F8    MOV   A,[X-8]
    2FCD: 54 03    MOV   [X+3],A
    2FCF: 52 F9    MOV   A,[X-7]
    2FD1: 54 04    MOV   [X+4],A
    2FD3: 52 FA    MOV   A,[X-6]
    2FD5: 54 05    MOV   [X+5],A
    2FD7: 3D F7 00 CMP   [X-9],0x0
    2FDA: B0 2C    JNZ   0x3007
    2FDC: 3D F8 00 CMP   [X-8],0x0
    2FDF: B0 27    JNZ   0x3007
    2FE1: 3D F9 00 CMP   [X-7],0x0
    2FE4: B0 22    JNZ   0x3007
    2FE6: 3D FA 00 CMP   [X-6],0x0
    2FE9: B0 1D    JNZ   0x3007
    2FEB: 52 FC    MOV   A,[X-4]
    2FED: 53 09    MOV   [__r1],A
    2FEF: 50 30    MOV   A,0x30
    2FF1: 3F 09    MVI   [__r1],A
    2FF3: 52 FC    MOV   A,[X-4]
    2FF5: 01 01    ADD   A,0x1
    2FF7: 53 09    MOV   [__r1],A
    2FF9: 50 00    MOV   A,0x0
    2FFB: 3F 09    MVI   [__r1],A
    2FFD: 52 FC    MOV   A,[X-4]
    2FFF: 53 09    MOV   [__r1],A
    3001: 52 FB    MOV   A,[X-5]
    3003: 53 0A    MOV   [__r0],A
    3005: 81 C2    JMP   0x31C8
    3007: 52 FA    MOV   A,[X-6]
    3009: 11 00    SUB   A,0x0
    300B: 52 F9    MOV   A,[X-7]
    300D: 19 00    SBB   A,0x0
    300F: 52 F8    MOV   A,[X-8]
    3011: 19 00    SBB   A,0x0
    3013: 52 F7    MOV   A,[X-9]
    3015: 31 80    XOR   A,0x80
    3017: 19 80    SBB   A,0x80
    3019: D0 38    JNC   0x3052
    301B: 3D F5 00 CMP   [X-11],0x0
    301E: B0 33    JNZ   0x3052
    3020: 3D F6 0A CMP   [X-10],0xA
    3023: B0 2E    JNZ   0x3052
    3025: 56 08 01 MOV   [X+8],0x1
    3028: 52 02    MOV   A,[X+2]
    302A: 73       CPL   A
    302B: 53 0A    MOV   [__r0],A
    302D: 52 03    MOV   A,[X+3]
    302F: 73       CPL   A
    3030: 53 09    MOV   [__r1],A
    3032: 52 04    MOV   A,[X+4]
    3034: 73       CPL   A
    3035: 53 08    MOV   [__r2],A
    3037: 52 05    MOV   A,[X+5]
    3039: 73       CPL   A
    303A: 01 01    ADD   A,0x1
    303C: 54 05    MOV   [X+5],A
    303E: 51 08    MOV   A,[__r2]
    3040: 09 00    ADC   A,0x0
    3042: 54 04    MOV   [X+4],A
    3044: 51 09    MOV   A,[__r1]
    3046: 09 00    ADC   A,0x0
    3048: 54 03    MOV   [X+3],A
    304A: 51 0A    MOV   A,[__r0]
    304C: 09 00    ADC   A,0x0
    304E: 54 02    MOV   [X+2],A
    3050: 80 04    JMP   0x3055
    3052: 56 08 00 MOV   [X+8],0x0
    3055: 52 FC    MOV   A,[X-4]
    3057: 54 01    MOV   [X+1],A
    3059: 52 F6    MOV   A,[X-10]
    305B: 53 07    MOV   [__r3],A
    305D: 52 F5    MOV   A,[X-11]
    305F: 53 08    MOV   [__r2],A
    3061: 47 08 80 TST   [__r2],0x80
    3064: A0 09    JZ    0x306E
    3066: 55 09 FF MOV   [__r1],0xFF
    3069: 55 0A FF MOV   [__r0],0xFF
    306C: 80 07    JMP   0x3074
    306E: 55 09 00 MOV   [__r1],0x0
    3071: 55 0A 00 MOV   [__r0],0x0
    3074: 51 0A    MOV   A,[__r0]
    3076: 08       PUSH  A
    3077: 51 09    MOV   A,[__r1]
    3079: 08       PUSH  A
    307A: 51 08    MOV   A,[__r2]
    307C: 08       PUSH  A
    307D: 51 07    MOV   A,[__r3]
    307F: 08       PUSH  A
    3080: 52 02    MOV   A,[X+2]
    3082: 08       PUSH  A
    3083: 52 03    MOV   A,[X+3]
    3085: 08       PUSH  A
    3086: 52 04    MOV   A,[X+4]
    3088: 08       PUSH  A
    3089: 52 05    MOV   A,[X+5]
    308B: 08       PUSH  A
    308C: 7C 26 92 LCALL 0x2692
    308F: 38 FC    ADD   SP,0xFC
    3091: 18       POP   A
    3092: 53 07    MOV   [__r3],A
    3094: 18       POP   A
    3095: 53 08    MOV   [__r2],A
    3097: 18       POP   A
    3098: 18       POP   A
    3099: 51 07    MOV   A,[__r3]
    309B: 54 0A    MOV   [X+10],A
    309D: 51 08    MOV   A,[__r2]
    309F: 54 09    MOV   [X+9],A
    30A1: 50 09    MOV   A,0x9
    30A3: 13 0A    SUB   A,[X+10]
    30A5: 52 09    MOV   A,[X+9]
    30A7: 31 80    XOR   A,0x80
    30A9: 53 02    MOV   [__rX],A
    30AB: 50 80    MOV   A,0x80
    30AD: 1A 02    SBB   A,[__rX]
    30AF: C0 1D    JC    0x30CD
    30B1: 52 01    MOV   A,[X+1]
    30B3: 53 09    MOV   [__r1],A
    30B5: 52 00    MOV   A,[X+0]
    30B7: 53 0A    MOV   [__r0],A
    30B9: 51 09    MOV   A,[__r1]
    30BB: 01 01    ADD   A,0x1
    30BD: 54 01    MOV   [X+1],A
    30BF: 51 0A    MOV   A,[__r0]
    30C1: 09 00    ADC   A,0x0
    30C3: 54 00    MOV   [X+0],A
    30C5: 52 0A    MOV   A,[X+10]
    30C7: 01 30    ADD   A,0x30
    30C9: 3F 09    MVI   [__r1],A
    30CB: 80 1B    JMP   0x30E7
    30CD: 52 01    MOV   A,[X+1]
    30CF: 53 09    MOV   [__r1],A
    30D1: 52 00    MOV   A,[X+0]
    30D3: 53 0A    MOV   [__r0],A
    30D5: 51 09    MOV   A,[__r1]
    30D7: 01 01    ADD   A,0x1
    30D9: 54 01    MOV   [X+1],A
    30DB: 51 0A    MOV   A,[__r0]
    30DD: 09 00    ADC   A,0x0
    30DF: 54 00    MOV   [X+0],A
    30E1: 52 0A    MOV   A,[X+10]
    30E3: 01 57    ADD   A,0x57
    30E5: 3F 09    MVI   [__r1],A
    30E7: 52 F6    MOV   A,[X-10]
    30E9: 53 07    MOV   [__r3],A
    30EB: 52 F5    MOV   A,[X-11]
    30ED: 53 08    MOV   [__r2],A
    30EF: 47 08 80 TST   [__r2],0x80
    30F2: A0 09    JZ    0x30FC
    30F4: 55 09 FF MOV   [__r1],0xFF
    30F7: 55 0A FF MOV   [__r0],0xFF
    30FA: 80 07    JMP   0x3102
    30FC: 55 09 00 MOV   [__r1],0x0
    30FF: 55 0A 00 MOV   [__r0],0x0
    3102: 51 0A    MOV   A,[__r0]
    3104: 08       PUSH  A
    3105: 51 09    MOV   A,[__r1]
    3107: 08       PUSH  A
    3108: 51 08    MOV   A,[__r2]
    310A: 08       PUSH  A
    310B: 51 07    MOV   A,[__r3]
    310D: 08       PUSH  A
    310E: 52 02    MOV   A,[X+2]
    3110: 08       PUSH  A
    3111: 52 03    MOV   A,[X+3]
    3113: 08       PUSH  A
    3114: 52 04    MOV   A,[X+4]
    3116: 08       PUSH  A
    3117: 52 05    MOV   A,[X+5]
    3119: 08       PUSH  A
    311A: 7C 26 92 LCALL 0x2692
    311D: 18       POP   A
    311E: 54 05    MOV   [X+5],A
    3120: 18       POP   A
    3121: 54 04    MOV   [X+4],A
    3123: 18       POP   A
    3124: 54 03    MOV   [X+3],A
    3126: 18       POP   A
    3127: 54 02    MOV   [X+2],A
    3129: 38 FC    ADD   SP,0xFC
    312B: 3D 02 00 CMP   [X+2],0x0
    312E: BF 2A    JNZ   0x3059
    3130: 3D 03 00 CMP   [X+3],0x0
    3133: BF 25    JNZ   0x3059
    3135: 3D 04 00 CMP   [X+4],0x0
    3138: BF 20    JNZ   0x3059
    313A: 3D 05 00 CMP   [X+5],0x0
    313D: BF 1B    JNZ   0x3059
    313F: 3D 08 00 CMP   [X+8],0x0
    3142: A0 19    JZ    0x315C
    3144: 52 01    MOV   A,[X+1]
    3146: 53 09    MOV   [__r1],A
    3148: 52 00    MOV   A,[X+0]
    314A: 53 0A    MOV   [__r0],A
    314C: 51 09    MOV   A,[__r1]
    314E: 01 01    ADD   A,0x1
    3150: 54 01    MOV   [X+1],A
    3152: 51 0A    MOV   A,[__r0]
    3154: 09 00    ADC   A,0x0
    3156: 54 00    MOV   [X+0],A
    3158: 50 2D    MOV   A,0x2D
    315A: 3F 09    MVI   [__r1],A
    315C: 52 01    MOV   A,[X+1]
    315E: 53 09    MOV   [__r1],A
    3160: 52 00    MOV   A,[X+0]
    3162: 53 0A    MOV   [__r0],A
    3164: 51 09    MOV   A,[__r1]
    3166: 01 FF    ADD   A,0xFF
    3168: 54 01    MOV   [X+1],A
    316A: 51 0A    MOV   A,[__r0]
    316C: 09 FF    ADC   A,0xFF
    316E: 54 00    MOV   [X+0],A
    3170: 50 00    MOV   A,0x0
    3172: 3F 09    MVI   [__r1],A
    3174: 52 FC    MOV   A,[X-4]
    3176: 54 07    MOV   [X+7],A
    3178: 80 3D    JMP   0x31B6
    317A: 52 07    MOV   A,[X+7]
    317C: 53 09    MOV   [__r1],A
    317E: 3E 09    MVI   A,[__r1]
    3180: 54 08    MOV   [X+8],A
    3182: 52 07    MOV   A,[X+7]
    3184: 53 09    MOV   [__r1],A
    3186: 52 06    MOV   A,[X+6]
    3188: 53 0A    MOV   [__r0],A
    318A: 51 09    MOV   A,[__r1]
    318C: 01 01    ADD   A,0x1
    318E: 54 07    MOV   [X+7],A
    3190: 51 0A    MOV   A,[__r0]
    3192: 09 00    ADC   A,0x0
    3194: 54 06    MOV   [X+6],A
    3196: 52 01    MOV   A,[X+1]
    3198: 53 07    MOV   [__r3],A
    319A: 3E 07    MVI   A,[__r3]
    319C: 3F 09    MVI   [__r1],A
    319E: 52 01    MOV   A,[X+1]
    31A0: 53 09    MOV   [__r1],A
    31A2: 52 00    MOV   A,[X+0]
    31A4: 53 0A    MOV   [__r0],A
    31A6: 51 09    MOV   A,[__r1]
    31A8: 01 FF    ADD   A,0xFF
    31AA: 54 01    MOV   [X+1],A
    31AC: 51 0A    MOV   A,[__r0]
    31AE: 09 FF    ADC   A,0xFF
    31B0: 54 00    MOV   [X+0],A
    31B2: 52 08    MOV   A,[X+8]
    31B4: 3F 09    MVI   [__r1],A
    31B6: 52 01    MOV   A,[X+1]
    31B8: 53 0A    MOV   [__r0],A
    31BA: 52 07    MOV   A,[X+7]
    31BC: 3A 0A    CMP   A,[__r0]
    31BE: CF BB    JC    0x317A
    31C0: 52 FC    MOV   A,[X-4]
    31C2: 53 09    MOV   [__r1],A
    31C4: 52 FB    MOV   A,[X-5]
    31C6: 53 0A    MOV   [__r0],A
    31C8: 38 F5    ADD   SP,0xF5
    31CA: 20       POP   X
    31CB: 7F       RET   
_ftoa:
    31CC: 10       PUSH  X
    31CD: 4F       MOV   X,SP
    31CE: 38 16    ADD   SP,0x16
    31D0: 52 F8    MOV   A,[X-8]
    31D2: 53 09    MOV   [__r1],A
    31D4: 50 00    MOV   A,0x0
    31D6: 3F 09    MVI   [__r1],A
    31D8: 3F 09    MVI   [__r1],A
    31DA: 08       PUSH  A
    31DB: 08       PUSH  A
    31DC: 08       PUSH  A
    31DD: 08       PUSH  A
    31DE: 52 F9    MOV   A,[X-7]
    31E0: 08       PUSH  A
    31E1: 52 FA    MOV   A,[X-6]
    31E3: 08       PUSH  A
    31E4: 52 FB    MOV   A,[X-5]
    31E6: 08       PUSH  A
    31E7: 52 FC    MOV   A,[X-4]
    31E9: 08       PUSH  A
    31EA: 7C 28 94 LCALL 0x2894
    31ED: 38 F8    ADD   SP,0xF8
    31EF: 39 00    CMP   A,0x0
    31F1: B0 15    JNZ   0x3207
    31F3: 55 41 30 MOV   [filter+1],0x30
    31F6: 55 42 2E MOV   [filter+2],0x2E
    31F9: 55 43 30 MOV   [filter+3],0x30
    31FC: 55 44 00 MOV   [filter+4],0x0
    31FF: 55 09 41 MOV   [__r1],0x41
    3202: 55 0A 00 MOV   [__r0],0x0
    3205: 83 66    JMP   0x356C
    3207: 52 F9    MOV   A,[X-7]
    3209: 54 06    MOV   [X+6],A
    320B: 52 FA    MOV   A,[X-6]
    320D: 54 07    MOV   [X+7],A
    320F: 52 FB    MOV   A,[X-5]
    3211: 54 08    MOV   [X+8],A
    3213: 52 FC    MOV   A,[X-4]
    3215: 54 09    MOV   [X+9],A
    3217: 52 06    MOV   A,[X+6]
    3219: 53 0A    MOV   [__r0],A
    321B: 52 07    MOV   A,[X+7]
    321D: 53 09    MOV   [__r1],A
    321F: 52 08    MOV   A,[X+8]
    3221: 53 08    MOV   [__r2],A
    3223: 52 09    MOV   A,[X+9]
    3225: 53 07    MOV   [__r3],A
    3227: 50 17    MOV   A,0x17
    3229: 68 0A    ASR   [__r0]
    322B: 6E 09    RRC   [__r1]
    322D: 6E 08    RRC   [__r2]
    322F: 6E 07    RRC   [__r3]
    3231: 78       DEC   A
    3232: BF F6    JNZ   0x3229
    3234: 51 07    MOV   A,[__r3]
    3236: 11 7F    SUB   A,0x7F
    3238: 54 0B    MOV   [X+11],A
    323A: 50 00    MOV   A,0x0
    323C: 19 00    SBB   A,0x0
    323E: 54 0A    MOV   [X+10],A
    3240: 52 09    MOV   A,[X+9]
    3242: 53 07    MOV   [__r3],A
    3244: 52 08    MOV   A,[X+8]
    3246: 53 08    MOV   [__r2],A
    3248: 52 07    MOV   A,[X+7]
    324A: 53 09    MOV   [__r1],A
    324C: 51 07    MOV   A,[__r3]
    324E: 54 13    MOV   [X+19],A
    3250: 51 08    MOV   A,[__r2]
    3252: 54 12    MOV   [X+18],A
    3254: 51 09    MOV   A,[__r1]
    3256: 29 80    OR    A,0x80
    3258: 54 11    MOV   [X+17],A
    325A: 56 10 00 MOV   [X+16],0x0
    325D: 56 02 00 MOV   [X+2],0x0
    3260: 56 03 00 MOV   [X+3],0x0
    3263: 56 04 00 MOV   [X+4],0x0
    3266: 56 05 00 MOV   [X+5],0x0
    3269: 56 0C 00 MOV   [X+12],0x0
    326C: 56 0D 00 MOV   [X+13],0x0
    326F: 56 0E 00 MOV   [X+14],0x0
    3272: 56 0F 00 MOV   [X+15],0x0
    3275: 52 0B    MOV   A,[X+11]
    3277: 11 1F    SUB   A,0x1F
    3279: 52 0A    MOV   A,[X+10]
    327B: 31 80    XOR   A,0x80
    327D: 19 80    SBB   A,0x80
    327F: C0 15    JC    0x3295
    3281: 52 F8    MOV   A,[X-8]
    3283: 53 09    MOV   [__r1],A
    3285: 50 FF    MOV   A,0xFF
    3287: 3F 09    MVI   [__r1],A
    3289: 50 FE    MOV   A,0xFE
    328B: 3F 09    MVI   [__r1],A
    328D: 55 09 00 MOV   [__r1],0x0
    3290: 55 0A 00 MOV   [__r0],0x0
    3293: 82 D8    JMP   0x356C
    3295: 52 0B    MOV   A,[X+11]
    3297: 11 E9    SUB   A,0xE9
    3299: 52 0A    MOV   A,[X+10]
    329B: 31 80    XOR   A,0x80
    329D: 19 7F    SBB   A,0x7F
    329F: D0 13    JNC   0x32B3
    32A1: 52 F8    MOV   A,[X-8]
    32A3: 53 09    MOV   [__r1],A
    32A5: 50 FF    MOV   A,0xFF
    32A7: 3F 09    MVI   [__r1],A
    32A9: 3F 09    MVI   [__r1],A
    32AB: 55 09 00 MOV   [__r1],0x0
    32AE: 55 0A 00 MOV   [__r0],0x0
    32B1: 82 BA    JMP   0x356C
    32B3: 52 0B    MOV   A,[X+11]
    32B5: 11 17    SUB   A,0x17
    32B7: 52 0A    MOV   A,[X+10]
    32B9: 31 80    XOR   A,0x80
    32BB: 19 80    SBB   A,0x80
    32BD: C0 3A    JC    0x32F8
    32BF: 52 0B    MOV   A,[X+11]
    32C1: 11 17    SUB   A,0x17
    32C3: 53 09    MOV   [__r1],A
    32C5: 52 10    MOV   A,[X+16]
    32C7: 53 06    MOV   [__r4],A
    32C9: 52 11    MOV   A,[X+17]
    32CB: 53 05    MOV   [__r5],A
    32CD: 52 12    MOV   A,[X+18]
    32CF: 53 04    MOV   [__r6],A
    32D1: 52 13    MOV   A,[X+19]
    32D3: 53 03    MOV   [__r7],A
    32D5: 51 09    MOV   A,[__r1]
    32D7: 21 1F    AND   A,0x1F
    32D9: A0 0C    JZ    0x32E6
    32DB: 65 03    ASL   [__r7]
    32DD: 6B 04    RLC   [__r6]
    32DF: 6B 05    RLC   [__r5]
    32E1: 6B 06    RLC   [__r4]
    32E3: 78       DEC   A
    32E4: BF F6    JNZ   0x32DB
    32E6: 51 06    MOV   A,[__r4]
    32E8: 54 0C    MOV   [X+12],A
    32EA: 51 05    MOV   A,[__r5]
    32EC: 54 0D    MOV   [X+13],A
    32EE: 51 04    MOV   A,[__r6]
    32F0: 54 0E    MOV   [X+14],A
    32F2: 51 03    MOV   A,[__r7]
    32F4: 54 0F    MOV   [X+15],A
    32F6: 80 B5    JMP   0x33AC
    32F8: 52 0B    MOV   A,[X+11]
    32FA: 11 00    SUB   A,0x0
    32FC: 52 0A    MOV   A,[X+10]
    32FE: 31 80    XOR   A,0x80
    3300: 19 80    SBB   A,0x80
    3302: C0 70    JC    0x3373
    3304: 50 17    MOV   A,0x17
    3306: 13 0B    SUB   A,[X+11]
    3308: 53 09    MOV   [__r1],A
    330A: 52 10    MOV   A,[X+16]
    330C: 53 06    MOV   [__r4],A
    330E: 52 11    MOV   A,[X+17]
    3310: 53 05    MOV   [__r5],A
    3312: 52 12    MOV   A,[X+18]
    3314: 53 04    MOV   [__r6],A
    3316: 52 13    MOV   A,[X+19]
    3318: 53 03    MOV   [__r7],A
    331A: 51 09    MOV   A,[__r1]
    331C: 21 1F    AND   A,0x1F
    331E: A0 0C    JZ    0x332B
    3320: 68 06    ASR   [__r4]
    3322: 6E 05    RRC   [__r5]
    3324: 6E 04    RRC   [__r6]
    3326: 6E 03    RRC   [__r7]
    3328: 78       DEC   A
    3329: BF F6    JNZ   0x3320
    332B: 51 06    MOV   A,[__r4]
    332D: 54 0C    MOV   [X+12],A
    332F: 51 05    MOV   A,[__r5]
    3331: 54 0D    MOV   [X+13],A
    3333: 51 04    MOV   A,[__r6]
    3335: 54 0E    MOV   [X+14],A
    3337: 51 03    MOV   A,[__r7]
    3339: 54 0F    MOV   [X+15],A
    333B: 52 0B    MOV   A,[X+11]
    333D: 01 01    ADD   A,0x1
    333F: 53 09    MOV   [__r1],A
    3341: 52 10    MOV   A,[X+16]
    3343: 53 06    MOV   [__r4],A
    3345: 52 11    MOV   A,[X+17]
    3347: 53 05    MOV   [__r5],A
    3349: 52 12    MOV   A,[X+18]
    334B: 53 04    MOV   [__r6],A
    334D: 52 13    MOV   A,[X+19]
    334F: 53 03    MOV   [__r7],A
    3351: 51 09    MOV   A,[__r1]
    3353: 21 1F    AND   A,0x1F
    3355: A0 0C    JZ    0x3362
    3357: 65 03    ASL   [__r7]
    3359: 6B 04    RLC   [__r6]
    335B: 6B 05    RLC   [__r5]
    335D: 6B 06    RLC   [__r4]
    335F: 78       DEC   A
    3360: BF F6    JNZ   0x3357
    3362: 51 03    MOV   A,[__r7]
    3364: 54 05    MOV   [X+5],A
    3366: 51 04    MOV   A,[__r6]
    3368: 54 04    MOV   [X+4],A
    336A: 51 05    MOV   A,[__r5]
    336C: 54 03    MOV   [X+3],A
    336E: 56 02 00 MOV   [X+2],0x0
    3371: 80 3A    JMP   0x33AC
    3373: 52 0B    MOV   A,[X+11]
    3375: 01 01    ADD   A,0x1
    3377: 73       CPL   A
    3378: 11 FF    SUB   A,0xFF
    337A: 53 09    MOV   [__r1],A
    337C: 52 13    MOV   A,[X+19]
    337E: 53 03    MOV   [__r7],A
    3380: 52 12    MOV   A,[X+18]
    3382: 53 04    MOV   [__r6],A
    3384: 52 11    MOV   A,[X+17]
    3386: 53 05    MOV   [__r5],A
    3388: 55 06 00 MOV   [__r4],0x0
    338B: 51 09    MOV   A,[__r1]
    338D: 21 1F    AND   A,0x1F
    338F: A0 0C    JZ    0x339C
    3391: 68 06    ASR   [__r4]
    3393: 6E 05    RRC   [__r5]
    3395: 6E 04    RRC   [__r6]
    3397: 6E 03    RRC   [__r7]
    3399: 78       DEC   A
    339A: BF F6    JNZ   0x3391
    339C: 51 06    MOV   A,[__r4]
    339E: 54 02    MOV   [X+2],A
    33A0: 51 05    MOV   A,[__r5]
    33A2: 54 03    MOV   [X+3],A
    33A4: 51 04    MOV   A,[__r6]
    33A6: 54 04    MOV   [X+4],A
    33A8: 51 03    MOV   A,[__r7]
    33AA: 54 05    MOV   [X+5],A
    33AC: 56 01 41 MOV   [X+1],0x41
    33AF: 56 00 00 MOV   [X+0],0x0
    33B2: 52 09    MOV   A,[X+9]
    33B4: 11 00    SUB   A,0x0
    33B6: 52 08    MOV   A,[X+8]
    33B8: 19 00    SBB   A,0x0
    33BA: 52 07    MOV   A,[X+7]
    33BC: 19 00    SBB   A,0x0
    33BE: 52 06    MOV   A,[X+6]
    33C0: 31 80    XOR   A,0x80
    33C2: 19 80    SBB   A,0x80
    33C4: D0 19    JNC   0x33DE
    33C6: 52 01    MOV   A,[X+1]
    33C8: 53 09    MOV   [__r1],A
    33CA: 52 00    MOV   A,[X+0]
    33CC: 53 0A    MOV   [__r0],A
    33CE: 51 09    MOV   A,[__r1]
    33D0: 01 01    ADD   A,0x1
    33D2: 54 01    MOV   [X+1],A
    33D4: 51 0A    MOV   A,[__r0]
    33D6: 09 00    ADC   A,0x0
    33D8: 54 00    MOV   [X+0],A
    33DA: 50 2D    MOV   A,0x2D
    33DC: 3F 09    MVI   [__r1],A
    33DE: 3D 0C 00 CMP   [X+12],0x0
    33E1: B0 2A    JNZ   0x340C
    33E3: 3D 0D 00 CMP   [X+13],0x0
    33E6: B0 25    JNZ   0x340C
    33E8: 3D 0E 00 CMP   [X+14],0x0
    33EB: B0 20    JNZ   0x340C
    33ED: 3D 0F 00 CMP   [X+15],0x0
    33F0: B0 1B    JNZ   0x340C
    33F2: 52 01    MOV   A,[X+1]
    33F4: 53 09    MOV   [__r1],A
    33F6: 52 00    MOV   A,[X+0]
    33F8: 53 0A    MOV   [__r0],A
    33FA: 51 09    MOV   A,[__r1]
    33FC: 01 01    ADD   A,0x1
    33FE: 54 01    MOV   [X+1],A
    3400: 51 0A    MOV   A,[__r0]
    3402: 09 00    ADC   A,0x0
    3404: 54 00    MOV   [X+0],A
    3406: 50 30    MOV   A,0x30
    3408: 3F 09    MVI   [__r1],A
    340A: 80 2D    JMP   0x3438
    340C: 50 00    MOV   A,0x0
    340E: 08       PUSH  A
    340F: 50 0A    MOV   A,0xA
    3411: 08       PUSH  A
    3412: 52 0C    MOV   A,[X+12]
    3414: 08       PUSH  A
    3415: 52 0D    MOV   A,[X+13]
    3417: 08       PUSH  A
    3418: 52 0E    MOV   A,[X+14]
    341A: 08       PUSH  A
    341B: 52 0F    MOV   A,[X+15]
    341D: 08       PUSH  A
    341E: 52 00    MOV   A,[X+0]
    3420: 08       PUSH  A
    3421: 52 01    MOV   A,[X+1]
    3423: 08       PUSH  A
    3424: 7C 2F C3 LCALL _ltoa
    3427: 38 F8    ADD   SP,0xF8
    3429: 80 06    JMP   0x3430
    342B: 77 01    INC   [X+1]
    342D: 0F 00 00 ADC   [X+0],0x0
    3430: 52 01    MOV   A,[X+1]
    3432: 53 09    MOV   [__r1],A
    3434: 3E 09    MVI   A,[__r1]
    3436: BF F4    JNZ   0x342B
    3438: 52 01    MOV   A,[X+1]
    343A: 53 09    MOV   [__r1],A
    343C: 52 00    MOV   A,[X+0]
    343E: 53 0A    MOV   [__r0],A
    3440: 51 09    MOV   A,[__r1]
    3442: 01 01    ADD   A,0x1
    3444: 54 01    MOV   [X+1],A
    3446: 51 0A    MOV   A,[__r0]
    3448: 09 00    ADC   A,0x0
    344A: 54 00    MOV   [X+0],A
    344C: 50 2E    MOV   A,0x2E
    344E: 3F 09    MVI   [__r1],A
    3450: 3D 02 00 CMP   [X+2],0x0
    3453: B0 2A    JNZ   0x347E
    3455: 3D 03 00 CMP   [X+3],0x0
    3458: B0 25    JNZ   0x347E
    345A: 3D 04 00 CMP   [X+4],0x0
    345D: B0 20    JNZ   0x347E
    345F: 3D 05 00 CMP   [X+5],0x0
    3462: B0 1B    JNZ   0x347E
    3464: 52 01    MOV   A,[X+1]
    3466: 53 09    MOV   [__r1],A
    3468: 52 00    MOV   A,[X+0]
    346A: 53 0A    MOV   [__r0],A
    346C: 51 09    MOV   A,[__r1]
    346E: 01 01    ADD   A,0x1
    3470: 54 01    MOV   [X+1],A
    3472: 51 0A    MOV   A,[__r0]
    3474: 09 00    ADC   A,0x0
    3476: 54 00    MOV   [X+0],A
    3478: 50 30    MOV   A,0x30
    347A: 3F 09    MVI   [__r1],A
    347C: 80 E1    JMP   0x355E
    347E: 55 0A 41 MOV   [__r0],0x41
    3481: 52 01    MOV   A,[X+1]
    3483: 12 0A    SUB   A,[__r0]
    3485: 53 0A    MOV   [__r0],A
    3487: 50 0F    MOV   A,0xF
    3489: 12 0A    SUB   A,[__r0]
    348B: 11 01    SUB   A,0x1
    348D: 54 15    MOV   [X+21],A
    348F: 50 07    MOV   A,0x7
    3491: 3B 15    CMP   A,[X+21]
    3493: D0 04    JNC   0x3498
    3495: 56 15 07 MOV   [X+21],0x7
    3498: 56 14 00 MOV   [X+20],0x0
    349B: 80 93    JMP   0x352F
    349D: 52 02    MOV   A,[X+2]
    349F: 53 0A    MOV   [__r0],A
    34A1: 52 03    MOV   A,[X+3]
    34A3: 53 09    MOV   [__r1],A
    34A5: 52 04    MOV   A,[X+4]
    34A7: 53 08    MOV   [__r2],A
    34A9: 52 05    MOV   A,[X+5]
    34AB: 64       ASL   A
    34AC: 53 07    MOV   [__r3],A
    34AE: 6B 08    RLC   [__r2]
    34B0: 6B 09    RLC   [__r1]
    34B2: 6B 0A    RLC   [__r0]
    34B4: 52 02    MOV   A,[X+2]
    34B6: 53 06    MOV   [__r4],A
    34B8: 52 03    MOV   A,[X+3]
    34BA: 53 05    MOV   [__r5],A
    34BC: 52 04    MOV   A,[X+4]
    34BE: 53 04    MOV   [__r6],A
    34C0: 52 05    MOV   A,[X+5]
    34C2: 53 03    MOV   [__r7],A
    34C4: 50 03    MOV   A,0x3
    34C6: 65 03    ASL   [__r7]
    34C8: 6B 04    RLC   [__r6]
    34CA: 6B 05    RLC   [__r5]
    34CC: 6B 06    RLC   [__r4]
    34CE: 78       DEC   A
    34CF: BF F6    JNZ   0x34C6
    34D1: 51 03    MOV   A,[__r7]
    34D3: 02 07    ADD   A,[__r3]
    34D5: 54 05    MOV   [X+5],A
    34D7: 51 04    MOV   A,[__r6]
    34D9: 0A 08    ADC   A,[__r2]
    34DB: 54 04    MOV   [X+4],A
    34DD: 51 05    MOV   A,[__r5]
    34DF: 0A 09    ADC   A,[__r1]
    34E1: 54 03    MOV   [X+3],A
    34E3: 51 06    MOV   A,[__r4]
    34E5: 0A 0A    ADC   A,[__r0]
    34E7: 54 02    MOV   [X+2],A
    34E9: 52 01    MOV   A,[X+1]
    34EB: 53 09    MOV   [__r1],A
    34ED: 52 00    MOV   A,[X+0]
    34EF: 53 0A    MOV   [__r0],A
    34F1: 51 09    MOV   A,[__r1]
    34F3: 01 01    ADD   A,0x1
    34F5: 54 01    MOV   [X+1],A
    34F7: 51 0A    MOV   A,[__r0]
    34F9: 09 00    ADC   A,0x0
    34FB: 54 00    MOV   [X+0],A
    34FD: 52 02    MOV   A,[X+2]
    34FF: 53 06    MOV   [__r4],A
    3501: 52 03    MOV   A,[X+3]
    3503: 53 05    MOV   [__r5],A
    3505: 52 04    MOV   A,[X+4]
    3507: 53 04    MOV   [__r6],A
    3509: 52 05    MOV   A,[X+5]
    350B: 53 03    MOV   [__r7],A
    350D: 50 18    MOV   A,0x18
    350F: 68 06    ASR   [__r4]
    3511: 6E 05    RRC   [__r5]
    3513: 6E 04    RRC   [__r6]
    3515: 6E 03    RRC   [__r7]
    3517: 78       DEC   A
    3518: BF F6    JNZ   0x350F
    351A: 06 03 30 ADD   [__r7],0x30
    351D: 0E 04 00 ADC   [__r6],0x0
    3520: 0E 05 00 ADC   [__r5],0x0
    3523: 0E 06 00 ADC   [__r4],0x0
    3526: 51 03    MOV   A,[__r7]
    3528: 3F 09    MVI   [__r1],A
    352A: 27 02 00 AND   [X+2],0x0
    352D: 77 14    INC   [X+20]
    352F: 52 14    MOV   A,[X+20]
    3531: 3B 15    CMP   A,[X+21]
    3533: CF 69    JC    0x349D
    3535: 52 01    MOV   A,[X+1]
    3537: 01 FF    ADD   A,0xFF
    3539: 54 01    MOV   [X+1],A
    353B: 80 07    JMP   0x3543
    353D: 52 01    MOV   A,[X+1]
    353F: 01 FF    ADD   A,0xFF
    3541: 54 01    MOV   [X+1],A
    3543: 52 01    MOV   A,[X+1]
    3545: 53 09    MOV   [__r1],A
    3547: 3E 09    MVI   A,[__r1]
    3549: 39 30    CMP   A,0x30
    354B: B0 0D    JNZ   0x3559
    354D: 52 01    MOV   A,[X+1]
    354F: 01 FF    ADD   A,0xFF
    3551: 53 09    MOV   [__r1],A
    3553: 3E 09    MVI   A,[__r1]
    3555: 39 2E    CMP   A,0x2E
    3557: BF E5    JNZ   0x353D
    3559: 77 01    INC   [X+1]
    355B: 0F 00 00 ADC   [X+0],0x0
    355E: 52 01    MOV   A,[X+1]
    3560: 53 09    MOV   [__r1],A
    3562: 50 00    MOV   A,0x0
    3564: 3F 09    MVI   [__r1],A
    3566: 55 09 41 MOV   [__r1],0x41
    3569: 55 0A 00 MOV   [__r0],0x0
    356C: 38 EA    ADD   SP,0xEA
    356E: 20       POP   X
    356F: 7F       RET   
_isdigit:
    3570: 10       PUSH  X
    3571: 4F       MOV   X,SP
    3572: 52 FC    MOV   A,[X-4]
    3574: 01 17    ADD   A,0x17
    3576: 53 09    MOV   [__r1],A
    3578: 52 FB    MOV   A,[X-5]
    357A: 09 03    ADC   A,0x3
    357C: 10       PUSH  X
    357D: 58 09    MOV   X,[__r1]
    357F: 28       ROMX  
    3580: 20       POP   X
    3581: 53 09    MOV   [__r1],A
    3583: 55 0A 00 MOV   [__r0],0x0
    3586: 26 09 04 AND   [__r1],0x4
    3589: 26 0A 00 AND   [__r0],0x0
    358C: 20       POP   X
    358D: 7F       RET   
_isspace:
    358E: 10       PUSH  X
    358F: 4F       MOV   X,SP
    3590: 52 FC    MOV   A,[X-4]
    3592: 01 17    ADD   A,0x17
    3594: 53 09    MOV   [__r1],A
    3596: 52 FB    MOV   A,[X-5]
    3598: 09 03    ADC   A,0x3
    359A: 10       PUSH  X
    359B: 58 09    MOV   X,[__r1]
    359D: 28       ROMX  
    359E: 20       POP   X
    359F: 53 09    MOV   [__r1],A
    35A1: 55 0A 00 MOV   [__r0],0x0
    35A4: 26 09 10 AND   [__r1],0x10
    35A7: 26 0A 00 AND   [__r0],0x0
    35AA: 20       POP   X
    35AB: 7F       RET   
_strchr:
    35AC: 10       PUSH  X
    35AD: 4F       MOV   X,SP
    35AE: 80 06    JMP   0x35B5
    35B0: 77 FC    INC   [X-4]
    35B2: 0F FB 00 ADC   [X-5],0x0
    35B5: 52 FC    MOV   A,[X-4]
    35B7: 53 09    MOV   [__r1],A
    35B9: 3E 09    MVI   A,[__r1]
    35BB: 53 09    MOV   [__r1],A
    35BD: 55 0A 00 MOV   [__r0],0x0
    35C0: 3C 0A 00 CMP   [__r0],0x0
    35C3: B0 05    JNZ   0x35C9
    35C5: 39 00    CMP   A,0x0
    35C7: A0 0D    JZ    0x35D5
    35C9: 51 0A    MOV   A,[__r0]
    35CB: 3B F9    CMP   A,[X-7]
    35CD: BF E2    JNZ   0x35B0
    35CF: 51 09    MOV   A,[__r1]
    35D1: 3B FA    CMP   A,[X-6]
    35D3: BF DC    JNZ   0x35B0
    35D5: 52 FC    MOV   A,[X-4]
    35D7: 53 09    MOV   [__r1],A
    35D9: 3E 09    MVI   A,[__r1]
    35DB: 53 09    MOV   [__r1],A
    35DD: 50 00    MOV   A,0x0
    35DF: 3B F9    CMP   A,[X-7]
    35E1: B0 11    JNZ   0x35F3
    35E3: 51 09    MOV   A,[__r1]
    35E5: 3B FA    CMP   A,[X-6]
    35E7: B0 0B    JNZ   0x35F3
    35E9: 52 FC    MOV   A,[X-4]
    35EB: 53 09    MOV   [__r1],A
    35ED: 52 FB    MOV   A,[X-5]
    35EF: 53 0A    MOV   [__r0],A
    35F1: 80 07    JMP   0x35F9
    35F3: 55 09 00 MOV   [__r1],0x0
    35F6: 55 0A 00 MOV   [__r0],0x0
    35F9: 20       POP   X
    35FA: 7F       RET   
_strncat:
    35FB: 10       PUSH  X
    35FC: 4F       MOV   X,SP
    35FD: 38 02    ADD   SP,0x2
    35FF: 52 FC    MOV   A,[X-4]
    3601: 54 01    MOV   [X+1],A
    3603: 80 06    JMP   0x360A
    3605: 77 FC    INC   [X-4]
    3607: 0F FB 00 ADC   [X-5],0x0
    360A: 52 FC    MOV   A,[X-4]
    360C: 53 09    MOV   [__r1],A
    360E: 3E 09    MVI   A,[__r1]
    3610: BF F4    JNZ   0x3605
    3612: 80 2F    JMP   0x3642
    3614: 52 FC    MOV   A,[X-4]
    3616: 53 09    MOV   [__r1],A
    3618: 52 FB    MOV   A,[X-5]
    361A: 53 0A    MOV   [__r0],A
    361C: 51 09    MOV   A,[__r1]
    361E: 01 01    ADD   A,0x1
    3620: 54 FC    MOV   [X-4],A
    3622: 51 0A    MOV   A,[__r0]
    3624: 09 00    ADC   A,0x0
    3626: 54 FB    MOV   [X-5],A
    3628: 52 FA    MOV   A,[X-6]
    362A: 53 07    MOV   [__r3],A
    362C: 52 F9    MOV   A,[X-7]
    362E: 53 08    MOV   [__r2],A
    3630: 51 07    MOV   A,[__r3]
    3632: 01 01    ADD   A,0x1
    3634: 54 FA    MOV   [X-6],A
    3636: 51 08    MOV   A,[__r2]
    3638: 09 00    ADC   A,0x0
    363A: 54 F9    MOV   [X-7],A
    363C: 3E 07    MVI   A,[__r3]
    363E: 7A 07    DEC   [__r3]
    3640: 3F 09    MVI   [__r1],A
    3642: 52 FA    MOV   A,[X-6]
    3644: 53 09    MOV   [__r1],A
    3646: 3E 09    MVI   A,[__r1]
    3648: A0 1F    JZ    0x3668
    364A: 52 F8    MOV   A,[X-8]
    364C: 53 09    MOV   [__r1],A
    364E: 52 F7    MOV   A,[X-9]
    3650: 53 0A    MOV   [__r0],A
    3652: 51 09    MOV   A,[__r1]
    3654: 11 01    SUB   A,0x1
    3656: 54 F8    MOV   [X-8],A
    3658: 51 0A    MOV   A,[__r0]
    365A: 19 00    SBB   A,0x0
    365C: 54 F7    MOV   [X-9],A
    365E: 3C 0A 00 CMP   [__r0],0x0
    3661: BF B2    JNZ   0x3614
    3663: 3C 09 00 CMP   [__r1],0x0
    3666: BF AD    JNZ   0x3614
    3668: 52 FC    MOV   A,[X-4]
    366A: 53 09    MOV   [__r1],A
    366C: 50 00    MOV   A,0x0
    366E: 3F 09    MVI   [__r1],A
    3670: 52 01    MOV   A,[X+1]
    3672: 53 09    MOV   [__r1],A
    3674: 52 00    MOV   A,[X+0]
    3676: 53 0A    MOV   [__r0],A
    3678: 38 FE    ADD   SP,0xFE
    367A: 20       POP   X
    367B: 7F       RET   
_strncpy:
    367C: 10       PUSH  X
    367D: 4F       MOV   X,SP
    367E: 38 02    ADD   SP,0x2
    3680: 52 FC    MOV   A,[X-4]
    3682: 54 01    MOV   [X+1],A
    3684: 80 34    JMP   0x36B9
    3686: 52 FC    MOV   A,[X-4]
    3688: 53 09    MOV   [__r1],A
    368A: 52 FB    MOV   A,[X-5]
    368C: 53 0A    MOV   [__r0],A
    368E: 51 09    MOV   A,[__r1]
    3690: 01 01    ADD   A,0x1
    3692: 54 FC    MOV   [X-4],A
    3694: 51 0A    MOV   A,[__r0]
    3696: 09 00    ADC   A,0x0
    3698: 54 FB    MOV   [X-5],A
    369A: 52 FA    MOV   A,[X-6]
    369C: 53 07    MOV   [__r3],A
    369E: 52 F9    MOV   A,[X-7]
    36A0: 53 08    MOV   [__r2],A
    36A2: 51 07    MOV   A,[__r3]
    36A4: 01 01    ADD   A,0x1
    36A6: 54 FA    MOV   [X-6],A
    36A8: 51 08    MOV   A,[__r2]
    36AA: 09 00    ADC   A,0x0
    36AC: 54 F9    MOV   [X-7],A
    36AE: 3E 07    MVI   A,[__r3]
    36B0: 7A 07    DEC   [__r3]
    36B2: 3F 09    MVI   [__r1],A
    36B4: 7B F8    DEC   [X-8]
    36B6: 1F F7 00 SBB   [X-9],0x0
    36B9: 52 FA    MOV   A,[X-6]
    36BB: 53 09    MOV   [__r1],A
    36BD: 3E 09    MVI   A,[__r1]
    36BF: A0 0B    JZ    0x36CB
    36C1: 3D F7 00 CMP   [X-9],0x0
    36C4: BF C1    JNZ   0x3686
    36C6: 3D F8 00 CMP   [X-8],0x0
    36C9: BF BC    JNZ   0x3686
    36CB: 80 19    JMP   0x36E5
    36CD: 52 FC    MOV   A,[X-4]
    36CF: 53 09    MOV   [__r1],A
    36D1: 52 FB    MOV   A,[X-5]
    36D3: 53 0A    MOV   [__r0],A
    36D5: 51 09    MOV   A,[__r1]
    36D7: 01 01    ADD   A,0x1
    36D9: 54 FC    MOV   [X-4],A
    36DB: 51 0A    MOV   A,[__r0]
    36DD: 09 00    ADC   A,0x0
    36DF: 54 FB    MOV   [X-5],A
    36E1: 50 00    MOV   A,0x0
    36E3: 3F 09    MVI   [__r1],A
    36E5: 52 F8    MOV   A,[X-8]
    36E7: 53 09    MOV   [__r1],A
    36E9: 52 F7    MOV   A,[X-9]
    36EB: 53 0A    MOV   [__r0],A
    36ED: 51 09    MOV   A,[__r1]
    36EF: 11 01    SUB   A,0x1
    36F1: 54 F8    MOV   [X-8],A
    36F3: 51 0A    MOV   A,[__r0]
    36F5: 19 00    SBB   A,0x0
    36F7: 54 F7    MOV   [X-9],A
    36F9: 3C 0A 00 CMP   [__r0],0x0
    36FC: BF D0    JNZ   0x36CD
    36FE: 3C 09 00 CMP   [__r1],0x0
    3701: BF CB    JNZ   0x36CD
    3703: 52 01    MOV   A,[X+1]
    3705: 53 09    MOV   [__r1],A
    3707: 52 00    MOV   A,[X+0]
    3709: 53 0A    MOV   [__r0],A
    370B: 38 FE    ADD   SP,0xFE
    370D: 20       POP   X
    370E: 7F       RET   
